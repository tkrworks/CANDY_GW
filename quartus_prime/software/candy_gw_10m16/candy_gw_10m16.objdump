
candy_gw_10m16.elf:     file format elf32-littlenios2
candy_gw_10m16.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000127b8 memsz 0x00015c58 flags rwx
    LOAD off    0x00014000 vaddr 0x04100000 paddr 0x04100000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04100000  04100000  00014000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00014000  2**0
                  CONTENTS
  2 .text         0001032c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  0001034c  0001034c  0001134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fd4  00010804  00010804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000034a0  000127d8  000127d8  000137d8  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00015c78  00015c78  00014000  2**0
                  CONTENTS
  7 .intel_generic_serial_flash_interface_top_0_avl_mem 00000000  03000000  03000000  00014000  2**0
                  CONTENTS
  8 .onchip_flash_0_data 00000000  04100020  04100020  00014000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00014000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000d08  00000000  00000000  00014028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002251b  00000000  00000000  00014d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008b66  00000000  00000000  0003724b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ae09  00000000  00000000  0003fdb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000234c  00000000  00000000  0004abbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000432f  00000000  00000000  0004cf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00019c3b  00000000  00000000  00051237  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  0006ae74  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000018c0  00000000  00000000  0006aec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0007092e  2**0
                  CONTENTS, READONLY
 20 .cpu          00000007  00000000  00000000  00070931  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00070938  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00070939  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0007093a  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0007093e  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00070942  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000a  00000000  00000000  00070946  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  00070950  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  0007095a  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000d  00000000  00000000  00070964  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003b  00000000  00000000  00070971  2**0
                  CONTENTS, READONLY
 31 .jdi          0000619d  00000000  00000000  000709ac  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000cf27e  00000000  00000000  00076b49  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04100000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0001034c l    d  .rodata	00000000 .rodata
00010804 l    d  .rwdata	00000000 .rwdata
000127d8 l    d  .bss	00000000 .bss
00015c78 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
03000000 l    d  .intel_generic_serial_flash_interface_top_0_avl_mem	00000000 .intel_generic_serial_flash_interface_top_0_avl_mem
04100020 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../candy_gw_10m16_bsp//obj/HAL/src/crt0.o
000000b0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 SigmaStudioFW.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000007a8 l     F .text	00000068 alt_dma_txchan_send
00000810 l     F .text	00000068 alt_dma_rxchan_prepare
00001250 l     F .text	000002e4 isr_timer0
00001534 l     F .text	00000034 dma_rx_done1
00001568 l     F .text	000000b4 dma_rx_done
0000161c l     F .text	000000d4 fifo_callback
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001051a l     O .rodata	00000010 zeroes.4404
00003f84 l     F .text	000000bc __sbprintf
0001052a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004194 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005cc4 l     F .text	00000008 __fp_unlock
00005cd8 l     F .text	0000019c __sinit.part.1
00005e74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010a8c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010ed0 l     O .rwdata	00000020 lc_ctype_charset
00010eb0 l     O .rwdata	00000020 lc_message_charset
00010ef0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001055c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009148 l     F .text	000000fc __sprint_r.part.0
00010690 l     O .rodata	00000010 blanks.4348
00010680 l     O .rodata	00000010 zeroes.4349
0000a6d4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000127bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000126bc l     O .rwdata	0000009c vic_0
000125e0 l     O .rwdata	0000001c dma_rx_rx
000125fc l     O .rwdata	0000001c dma_rx_tx
00012504 l     O .rwdata	0000001c dma_tx_rx
00012520 l     O .rwdata	0000001c dma_tx_tx
00011330 l     O .rwdata	00000100 onchip_flash_0
0001253c l     O .rwdata	000000a4 dma_tx_priv
00012618 l     O .rwdata	000000a4 dma_rx_priv
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0000e774 l     F .text	00000134 alt_avalon_dma_irq
0000e920 l     F .text	00000044 alt_avalon_dma_launch_txonly
0000e964 l     F .text	00000044 alt_avalon_dma_launch_rxonly
0000e9a8 l     F .text	0000018c alt_avalon_dma_ioctl
000107d4 l     O .rodata	00000010 CSWTCH.10
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ef18 l     F .text	00000048 altera_avalon_jtag_uart_timeout
0000ef60 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f3c0 l     F .text	00000054 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000f45c l     F .text	00000134 altera_avalon_uart_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
000107e4 l     O .rodata	00000020 VEC_SIZE_ARRAY.1850
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 memcmp.c
00000dd4 g     F .text	00000048 read_bank_register
0000878c g     F .text	00000074 _mprec_log10
00008878 g     F .text	0000008c __any_on
0000ac70 g     F .text	00000054 _isatty_r
00010568 g     O .rodata	00000028 __mprec_tinytens
0000e548 g     F .text	0000002c alt_main
00001c04 g     F .text	000000c0 _puts_r
00012777 g     O .rwdata	00000005 R22_CRC_REGISTERS_IC_1_Default
0000acc4 g     F .text	00000060 _lseek_r
0000edbc g     F .text	0000001c altera_avalon_fifo_write_almostfull
0000cebc g     F .text	00000088 .hidden __eqdf2
00015c78 g       *ABS*	00000000 __alt_heap_start
00001bc8 g     F .text	0000003c printf
0000aedc g     F .text	0000009c _wcrtomb_r
00009008 g     F .text	0000005c __sseek
00006014 g     F .text	00000010 __sinit
0000ecb8 g     F .text	00000090 alt_avalon_dma_init
000004b8 g     F .text	00000084 SIGMA_WRITE_REGISTER_BLOCK
0000ad84 g     F .text	00000140 __swbuf_r
000127f0 g     O .bss	00000004 fill_count
00012808 g     O .bss	00000004 rxchan1
00006adc g     F .text	0000007c _setlocale_r
00005e7c g     F .text	00000068 __sfmoreglue
00010a16 g     O .rwdata	00000048 Param_Data_IC_1
0000e578 g     F .text	00000004 __malloc_unlock
00000d84 g     F .text	00000050 clear_flag_status_register
000127f4 g     O .bss	00000004 rx_done
000127e5 g     O .bss	00000001 R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default
000077ac g     F .text	0000015c memmove
0000edf4 g     F .text	00000098 altera_avalon_fifo_init
00005ffc g     F .text	00000018 _cleanup
0000ee8c g     F .text	0000001c altera_avalon_fifo_write_fifo
00007908 g     F .text	000000a8 _Balloc
0000cf44 g     F .text	000000dc .hidden __gtdf2
0001284c g     O .bss	00001402 i2c_write_data
04100000 g     F .entry	00000000 __reset
0000ef10 g     F .text	00000008 altera_avalon_fifo_read_backpressure
0000ac14 g     F .text	0000005c _fstat_r
00012830 g     O .bss	00000004 errno
00008f84 g     F .text	00000008 __seofread
00000f04 g     F .text	00000050 write_config_register
00012838 g     O .bss	00000004 alt_argv
000127ec g     O .bss	00000004 callback_count
0001a758 g       *ABS*	00000000 _gp
0000e638 g     F .text	00000004 usleep
0000fbfc g     F .text	0000005c alt_onchip_flash_poll_for_status_write_passed
0000ed84 g     F .text	0000001c altera_avalon_fifo_clear_event
00012800 g     O .bss	00000004 pwm_interval0
0000e41c g     F .text	0000004c alt_dma_txchan_open
00000644 g     F .text	000000e4 SIGMA_SAFELOAD_WRITE_DATA
000127dd g     O .bss	00000001 R7_MICCTRLREGISTER_IC_1_Default
0001277c g     O .rwdata	00000002 R24_NON_MODULO_REGISTERS_IC_1_Default
0001275a g     O .rwdata	00000006 R3_PLLCRLREGISTER_IC_1_Default
0000fe0c g       .text	00000000 VIC_0_VECTOR_TABLE
0000e468 g     F .text	00000074 alt_find_dev
00007664 g     F .text	00000148 memcpy
04100000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
00005ccc g     F .text	0000000c _cleanup_r
0000e1a8 g     F .text	000000dc .hidden __floatsidf
0000d020 g     F .text	000000f4 .hidden __ltdf2
00000320 g     F .text	00000198 i2c_multiple_write
00000ce4 g     F .text	00000050 write_enable
00001cc4 g     F .text	00000014 puts
00008e68 g     F .text	00000074 __fpclassifyd
000086e8 g     F .text	000000a4 __ratio
0000a6b8 g     F .text	0000001c __vfiprintf_internal
0000f0f0 g     F .text	00000150 altera_avalon_jtag_uart_read
00001b98 g     F .text	00000030 _printf_r
0000bc6c g     F .text	00000064 .hidden __udivsi3
0000e4fc g     F .text	0000000c isatty
0000fab4 g     F .text	0000005c alt_onchip_flash_poll_for_status_erase_passed
000105b8 g     O .rodata	000000c8 __mprec_tens
00006b58 g     F .text	0000000c __locale_charset
0001276f g     O .rwdata	00000003 R12_DAC_CONTROL_REGISTERS_IC_1_Default
0001282c g     O .bss	00000004 __malloc_top_pad
000127c0 g     O .rwdata	00000008 altera_onchip_flash_list
00012798 g     O .rwdata	00000004 __mb_cur_max
00006b88 g     F .text	0000000c _localeconv_r
00007d14 g     F .text	0000003c __i2b
00006498 g     F .text	000004bc __sfvwrite_r
00012762 g     O .rwdata	00000002 R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default
00008edc g     F .text	00000054 _sbrk_r
000010f0 g     F .text	00000060 write_memory
00010a6c g     O .rwdata	00000010 pwm_direction
0001280c g     O .bss	00000004 rxchan
0000ad24 g     F .text	00000060 _read_r
000100dc g     F .text	00000028 alt_dcache_flush
0000fb10 g     F .text	000000ec alt_onchip_flash_erase_block
00000ff4 g     F .text	00000054 read_memory
0000a908 g     F .text	000000f0 _fclose_r
00000c0c g     F .text	00000048 read_device_id
02000000 g       *ABS*	00000000 __alt_interrupt_stack_pointer
00005c94 g     F .text	00000030 fflush
00012828 g     O .bss	00000004 __malloc_max_sbrked_mem
000127fc g     O .bss	00000004 pwm_addr0
00001150 g     F .text	00000060 write_memory_3byte
0000bd28 g     F .text	000008ac .hidden __adddf3
0000e8a8 g     F .text	00000078 alt_avalon_dma_launch_bidir
0000028c g     F .text	00000094 i2c_write_byte_stop
0001278c g     O .rwdata	00000004 pwm_addr1
00008490 g     F .text	0000010c __b2d
0000b63c g     F .text	00000538 .hidden __umoddi3
0000e3d0 g     F .text	0000004c alt_dma_rxchan_open
0000e508 g     F .text	00000040 lseek
00012790 g     O .rwdata	00000004 _global_impure_ptr
00008904 g     F .text	00000564 _realloc_r
00015c78 g       *ABS*	00000000 __bss_end
00010a5e g     O .rwdata	0000000e R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default
00010218 g     F .text	000000b8 alt_tick
00012764 g     O .rwdata	00000008 R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default
0000b0c4 g     F .text	00000578 .hidden __udivdi3
0000ab70 g     F .text	00000024 _fputwc_r
00010590 g     O .rodata	00000028 __mprec_bigtens
00007af8 g     F .text	00000104 __s2b
0000e284 g     F .text	000000a8 .hidden __floatunsidf
000005b8 g     F .text	0000008c SIGMA_SAFELOAD_WRITE_ADDR
000081d0 g     F .text	00000060 __mcmp
0000f590 g     F .text	00000040 altera_avalon_uart_init
00006034 g     F .text	00000018 __fp_lock_all
00000728 g     F .text	00000080 SIGMA_SAFELOAD_WRITE_TRANSFER_BIT
000101d4 g     F .text	00000044 alt_alarm_stop
00012775 g     O .rwdata	00000001 R15_JACKREGISTER_IC_1_Default
00000e6c g     F .text	00000050 write_bank_register_exit4byte
00000134 g     F .text	000000a8 i2c_start
000127d8 g     O .bss	00000001 R1_DSP_RUN_REGISTER_IC_1_Default
00007bfc g     F .text	00000068 __hi0bits
000127e6 g     O .bss	00000001 R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default
0000e128 g     F .text	00000080 .hidden __fixdfsi
0000fe7c g       .text	00000000 alt_shadow_non_preemptive_interrupt
0000eda0 g     F .text	0000001c altera_avalon_fifo_write_ienable
0000ed68 g     F .text	00000008 altera_avalon_fifo_read_almostempty
0000ebec g     F .text	00000024 alt_avalon_dma_space
0000e63c g     F .text	00000060 write
00013c50 g     O .bss	00002000 rx_buffer
0000053c g     F .text	0000007c SIGMA_WRITE_REGISTER_CONTROL
0000e4dc g     F .text	00000020 fstat
00010804 g     O .rwdata	00000212 Program_Data_IC_1
0000d020 g     F .text	000000f4 .hidden __ledf2
000017c8 g     F .text	00000088 initCODEC
00007f48 g     F .text	00000140 __pow5mult
0000925c g     F .text	0000145c ___vfiprintf_internal_r
00012820 g     O .bss	00000004 __nlocale_changed
0000bcd0 g     F .text	00000058 .hidden __umodsi3
000114cc g     O .rwdata	00001038 jtaguart_0
00015c78 g       *ABS*	00000000 end
00012810 g     O .bss	00000004 txchan1
0000f048 g     F .text	00000078 altera_avalon_jtag_uart_init
0000ed70 g     F .text	0000000c altera_avalon_fifo_read_event
01fff000 g       *ABS*	00000000 __alt_stack_pointer
0000f414 g     F .text	00000048 alt_avalon_timer_sc_init
0000e32c g     F .text	00000064 .hidden __clzsi2
0000f240 g     F .text	00000180 altera_avalon_jtag_uart_write
0000eed0 g     F .text	0000001c altera_avalon_fifo_read_fifo
00006024 g     F .text	00000004 __sfp_lock_acquire
00007580 g     F .text	000000e4 memchr
00001d70 g     F .text	000021f8 ___vfprintf_internal_r
0000f664 g     F .text	00000044 alt_onchip_flash_get_info
00006188 g     F .text	00000310 _free_r
00006b64 g     F .text	00000010 __locale_mb_cur_max
0000ec10 g     F .text	000000a8 alt_avalon_dma_send
000127b0 g     O .rwdata	00000008 alt_dma_txchan_list
0001281c g     O .bss	00000004 __mlocale_changed
0001279c g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	00000094 _start
00012848 g     O .bss	00000004 _alt_tick_rate
000127e9 g     O .bss	00000001 R37_DEJITTER_REGISTER_CONTROL_IC_1_Default
00008088 g     F .text	00000148 __lshift
00012844 g     O .bss	00000004 _alt_nticks
0000e57c g     F .text	00000054 read
0000e6c8 g     F .text	000000ac alt_sys_init
000127e4 g     O .bss	00000001 R27_ROUTING_MATRIX_INPUTS_IC_1_Default
00007d50 g     F .text	000001f8 __multiply
0000f0c0 g     F .text	00000030 altera_avalon_jtag_uart_close
00015c50 g     O .bss	00000028 __malloc_current_mallinfo
0000859c g     F .text	0000014c __d2b
00000c9c g     F .text	00000048 read_flag_status_register
000127e7 g     O .bss	00000001 R30_DSP_SLEW_MODES_IC_1_Default
00010064 g     F .text	00000078 alt_busy_sleep
0000a7f0 g     F .text	00000054 _close_r
000102d0 g     F .text	0000007c memcmp
00015c78 g       *ABS*	00000000 __alt_stack_base
00012788 g     O .rwdata	00000001 R38_DEJITTER_REGISTER_CONTROL_IC_1_Default
000127de g     O .bss	00000002 R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default
00004040 g     F .text	00000154 __swsetup_r
0000ed48 g     F .text	0000000c altera_avalon_fifo_read_status
0000c5d4 g     F .text	000008e8 .hidden __divdf3
0000f5f4 g     F .text	00000070 alt_onchip_flash_read
00005ee4 g     F .text	00000118 __sfp
00008800 g     F .text	00000078 __copybits
00000e1c g     F .text	00000050 write_bank_register_enter4byte
00010f28 g     O .rwdata	00000408 __malloc_av_
00006030 g     F .text	00000004 __sinit_lock_release
000011b0 g     F .text	00000050 write_register_for_sector_protect_cypress
0000d114 g     F .text	00000718 .hidden __muldf3
00008f30 g     F .text	00000054 __sread
0000ef08 g     F .text	00000008 altera_avalon_fifo_read_other_info
00010104 g     F .text	0000006c alt_dev_llist_insert
0000e574 g     F .text	00000004 __malloc_lock
0000e5d0 g     F .text	00000068 sbrk
00005c38 g     F .text	0000005c _fflush_r
0000a844 g     F .text	000000c4 _calloc_r
000127c8 g     O .rwdata	00000008 alt_flash_dev_list
00012786 g     O .rwdata	00000001 R35_SAMPLE_RATE_SETTING_IC_1_Default
000127d8 g       *ABS*	00000000 __bss_start
000127d9 g     O .bss	00000004 R6_ALC_CONTROL_REGISTERS_IC_1_Default
00001a70 g     F .text	00000128 memset
00001850 g     F .text	00000220 main
0000eb3c g     F .text	00000008 alt_avalon_dma_rx_ioctl
00012772 g     O .rwdata	00000001 R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default
00012834 g     O .bss	00000004 alt_envp
00012824 g     O .bss	00000004 __malloc_max_total_mem
00011430 g     O .rwdata	0000009c uart_0
0000ed7c g     F .text	00000008 altera_avalon_fifo_read_level
0000aec4 g     F .text	00000018 __swbuf
00012760 g     O .rwdata	00000002 R4_DELAY_IC_1_Default
00000c54 g     F .text	00000048 read_status_register
00009064 g     F .text	00000008 __sclose
01fff000 g       *ABS*	00000000 __alt_heap_limit
0000a9f8 g     F .text	00000014 fclose
00004394 g     F .text	00001688 _dtoa_r
00006d74 g     F .text	0000080c _malloc_r
0000b038 g     F .text	00000030 __ascii_wctomb
000127b8 g     O .rwdata	00000004 alt_errno
0000fa60 g     F .text	00000054 alt_onchip_flash_poll_for_status_to_go_idle
03000000 g       *ABS*	00000000 __alt_mem_intel_generic_serial_flash_interface_top_0_avl_mem
0001276c g     O .rwdata	00000003 R9_ADC_CONTROL_REGISTERS_IC_1_Default
00006954 g     F .text	000000c4 _fwalk
00000f54 g     F .text	00000050 clear_status_register
0000bb74 g     F .text	00000084 .hidden __divsi3
00006064 g     F .text	00000124 _malloc_trim_r
0000f82c g     F .text	00000234 altera_onchip_flash_init
00012840 g     O .bss	00000004 alt_vic_dev_list
0000906c g     F .text	000000dc strcmp
00010a7c g     O .rwdata	00000010 pwm_counter
0000cebc g     F .text	00000088 .hidden __nedf2
0000e69c g     F .text	0000002c alt_irq_init
00000ebc g     F .text	00000048 read_config_register
00012784 g     O .rwdata	00000002 R32_CLOCK_ENABLE_REGISTERS_IC_1_Default
000106a0 g     O .rodata	00000100 .hidden __clz_tab
00012818 g     O .bss	00000004 _PathLocale
0000a790 g     F .text	00000060 _write_r
00006b94 g     F .text	00000018 setlocale
00012773 g     O .rwdata	00000002 R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default
00012794 g     O .rwdata	00000004 _impure_ptr
0001283c g     O .bss	00000004 alt_argc
00005a1c g     F .text	0000021c __sflush_r
00006b80 g     F .text	00000008 __locale_cjk_lang
00001048 g     F .text	00000054 read_memory_3byte
00012783 g     O .rwdata	00000001 R26_SAMPLE_RATE_SETTING_IC_1_Default
000016f0 g     F .text	000000d8 initDMA
0000fea8 g     F .text	000000b0 alt_vic_irq_init
0000842c g     F .text	00000064 __ulp
0000604c g     F .text	00000018 __fp_unlock_all
0000fc58 g     F .text	000001b4 alt_onchip_flash_write_block
00006bac g     F .text	0000000c localeconv
00012776 g     O .rwdata	00000001 R21_DSP_ENABLE_REGISTER_IC_1_Default
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0000109c g     F .text	00000054 cypress_four_byte_fast_read
000127e0 g     O .bss	00000004 R23_GPIO_REGISTERS_IC_1_Default
0000eeec g     F .text	0000001c altera_avalon_fifo_write_other_info
0000ff58 g     F .text	00000078 alt_ic_isr_register
000127d8 g       *ABS*	00000000 _edata
0000f6a8 g     F .text	00000184 alt_onchip_flash_write
00015c78 g       *ABS*	00000000 _end
00010170 g     F .text	00000050 alt_flash_open_dev
0000aa0c g     F .text	00000164 __fputwc
0001277e g     O .rwdata	00000005 R25_WATCHDOG_REGISTERS_IC_1_Default
00000fa4 g     F .text	00000050 erase_sector_cypress
00008f8c g     F .text	0000007c __swrite
000127a0 g     O .rwdata	00000004 __malloc_trim_threshold
00006b74 g     F .text	0000000c __locale_msgcharset
00006a18 g     F .text	000000c4 _fwalk_reent
00008230 g     F .text	000001fc __mdiff
000101c0 g     F .text	00000014 alt_flash_close_dev
0000bbf8 g     F .text	00000074 .hidden __modsi3
0000ed54 g     F .text	0000000c altera_avalon_fifo_read_ienable
01fff000 g       *ABS*	00000000 __alt_data_end
00006028 g     F .text	00000004 __sfp_lock_release
00000d34 g     F .text	00000050 enter_4byte_addressing_mode
000127f8 g     O .bss	00000004 rx_done1
0000f5d0 g     F .text	00000024 altera_avalon_uart_close
04100000 g       .entry	00000000 _exit
0000ffd0 g     F .text	00000094 alt_alarm_start
00012759 g     O .rwdata	00000001 R2_CLKCTRLREGISTER_IC_1_Default
0000ed60 g     F .text	00000008 altera_avalon_fifo_read_almostfull
00006bb8 g     F .text	000001bc __smakebuf_r
00001cd8 g     F .text	00000098 strlen
00001200 g     F .text	00000050 write_register_for_sector_unprotect_cypress
0000eea8 g     F .text	00000028 altera_avalon_read_fifo
0000cf44 g     F .text	000000dc .hidden __gedf2
000127a4 g     O .rwdata	00000004 __wctomb
00009244 g     F .text	00000018 __sprint_r
000000b4 g     F .text	00000080 i2c_setup
00012804 g     O .bss	00000004 pwm_interval1
00003f68 g     F .text	0000001c __vfprintf_internal
00012814 g     O .bss	00000004 txchan
0000b068 g     F .text	0000005c _wctomb_r
0000eb44 g     F .text	000000a8 alt_avalon_dma_prepare
00000878 g     F .text	00000340 default_download_IC_1
0000d82c g     F .text	000008fc .hidden __subdf3
000127a8 g     O .rwdata	00000008 alt_dma_rxchan_list
00007c64 g     F .text	000000b0 __lo0bits
0000edd8 g     F .text	0000001c altera_avalon_fifo_write_almostempty
000127d0 g     O .rwdata	00000008 alt_alarm_list
00000bb8 g     F .text	00000054 msleep
0000af78 g     F .text	000000c0 wcrtomb
00012758 g     O .rwdata	00000001 R0_SAMPLE_RATE_SETTING_IC_1_Default
0000e390 g     F .text	00000040 close
0000eb34 g     F .text	00000008 alt_avalon_dma_tx_ioctl
0000ab94 g     F .text	00000080 fputwc
000001dc g     F .text	000000b0 i2c_write_byte
0000602c g     F .text	00000004 __sinit_lock_acquire
000127e8 g     O .bss	00000001 R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default
000079d8 g     F .text	00000120 __multadd
000079b0 g     F .text	00000028 _Bfree
00012787 g     O .rwdata	00000001 R36_DSP_RUN_REGISTER_IC_1_Default



Disassembly of section .text:

00000020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
      20:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
      24:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
      28:	10000426 	beq	r2,zero,3c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
      2c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
      30:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
      34:	ef400f14 	ori	ea,ea,60
    eret
      38:	ef80083a 	eret

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
      3c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
      40:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
      44:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
      48:	00bffd16 	blt	zero,r2,40 <__reset+0xfbf00040>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      4c:	06c07ff4 	movhi	sp,511
    ori sp, sp, %lo(__alt_stack_pointer)
      50:	defc0014 	ori	sp,sp,61440
    movhi gp, %hi(_gp)
      54:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
      58:	d6a9d614 	ori	gp,gp,42840
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
      5c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
      60:	00c001d4 	movui	r3,7
    movhi r4, 1     /* Constant to increment STATUS.PRS */
      64:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
      68:	1105883a 	add	r2,r2,r4
    wrctl status, r2
      6c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
      70:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
      74:	d034a03a 	wrprs	gp,gp
     * Only write the SP in previous register set
     * if using the separate exception stack. For normal case (single stack),
     * funnel code would read the SP from previous register set with a RDPRS.
     */
#ifdef ALT_INTERRUPT_STACK
    movhi et, %hiadj(__alt_interrupt_stack_pointer)
      78:	06008034 	movhi	et,512
    addi  et, et, %lo(__alt_interrupt_stack_pointer)
      7c:	c6000004 	addi	et,et,0
    wrprs sp, et
      80:	c036a03a 	wrprs	sp,et
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
      84:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
      88:	183ff71e 	bne	r3,zero,68 <__reset+0xfbf00068>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      8c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
      90:	1089f614 	ori	r2,r2,10200

    movhi r3, %hi(__bss_end)
      94:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
      98:	18d71e14 	ori	r3,r3,23672

    beq r2, r3, 1f
      9c:	10c00326 	beq	r2,r3,ac <_start+0x8c>

0:
    stw zero, (r2)
      a0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      a4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      a8:	10fffd36 	bltu	r2,r3,a0 <__reset+0xfbf000a0>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      ac:	000e5480 	call	e548 <alt_main>

000000b0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      b0:	003fff06 	br	b0 <__reset+0xfbf000b0>

000000b4 <i2c_setup>:
#include "SigmaStudioFW.h"

uint8_t i2c_write_data[5120 + 2] = {0x00};

void i2c_setup(uint8_t per_h_reg, uint8_t per_l_reg)
{
      b4:	defffd04 	addi	sp,sp,-12
      b8:	df000215 	stw	fp,8(sp)
      bc:	df000204 	addi	fp,sp,8
      c0:	2007883a 	mov	r3,r4
      c4:	2805883a 	mov	r2,r5
      c8:	e0fffe05 	stb	r3,-8(fp)
      cc:	e0bfff05 	stb	r2,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_CTR, 0x00);
	IOWR(I2C_BASEADDR, I2C_CTR, 0x00);
      d0:	0007883a 	mov	r3,zero
      d4:	00810834 	movhi	r2,1056
      d8:	10841204 	addi	r2,r2,4168
      dc:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR, 0x01);
      e0:	00c00044 	movi	r3,1
      e4:	00810834 	movhi	r2,1056
      e8:	10841404 	addi	r2,r2,4176
      ec:	10c00035 	stwio	r3,0(r2)

	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_PRERL, per_l_reg);
	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_PRERH, per_h_reg);
	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_CTR,   0x80);

	IOWR(I2C_BASEADDR, I2C_PRERL, per_l_reg);
      f0:	e0ffff03 	ldbu	r3,-4(fp)
      f4:	00810834 	movhi	r2,1056
      f8:	10841004 	addi	r2,r2,4160
      fc:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_PRERH, per_h_reg);
     100:	e0fffe03 	ldbu	r3,-8(fp)
     104:	00810834 	movhi	r2,1056
     108:	10841104 	addi	r2,r2,4164
     10c:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CTR,   0x80);
     110:	00c02004 	movi	r3,128
     114:	00810834 	movhi	r2,1056
     118:	10841204 	addi	r2,r2,4168
     11c:	10c00035 	stwio	r3,0(r2)
}
     120:	0001883a 	nop
     124:	e037883a 	mov	sp,fp
     128:	df000017 	ldw	fp,0(sp)
     12c:	dec00104 	addi	sp,sp,4
     130:	f800283a 	ret

00000134 <i2c_start>:

bool i2c_start(uint8_t devAddress, uint8_t rw)
{
     134:	defffc04 	addi	sp,sp,-16
     138:	dfc00315 	stw	ra,12(sp)
     13c:	df000215 	stw	fp,8(sp)
     140:	df000204 	addi	fp,sp,8
     144:	2007883a 	mov	r3,r4
     148:	2805883a 	mov	r2,r5
     14c:	e0fffe05 	stb	r3,-8(fp)
     150:	e0bfff05 	stb	r2,-4(fp)
	IOWR(I2C_BASEADDR, I2C_TXR, (devAddress << 0) + (rw & 0x01));
     154:	e0fffe03 	ldbu	r3,-8(fp)
     158:	e0bfff03 	ldbu	r2,-4(fp)
     15c:	1080004c 	andi	r2,r2,1
     160:	1887883a 	add	r3,r3,r2
     164:	00810834 	movhi	r2,1056
     168:	10841304 	addi	r2,r2,4172
     16c:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR, 0x90);
     170:	00c02404 	movi	r3,144
     174:	00810834 	movhi	r2,1056
     178:	10841404 	addi	r2,r2,4176
     17c:	10c00035 	stwio	r3,0(r2)

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
     180:	00000206 	br	18c <i2c_start+0x58>
	{
		usleep(10);
     184:	01000284 	movi	r4,10
     188:	000e6380 	call	e638 <usleep>
bool i2c_start(uint8_t devAddress, uint8_t rw)
{
	IOWR(I2C_BASEADDR, I2C_TXR, (devAddress << 0) + (rw & 0x01));
	IOWR(I2C_BASEADDR, I2C_CR, 0x90);

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
     18c:	00810834 	movhi	r2,1056
     190:	10841404 	addi	r2,r2,4176
     194:	10800037 	ldwio	r2,0(r2)
     198:	1080008c 	andi	r2,r2,2
     19c:	103ff91e 	bne	r2,zero,184 <__reset+0xfbf00184>
	{
		usleep(10);
	}

	usleep(10);
     1a0:	01000284 	movi	r4,10
     1a4:	000e6380 	call	e638 <usleep>

	if (IORD(I2C_BASEADDR, I2C_SR) & 0x80)
     1a8:	00810834 	movhi	r2,1056
     1ac:	10841404 	addi	r2,r2,4176
     1b0:	10800037 	ldwio	r2,0(r2)
     1b4:	1080200c 	andi	r2,r2,128
     1b8:	10000226 	beq	r2,zero,1c4 <i2c_start+0x90>
	{
		return false;
     1bc:	0005883a 	mov	r2,zero
     1c0:	00000106 	br	1c8 <i2c_start+0x94>
	}
	else
	{
		return true;
     1c4:	00800044 	movi	r2,1
	}
}
     1c8:	e037883a 	mov	sp,fp
     1cc:	dfc00117 	ldw	ra,4(sp)
     1d0:	df000017 	ldw	fp,0(sp)
     1d4:	dec00204 	addi	sp,sp,8
     1d8:	f800283a 	ret

000001dc <i2c_write_byte>:

bool i2c_write_byte(uint8_t data)
{
     1dc:	defffd04 	addi	sp,sp,-12
     1e0:	dfc00215 	stw	ra,8(sp)
     1e4:	df000115 	stw	fp,4(sp)
     1e8:	df000104 	addi	fp,sp,4
     1ec:	2005883a 	mov	r2,r4
     1f0:	e0bfff05 	stb	r2,-4(fp)
	IOWR(I2C_BASEADDR, I2C_TXR, data);
     1f4:	e0ffff03 	ldbu	r3,-4(fp)
     1f8:	00810834 	movhi	r2,1056
     1fc:	10841304 	addi	r2,r2,4172
     200:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR,  0x10); //wr
     204:	00c00404 	movi	r3,16
     208:	00810834 	movhi	r2,1056
     20c:	10841404 	addi	r2,r2,4176
     210:	10c00035 	stwio	r3,0(r2)

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
     214:	00000206 	br	220 <i2c_write_byte+0x44>
	{
		usleep(10);
     218:	01000284 	movi	r4,10
     21c:	000e6380 	call	e638 <usleep>
bool i2c_write_byte(uint8_t data)
{
	IOWR(I2C_BASEADDR, I2C_TXR, data);
	IOWR(I2C_BASEADDR, I2C_CR,  0x10); //wr

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
     220:	00810834 	movhi	r2,1056
     224:	10841404 	addi	r2,r2,4176
     228:	10800037 	ldwio	r2,0(r2)
     22c:	1080008c 	andi	r2,r2,2
     230:	103ff91e 	bne	r2,zero,218 <__reset+0xfbf00218>
	{
		usleep(10);
	}

	usleep(10);
     234:	01000284 	movi	r4,10
     238:	000e6380 	call	e638 <usleep>

	if (IORD(I2C_BASEADDR, I2C_SR) & 0x80)
     23c:	00810834 	movhi	r2,1056
     240:	10841404 	addi	r2,r2,4176
     244:	10800037 	ldwio	r2,0(r2)
     248:	1080200c 	andi	r2,r2,128
     24c:	10000926 	beq	r2,zero,274 <i2c_write_byte+0x98>
	{
		printf("I2C_SR %d\n", IORD(I2C_BASEADDR, I2C_SR));
     250:	00810834 	movhi	r2,1056
     254:	10841404 	addi	r2,r2,4176
     258:	10800037 	ldwio	r2,0(r2)
     25c:	100b883a 	mov	r5,r2
     260:	01000074 	movhi	r4,1
     264:	2100d304 	addi	r4,r4,844
     268:	0001bc80 	call	1bc8 <printf>
		return false;
     26c:	0005883a 	mov	r2,zero
     270:	00000106 	br	278 <i2c_write_byte+0x9c>
	}
	else
	{
		return true;
     274:	00800044 	movi	r2,1
	}
}
     278:	e037883a 	mov	sp,fp
     27c:	dfc00117 	ldw	ra,4(sp)
     280:	df000017 	ldw	fp,0(sp)
     284:	dec00204 	addi	sp,sp,8
     288:	f800283a 	ret

0000028c <i2c_write_byte_stop>:

bool i2c_write_byte_stop(uint8_t data)
{
     28c:	defffd04 	addi	sp,sp,-12
     290:	dfc00215 	stw	ra,8(sp)
     294:	df000115 	stw	fp,4(sp)
     298:	df000104 	addi	fp,sp,4
     29c:	2005883a 	mov	r2,r4
     2a0:	e0bfff05 	stb	r2,-4(fp)
	IOWR(I2C_BASEADDR, I2C_TXR, data);
     2a4:	e0ffff03 	ldbu	r3,-4(fp)
     2a8:	00810834 	movhi	r2,1056
     2ac:	10841304 	addi	r2,r2,4172
     2b0:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR, 0x50); //stop
     2b4:	00c01404 	movi	r3,80
     2b8:	00810834 	movhi	r2,1056
     2bc:	10841404 	addi	r2,r2,4176
     2c0:	10c00035 	stwio	r3,0(r2)

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
     2c4:	00000206 	br	2d0 <i2c_write_byte_stop+0x44>
	{
		usleep(10);
     2c8:	01000284 	movi	r4,10
     2cc:	000e6380 	call	e638 <usleep>
bool i2c_write_byte_stop(uint8_t data)
{
	IOWR(I2C_BASEADDR, I2C_TXR, data);
	IOWR(I2C_BASEADDR, I2C_CR, 0x50); //stop

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
     2d0:	00810834 	movhi	r2,1056
     2d4:	10841404 	addi	r2,r2,4176
     2d8:	10800037 	ldwio	r2,0(r2)
     2dc:	1080008c 	andi	r2,r2,2
     2e0:	103ff91e 	bne	r2,zero,2c8 <__reset+0xfbf002c8>
	{
		usleep(10);
	}

	usleep(10);
     2e4:	01000284 	movi	r4,10
     2e8:	000e6380 	call	e638 <usleep>

	if (IORD(I2C_BASEADDR, I2C_SR) & 0x80)
     2ec:	00810834 	movhi	r2,1056
     2f0:	10841404 	addi	r2,r2,4176
     2f4:	10800037 	ldwio	r2,0(r2)
     2f8:	1080200c 	andi	r2,r2,128
     2fc:	10000226 	beq	r2,zero,308 <i2c_write_byte_stop+0x7c>
	{
		return false;
     300:	0005883a 	mov	r2,zero
     304:	00000106 	br	30c <i2c_write_byte_stop+0x80>
	}
	else
	{
		return true;
     308:	00800044 	movi	r2,1
	}
}
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <i2c_multiple_write>:

bool i2c_multiple_write(uint8_t devAddress, uint16_t controlAddress, uint8_t data[], uint16_t len)
{
     320:	defff904 	addi	sp,sp,-28
     324:	dfc00615 	stw	ra,24(sp)
     328:	df000515 	stw	fp,20(sp)
     32c:	df000504 	addi	fp,sp,20
     330:	2807883a 	mov	r3,r5
     334:	e1bffe15 	stw	r6,-8(fp)
     338:	3805883a 	mov	r2,r7
     33c:	e13ffc05 	stb	r4,-16(fp)
     340:	e0fffd0d 	sth	r3,-12(fp)
     344:	e0bfff0d 	sth	r2,-4(fp)
	if (!i2c_start(devAddress, 0x00))
     348:	e0bffc03 	ldbu	r2,-16(fp)
     34c:	000b883a 	mov	r5,zero
     350:	1009883a 	mov	r4,r2
     354:	00001340 	call	134 <i2c_start>
     358:	1080005c 	xori	r2,r2,1
     35c:	10803fcc 	andi	r2,r2,255
     360:	10000526 	beq	r2,zero,378 <i2c_multiple_write+0x58>
	{
		printf("I2C start failed.\n");
     364:	01000074 	movhi	r4,1
     368:	2100d604 	addi	r4,r4,856
     36c:	0001cc40 	call	1cc4 <puts>
		return false;
     370:	0005883a 	mov	r2,zero
     374:	00004b06 	br	4a4 <i2c_multiple_write+0x184>
	}

	usleep(100);
     378:	01001904 	movi	r4,100
     37c:	000e6380 	call	e638 <usleep>

	if (!i2c_write_byte((controlAddress >> 8) & 0xFF))
     380:	e0bffd0b 	ldhu	r2,-12(fp)
     384:	1004d23a 	srli	r2,r2,8
     388:	10803fcc 	andi	r2,r2,255
     38c:	1009883a 	mov	r4,r2
     390:	00001dc0 	call	1dc <i2c_write_byte>
     394:	1080005c 	xori	r2,r2,1
     398:	10803fcc 	andi	r2,r2,255
     39c:	10000326 	beq	r2,zero,3ac <i2c_multiple_write+0x8c>
	{
		printf("I2C caddrH write failed.\n");
     3a0:	01000074 	movhi	r4,1
     3a4:	2100db04 	addi	r4,r4,876
     3a8:	0001cc40 	call	1cc4 <puts>
		//return false;
	}

	usleep(100);
     3ac:	01001904 	movi	r4,100
     3b0:	000e6380 	call	e638 <usleep>

	if (!i2c_write_byte(controlAddress & 0xFF))
     3b4:	e0bffd0b 	ldhu	r2,-12(fp)
     3b8:	10803fcc 	andi	r2,r2,255
     3bc:	1009883a 	mov	r4,r2
     3c0:	00001dc0 	call	1dc <i2c_write_byte>
     3c4:	1080005c 	xori	r2,r2,1
     3c8:	10803fcc 	andi	r2,r2,255
     3cc:	10000526 	beq	r2,zero,3e4 <i2c_multiple_write+0xc4>
	{
		printf("I2C caddrL write failed.\n");
     3d0:	01000074 	movhi	r4,1
     3d4:	2100e204 	addi	r4,r4,904
     3d8:	0001cc40 	call	1cc4 <puts>
		return false;
     3dc:	0005883a 	mov	r2,zero
     3e0:	00003006 	br	4a4 <i2c_multiple_write+0x184>
	}

	usleep(100);
     3e4:	01001904 	movi	r4,100
     3e8:	000e6380 	call	e638 <usleep>

	for (int i = 0; i < len; i++)
     3ec:	e03ffb15 	stw	zero,-20(fp)
     3f0:	00002806 	br	494 <i2c_multiple_write+0x174>
	{
		if (i == len - 1)
     3f4:	e0bfff0b 	ldhu	r2,-4(fp)
     3f8:	10ffffc4 	addi	r3,r2,-1
     3fc:	e0bffb17 	ldw	r2,-20(fp)
     400:	18800f1e 	bne	r3,r2,440 <i2c_multiple_write+0x120>
		{
			if (!i2c_write_byte_stop(data[i]))
     404:	e0bffb17 	ldw	r2,-20(fp)
     408:	e0fffe17 	ldw	r3,-8(fp)
     40c:	1885883a 	add	r2,r3,r2
     410:	10800003 	ldbu	r2,0(r2)
     414:	10803fcc 	andi	r2,r2,255
     418:	1009883a 	mov	r4,r2
     41c:	000028c0 	call	28c <i2c_write_byte_stop>
     420:	1080005c 	xori	r2,r2,1
     424:	10803fcc 	andi	r2,r2,255
     428:	10001526 	beq	r2,zero,480 <i2c_multiple_write+0x160>
			{
				printf("I2C stop failed.\n");
     42c:	01000074 	movhi	r4,1
     430:	2100e904 	addi	r4,r4,932
     434:	0001cc40 	call	1cc4 <puts>
				return false;
     438:	0005883a 	mov	r2,zero
     43c:	00001906 	br	4a4 <i2c_multiple_write+0x184>
			}
		}
		else
		{
			if (!i2c_write_byte(data[i]))
     440:	e0bffb17 	ldw	r2,-20(fp)
     444:	e0fffe17 	ldw	r3,-8(fp)
     448:	1885883a 	add	r2,r3,r2
     44c:	10800003 	ldbu	r2,0(r2)
     450:	10803fcc 	andi	r2,r2,255
     454:	1009883a 	mov	r4,r2
     458:	00001dc0 	call	1dc <i2c_write_byte>
     45c:	1080005c 	xori	r2,r2,1
     460:	10803fcc 	andi	r2,r2,255
     464:	10000626 	beq	r2,zero,480 <i2c_multiple_write+0x160>
			{
				printf("I2C data[%d] write failed.\n", i);
     468:	e17ffb17 	ldw	r5,-20(fp)
     46c:	01000074 	movhi	r4,1
     470:	2100ee04 	addi	r4,r4,952
     474:	0001bc80 	call	1bc8 <printf>
				return false;
     478:	0005883a 	mov	r2,zero
     47c:	00000906 	br	4a4 <i2c_multiple_write+0x184>
			}
		}

		usleep(100);
     480:	01001904 	movi	r4,100
     484:	000e6380 	call	e638 <usleep>
		return false;
	}

	usleep(100);

	for (int i = 0; i < len; i++)
     488:	e0bffb17 	ldw	r2,-20(fp)
     48c:	10800044 	addi	r2,r2,1
     490:	e0bffb15 	stw	r2,-20(fp)
     494:	e0bfff0b 	ldhu	r2,-4(fp)
     498:	e0fffb17 	ldw	r3,-20(fp)
     49c:	18bfd516 	blt	r3,r2,3f4 <__reset+0xfbf003f4>
		}

		usleep(100);
	}

	return true;
     4a0:	00800044 	movi	r2,1
}
     4a4:	e037883a 	mov	sp,fp
     4a8:	dfc00117 	ldw	ra,4(sp)
     4ac:	df000017 	ldw	fp,0(sp)
     4b0:	dec00204 	addi	sp,sp,8
     4b4:	f800283a 	ret

000004b8 <SIGMA_WRITE_REGISTER_BLOCK>:

bool SIGMA_WRITE_REGISTER_BLOCK(uint8_t devAddress, uint16_t address, uint16_t length, ADI_REG_TYPE *pData)
{
     4b8:	defff904 	addi	sp,sp,-28
     4bc:	dfc00615 	stw	ra,24(sp)
     4c0:	df000515 	stw	fp,20(sp)
     4c4:	df000504 	addi	fp,sp,20
     4c8:	2807883a 	mov	r3,r5
     4cc:	3005883a 	mov	r2,r6
     4d0:	e1ffff15 	stw	r7,-4(fp)
     4d4:	e13ffc05 	stb	r4,-16(fp)
     4d8:	e0fffd0d 	sth	r3,-12(fp)
     4dc:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, pData, length);
  ret = i2c_multiple_write(devAddress, address, pData, length);
     4e0:	e0bffc03 	ldbu	r2,-16(fp)
     4e4:	e0fffd0b 	ldhu	r3,-12(fp)
     4e8:	e13ffe0b 	ldhu	r4,-8(fp)
     4ec:	200f883a 	mov	r7,r4
     4f0:	e1bfff17 	ldw	r6,-4(fp)
     4f4:	180b883a 	mov	r5,r3
     4f8:	1009883a 	mov	r4,r2
     4fc:	00003200 	call	320 <i2c_multiple_write>
     500:	e0bffb05 	stb	r2,-20(fp)

  usleep(1000);
     504:	0100fa04 	movi	r4,1000
     508:	000e6380 	call	e638 <usleep>

  //if (ret != i2cTransferDone)
  if (!ret)
     50c:	e0bffb03 	ldbu	r2,-20(fp)
     510:	1080005c 	xori	r2,r2,1
     514:	10803fcc 	andi	r2,r2,255
     518:	10000226 	beq	r2,zero,524 <SIGMA_WRITE_REGISTER_BLOCK+0x6c>
  {
    //return((uint32_t) ret);
	  return false;
     51c:	0005883a 	mov	r2,zero
     520:	00000106 	br	528 <SIGMA_WRITE_REGISTER_BLOCK+0x70>
  }

  //return((uint32_t) 0);
  return true;
     524:	00800044 	movi	r2,1
}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <SIGMA_WRITE_REGISTER_CONTROL>:

bool SIGMA_WRITE_REGISTER_CONTROL(uint8_t devAddress, uint16_t address, uint16_t length, ADI_REG_U8 *pData)
{
     53c:	defff904 	addi	sp,sp,-28
     540:	dfc00615 	stw	ra,24(sp)
     544:	df000515 	stw	fp,20(sp)
     548:	df000504 	addi	fp,sp,20
     54c:	2807883a 	mov	r3,r5
     550:	3005883a 	mov	r2,r6
     554:	e1ffff15 	stw	r7,-4(fp)
     558:	e13ffc05 	stb	r4,-16(fp)
     55c:	e0fffd0d 	sth	r3,-12(fp)
     560:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, pData, length);
  ret = i2c_multiple_write(devAddress, address, pData, length);
     564:	e0bffc03 	ldbu	r2,-16(fp)
     568:	e0fffd0b 	ldhu	r3,-12(fp)
     56c:	e13ffe0b 	ldhu	r4,-8(fp)
     570:	200f883a 	mov	r7,r4
     574:	e1bfff17 	ldw	r6,-4(fp)
     578:	180b883a 	mov	r5,r3
     57c:	1009883a 	mov	r4,r2
     580:	00003200 	call	320 <i2c_multiple_write>
     584:	e0bffb05 	stb	r2,-20(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
     588:	e0bffb03 	ldbu	r2,-20(fp)
     58c:	1080005c 	xori	r2,r2,1
     590:	10803fcc 	andi	r2,r2,255
     594:	10000226 	beq	r2,zero,5a0 <SIGMA_WRITE_REGISTER_CONTROL+0x64>
  {
    //return((uint32_t) ret);
	  return false;
     598:	0005883a 	mov	r2,zero
     59c:	00000106 	br	5a4 <SIGMA_WRITE_REGISTER_CONTROL+0x68>
  }

  //free(i2c_write_data);

  //return((uint32_t) 0);
  return true;
     5a0:	00800044 	movi	r2,1
}
     5a4:	e037883a 	mov	sp,fp
     5a8:	dfc00117 	ldw	ra,4(sp)
     5ac:	df000017 	ldw	fp,0(sp)
     5b0:	dec00204 	addi	sp,sp,8
     5b4:	f800283a 	ret

000005b8 <SIGMA_SAFELOAD_WRITE_ADDR>:

bool SIGMA_SAFELOAD_WRITE_ADDR(uint8_t devAddress, uint16_t addrAddress, uint16_t address)
{
     5b8:	defffa04 	addi	sp,sp,-24
     5bc:	dfc00515 	stw	ra,20(sp)
     5c0:	df000415 	stw	fp,16(sp)
     5c4:	df000404 	addi	fp,sp,16
     5c8:	2807883a 	mov	r3,r5
     5cc:	3005883a 	mov	r2,r6
     5d0:	e13ffd05 	stb	r4,-12(fp)
     5d4:	e0fffe0d 	sth	r3,-8(fp)
     5d8:	e0bfff0d 	sth	r2,-4(fp)
  seq.buf[1].len  = 0;

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  wdata[0] = (address >> 8) & 0x00FF;
     5dc:	e0bfff0b 	ldhu	r2,-4(fp)
     5e0:	1004d23a 	srli	r2,r2,8
     5e4:	e0bffc45 	stb	r2,-15(fp)
  wdata[1] = address & 0x00FF;
     5e8:	e0bfff0b 	ldhu	r2,-4(fp)
     5ec:	e0bffc85 	stb	r2,-14(fp)
  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, wdata, 2);
  ret = i2c_multiple_write(devAddress, address, wdata, 2);
     5f0:	e0bffd03 	ldbu	r2,-12(fp)
     5f4:	e0ffff0b 	ldhu	r3,-4(fp)
     5f8:	e13ffc44 	addi	r4,fp,-15
     5fc:	01c00084 	movi	r7,2
     600:	200d883a 	mov	r6,r4
     604:	180b883a 	mov	r5,r3
     608:	1009883a 	mov	r4,r2
     60c:	00003200 	call	320 <i2c_multiple_write>
     610:	e0bffc05 	stb	r2,-16(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
     614:	e0bffc03 	ldbu	r2,-16(fp)
     618:	1080005c 	xori	r2,r2,1
     61c:	10803fcc 	andi	r2,r2,255
     620:	10000226 	beq	r2,zero,62c <SIGMA_SAFELOAD_WRITE_ADDR+0x74>
  {
    //return((uint32_t) ret);
	  return false;
     624:	0005883a 	mov	r2,zero
     628:	00000106 	br	630 <SIGMA_SAFELOAD_WRITE_ADDR+0x78>
  }

  //return((uint32_t) 0);
  return true;
     62c:	00800044 	movi	r2,1
}
     630:	e037883a 	mov	sp,fp
     634:	dfc00117 	ldw	ra,4(sp)
     638:	df000017 	ldw	fp,0(sp)
     63c:	dec00204 	addi	sp,sp,8
     640:	f800283a 	ret

00000644 <SIGMA_SAFELOAD_WRITE_DATA>:

bool SIGMA_SAFELOAD_WRITE_DATA(uint8_t devAddress, uint16_t dataAddress, uint16_t length, ADI_REG_U8 *pData)
{
     644:	defff404 	addi	sp,sp,-48
     648:	dfc00b15 	stw	ra,44(sp)
     64c:	df000a15 	stw	fp,40(sp)
     650:	df000a04 	addi	fp,sp,40
     654:	2807883a 	mov	r3,r5
     658:	3005883a 	mov	r2,r6
     65c:	e1ffff15 	stw	r7,-4(fp)
     660:	e13ffc05 	stb	r4,-16(fp)
     664:	e0fffd0d 	sth	r3,-12(fp)
     668:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint8_t wdata[16] = {0};
     66c:	e0bff744 	addi	r2,fp,-35
     670:	00c00404 	movi	r3,16
     674:	180d883a 	mov	r6,r3
     678:	000b883a 	mov	r5,zero
     67c:	1009883a 	mov	r4,r2
     680:	0001a700 	call	1a70 <memset>
  for (int i = 0; i < length; i++)
     684:	e03ff615 	stw	zero,-40(fp)
     688:	00000c06 	br	6bc <SIGMA_SAFELOAD_WRITE_DATA+0x78>
  {
	  wdata[i + 1] = pData[i];
     68c:	e0bff617 	ldw	r2,-40(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0fff617 	ldw	r3,-40(fp)
     698:	e13fff17 	ldw	r4,-4(fp)
     69c:	20c7883a 	add	r3,r4,r3
     6a0:	18c00003 	ldbu	r3,0(r3)
     6a4:	e13ff744 	addi	r4,fp,-35
     6a8:	2085883a 	add	r2,r4,r2
     6ac:	10c00005 	stb	r3,0(r2)
  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint8_t wdata[16] = {0};
  for (int i = 0; i < length; i++)
     6b0:	e0bff617 	ldw	r2,-40(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bff615 	stw	r2,-40(fp)
     6bc:	e0bffe0b 	ldhu	r2,-8(fp)
     6c0:	e0fff617 	ldw	r3,-40(fp)
     6c4:	18bff116 	blt	r3,r2,68c <__reset+0xfbf0068c>
  {
	  wdata[i + 1] = pData[i];
  }

  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, dataAddress, wdata, length + 1);
  ret = i2c_multiple_write(devAddress, dataAddress, wdata, length + 1);
     6c8:	e0fffc03 	ldbu	r3,-16(fp)
     6cc:	e13ffd0b 	ldhu	r4,-12(fp)
     6d0:	e0bffe0b 	ldhu	r2,-8(fp)
     6d4:	10800044 	addi	r2,r2,1
     6d8:	117fffcc 	andi	r5,r2,65535
     6dc:	e0bff744 	addi	r2,fp,-35
     6e0:	280f883a 	mov	r7,r5
     6e4:	100d883a 	mov	r6,r2
     6e8:	200b883a 	mov	r5,r4
     6ec:	1809883a 	mov	r4,r3
     6f0:	00003200 	call	320 <i2c_multiple_write>
     6f4:	e0bff705 	stb	r2,-36(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
     6f8:	e0bff703 	ldbu	r2,-36(fp)
     6fc:	1080005c 	xori	r2,r2,1
     700:	10803fcc 	andi	r2,r2,255
     704:	10000226 	beq	r2,zero,710 <SIGMA_SAFELOAD_WRITE_DATA+0xcc>
  {
    //return((uint32_t) ret);
	  return false;
     708:	0005883a 	mov	r2,zero
     70c:	00000106 	br	714 <SIGMA_SAFELOAD_WRITE_DATA+0xd0>
  }

  //return((uint32_t) 0);
  return true;
     710:	00800044 	movi	r2,1
}
     714:	e037883a 	mov	sp,fp
     718:	dfc00117 	ldw	ra,4(sp)
     71c:	df000017 	ldw	fp,0(sp)
     720:	dec00204 	addi	sp,sp,8
     724:	f800283a 	ret

00000728 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT>:

bool SIGMA_SAFELOAD_WRITE_TRANSFER_BIT(uint8_t devAddress)
{
     728:	defffb04 	addi	sp,sp,-20
     72c:	dfc00415 	stw	ra,16(sp)
     730:	df000315 	stw	fp,12(sp)
     734:	df000304 	addi	fp,sp,12
     738:	2005883a 	mov	r2,r4
     73c:	e0bfff05 	stb	r2,-4(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint16_t address = 0x081C;
     740:	00820704 	movi	r2,2076
     744:	e0bffd0d 	sth	r2,-12(fp)
  uint8_t wdata[2] = {0x00, 0x3C};
     748:	e03ffdc5 	stb	zero,-9(fp)
     74c:	00800f04 	movi	r2,60
     750:	e0bffe05 	stb	r2,-8(fp)
  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, wdata, 2);
  ret = i2c_multiple_write(devAddress, address, wdata, 2);
     754:	e0bfff03 	ldbu	r2,-4(fp)
     758:	e0fffd0b 	ldhu	r3,-12(fp)
     75c:	e13ffdc4 	addi	r4,fp,-9
     760:	01c00084 	movi	r7,2
     764:	200d883a 	mov	r6,r4
     768:	180b883a 	mov	r5,r3
     76c:	1009883a 	mov	r4,r2
     770:	00003200 	call	320 <i2c_multiple_write>
     774:	e0bffd85 	stb	r2,-10(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
     778:	e0bffd83 	ldbu	r2,-10(fp)
     77c:	1080005c 	xori	r2,r2,1
     780:	10803fcc 	andi	r2,r2,255
     784:	10000226 	beq	r2,zero,790 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT+0x68>
  {
    //return((uint32_t) ret);
	  return false;
     788:	0005883a 	mov	r2,zero
     78c:	00000106 	br	794 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT+0x6c>
  }

  //return((uint32_t) 0);
  return true;
     790:	00800044 	movi	r2,1
}
     794:	e037883a 	mov	sp,fp
     798:	dfc00117 	ldw	ra,4(sp)
     79c:	df000017 	ldw	fp,0(sp)
     7a0:	dec00204 	addi	sp,sp,8
     7a4:	f800283a 	ret

000007a8 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
     7a8:	defff904 	addi	sp,sp,-28
     7ac:	dfc00615 	stw	ra,24(sp)
     7b0:	df000515 	stw	fp,20(sp)
     7b4:	df000504 	addi	fp,sp,20
     7b8:	e13ffc15 	stw	r4,-16(fp)
     7bc:	e17ffd15 	stw	r5,-12(fp)
     7c0:	e1bffe15 	stw	r6,-8(fp)
     7c4:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
     7c8:	e0bffc17 	ldw	r2,-16(fp)
     7cc:	10000a26 	beq	r2,zero,7f8 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
     7d0:	e0bffc17 	ldw	r2,-16(fp)
     7d4:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
     7d8:	e0c00217 	ldw	r3,8(fp)
     7dc:	d8c00015 	stw	r3,0(sp)
     7e0:	e1ffff17 	ldw	r7,-4(fp)
     7e4:	e1bffe17 	ldw	r6,-8(fp)
     7e8:	e17ffd17 	ldw	r5,-12(fp)
     7ec:	e13ffc17 	ldw	r4,-16(fp)
     7f0:	103ee83a 	callr	r2
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
     7f4:	00000106 	br	7fc <alt_dma_txchan_send+0x54>
        from, 
        length,
        done, 
        handle) : -ENODEV;
     7f8:	00bffb44 	movi	r2,-19
}
     7fc:	e037883a 	mov	sp,fp
     800:	dfc00117 	ldw	ra,4(sp)
     804:	df000017 	ldw	fp,0(sp)
     808:	dec00204 	addi	sp,sp,8
     80c:	f800283a 	ret

00000810 <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
     810:	defff904 	addi	sp,sp,-28
     814:	dfc00615 	stw	ra,24(sp)
     818:	df000515 	stw	fp,20(sp)
     81c:	df000504 	addi	fp,sp,20
     820:	e13ffc15 	stw	r4,-16(fp)
     824:	e17ffd15 	stw	r5,-12(fp)
     828:	e1bffe15 	stw	r6,-8(fp)
     82c:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
     830:	e0bffc17 	ldw	r2,-16(fp)
     834:	10000a26 	beq	r2,zero,860 <alt_dma_rxchan_prepare+0x50>
     838:	e0bffc17 	ldw	r2,-16(fp)
     83c:	10800417 	ldw	r2,16(r2)
     840:	e0c00217 	ldw	r3,8(fp)
     844:	d8c00015 	stw	r3,0(sp)
     848:	e1ffff17 	ldw	r7,-4(fp)
     84c:	e1bffe17 	ldw	r6,-8(fp)
     850:	e17ffd17 	ldw	r5,-12(fp)
     854:	e13ffc17 	ldw	r4,-16(fp)
     858:	103ee83a 	callr	r2
     85c:	00000106 	br	864 <alt_dma_rxchan_prepare+0x54>
     860:	00bffb44 	movi	r2,-19
}
     864:	e037883a 	mov	sp,fp
     868:	dfc00117 	ldw	ra,4(sp)
     86c:	df000017 	ldw	fp,0(sp)
     870:	dec00204 	addi	sp,sp,8
     874:	f800283a 	ret

00000878 <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 39

void default_download_IC_1() {
     878:	defffe04 	addi	sp,sp,-8
     87c:	dfc00115 	stw	ra,4(sp)
     880:	df000015 	stw	fp,0(sp)
     884:	d839883a 	mov	fp,sp
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R0_SAMPLE_RATE_SETTING_IC_1_Default );
     888:	d1e00004 	addi	r7,gp,-32768
     88c:	01800044 	movi	r6,1
     890:	01503ac4 	movi	r5,16619
     894:	01001c04 	movi	r4,112
     898:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R1_DSP_RUN_REGISTER_IC_1_Default );
     89c:	d1e02004 	addi	r7,gp,-32640
     8a0:	01800044 	movi	r6,1
     8a4:	01503d84 	movi	r5,16630
     8a8:	01001c04 	movi	r4,112
     8ac:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLKCTRLREGISTER_IC_1_ADDR, REG_CLKCTRLREGISTER_IC_1_BYTE, R2_CLKCTRLREGISTER_IC_1_Default );
     8b0:	d1e00044 	addi	r7,gp,-32767
     8b4:	01800044 	movi	r6,1
     8b8:	01500004 	movi	r5,16384
     8bc:	01001c04 	movi	r4,112
     8c0:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLLCRLREGISTER_IC_1_ADDR, REG_PLLCRLREGISTER_IC_1_BYTE, R3_PLLCRLREGISTER_IC_1_Default );
     8c4:	d1e00084 	addi	r7,gp,-32766
     8c8:	01800184 	movi	r6,6
     8cc:	01500084 	movi	r5,16386
     8d0:	01001c04 	movi	r4,112
     8d4:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R4_DELAY_IC_1_SIZE, R4_DELAY_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR , R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE, R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default );
     8d8:	d1e00284 	addi	r7,gp,-32758
     8dc:	01800084 	movi	r6,2
     8e0:	01500544 	movi	r5,16405
     8e4:	01001c04 	movi	r4,112
     8e8:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ALC_CONTROL_0_IC_1_ADDR , R6_ALC_CONTROL_REGISTERS_IC_1_SIZE, R6_ALC_CONTROL_REGISTERS_IC_1_Default );
     8ec:	d1e02044 	addi	r7,gp,-32639
     8f0:	01800104 	movi	r6,4
     8f4:	01500444 	movi	r5,16401
     8f8:	01001c04 	movi	r4,112
     8fc:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MICCTRLREGISTER_IC_1_ADDR, REG_MICCTRLREGISTER_IC_1_BYTE, R7_MICCTRLREGISTER_IC_1_Default );
     900:	d1e02144 	addi	r7,gp,-32635
     904:	01800044 	movi	r6,1
     908:	01500204 	movi	r5,16392
     90c:	01001c04 	movi	r4,112
     910:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR , R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
     914:	d1e00304 	addi	r7,gp,-32756
     918:	01800204 	movi	r6,8
     91c:	01500244 	movi	r5,16393
     920:	01001c04 	movi	r4,112
     924:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ADC_CONTROL_0_IC_1_ADDR , R9_ADC_CONTROL_REGISTERS_IC_1_SIZE, R9_ADC_CONTROL_REGISTERS_IC_1_Default );
     928:	d1e00504 	addi	r7,gp,-32748
     92c:	018000c4 	movi	r6,3
     930:	01500644 	movi	r5,16409
     934:	01001c04 	movi	r4,112
     938:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR , R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
     93c:	01c00074 	movhi	r7,1
     940:	39c29784 	addi	r7,r7,2654
     944:	01800384 	movi	r6,14
     948:	01500704 	movi	r5,16412
     94c:	01001c04 	movi	r4,112
     950:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CONVERTER_CTRL_0_IC_1_ADDR , R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE, R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default );
     954:	d1e02184 	addi	r7,gp,-32634
     958:	01800084 	movi	r6,2
     95c:	015005c4 	movi	r5,16407
     960:	01001c04 	movi	r4,112
     964:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DAC_CONTROL_0_IC_1_ADDR , R12_DAC_CONTROL_REGISTERS_IC_1_SIZE, R12_DAC_CONTROL_REGISTERS_IC_1_Default );
     968:	d1e005c4 	addi	r7,gp,-32745
     96c:	018000c4 	movi	r6,3
     970:	01500a84 	movi	r5,16426
     974:	01001c04 	movi	r4,112
     978:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR , R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
     97c:	d1e00684 	addi	r7,gp,-32742
     980:	01800044 	movi	r6,1
     984:	01500b44 	movi	r5,16429
     988:	01001c04 	movi	r4,112
     98c:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR , R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
     990:	d1e006c4 	addi	r7,gp,-32741
     994:	01800084 	movi	r6,2
     998:	01500bc4 	movi	r5,16431
     99c:	01001c04 	movi	r4,112
     9a0:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_JACKREGISTER_IC_1_ADDR, REG_JACKREGISTER_IC_1_BYTE, R15_JACKREGISTER_IC_1_Default );
     9a4:	d1e00744 	addi	r7,gp,-32739
     9a8:	01800044 	movi	r6,1
     9ac:	01500c44 	movi	r5,16433
     9b0:	01001c04 	movi	r4,112
     9b4:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
     9b8:	01c00074 	movhi	r7,1
     9bc:	39c20104 	addi	r7,r7,2052
     9c0:	01808484 	movi	r6,530
     9c4:	01420004 	movi	r5,2048
     9c8:	01001c04 	movi	r4,112
     9cc:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
     9d0:	01c00074 	movhi	r7,1
     9d4:	39c20104 	addi	r7,r7,2052
     9d8:	01808484 	movi	r6,530
     9dc:	01420004 	movi	r5,2048
     9e0:	01001c04 	movi	r4,112
     9e4:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
     9e8:	01c00074 	movhi	r7,1
     9ec:	39c20104 	addi	r7,r7,2052
     9f0:	01808484 	movi	r6,530
     9f4:	01420004 	movi	r5,2048
     9f8:	01001c04 	movi	r4,112
     9fc:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
     a00:	01c00074 	movhi	r7,1
     a04:	39c20104 	addi	r7,r7,2052
     a08:	01808484 	movi	r6,530
     a0c:	01420004 	movi	r5,2048
     a10:	01001c04 	movi	r4,112
     a14:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
     a18:	01c00074 	movhi	r7,1
     a1c:	39c20104 	addi	r7,r7,2052
     a20:	01808484 	movi	r6,530
     a24:	01420004 	movi	r5,2048
     a28:	01001c04 	movi	r4,112
     a2c:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_ENABLE_REGISTER_IC_1_ADDR, REG_DSP_ENABLE_REGISTER_IC_1_BYTE, R21_DSP_ENABLE_REGISTER_IC_1_Default );
     a30:	d1e00784 	addi	r7,gp,-32738
     a34:	01800044 	movi	r6,1
     a38:	01503d44 	movi	r5,16629
     a3c:	01001c04 	movi	r4,112
     a40:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CRC_IDEAL_1_IC_1_ADDR , R22_CRC_REGISTERS_IC_1_SIZE, R22_CRC_REGISTERS_IC_1_Default );
     a44:	d1e007c4 	addi	r7,gp,-32737
     a48:	01800144 	movi	r6,5
     a4c:	01503004 	movi	r5,16576
     a50:	01001c04 	movi	r4,112
     a54:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_GPIO_0_CONTROL_IC_1_ADDR , R23_GPIO_REGISTERS_IC_1_SIZE, R23_GPIO_REGISTERS_IC_1_Default );
     a58:	d1e02204 	addi	r7,gp,-32632
     a5c:	01800104 	movi	r6,4
     a60:	01503184 	movi	r5,16582
     a64:	01001c04 	movi	r4,112
     a68:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_NON_MODULO_RAM_1_IC_1_ADDR , R24_NON_MODULO_REGISTERS_IC_1_SIZE, R24_NON_MODULO_REGISTERS_IC_1_Default );
     a6c:	d1e00904 	addi	r7,gp,-32732
     a70:	01800084 	movi	r6,2
     a74:	01503a44 	movi	r5,16617
     a78:	01001c04 	movi	r4,112
     a7c:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_WATCHDOG_ENABLE_IC_1_ADDR , R25_WATCHDOG_REGISTERS_IC_1_SIZE, R25_WATCHDOG_REGISTERS_IC_1_Default );
     a80:	d1e00984 	addi	r7,gp,-32730
     a84:	01800144 	movi	r6,5
     a88:	01503404 	movi	r5,16592
     a8c:	01001c04 	movi	r4,112
     a90:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R26_SAMPLE_RATE_SETTING_IC_1_Default );
     a94:	d1e00ac4 	addi	r7,gp,-32725
     a98:	01800044 	movi	r6,1
     a9c:	01503ac4 	movi	r5,16619
     aa0:	01001c04 	movi	r4,112
     aa4:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE, R27_ROUTING_MATRIX_INPUTS_IC_1_Default );
     aa8:	d1e02304 	addi	r7,gp,-32628
     aac:	01800044 	movi	r6,1
     ab0:	01503c84 	movi	r5,16626
     ab4:	01001c04 	movi	r4,112
     ab8:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE, R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default );
     abc:	d1e02344 	addi	r7,gp,-32627
     ac0:	01800044 	movi	r6,1
     ac4:	01503cc4 	movi	r5,16627
     ac8:	01001c04 	movi	r4,112
     acc:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE, R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default );
     ad0:	d1e02384 	addi	r7,gp,-32626
     ad4:	01800044 	movi	r6,1
     ad8:	01503d04 	movi	r5,16628
     adc:	01001c04 	movi	r4,112
     ae0:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_SLEW_MODES_IC_1_ADDR, REG_DSP_SLEW_MODES_IC_1_BYTE, R30_DSP_SLEW_MODES_IC_1_Default );
     ae4:	d1e023c4 	addi	r7,gp,-32625
     ae8:	01800044 	movi	r6,1
     aec:	01503dc4 	movi	r5,16631
     af0:	01001c04 	movi	r4,112
     af4:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE, R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default );
     af8:	d1e02404 	addi	r7,gp,-32624
     afc:	01800044 	movi	r6,1
     b00:	01503e04 	movi	r5,16632
     b04:	01001c04 	movi	r4,112
     b08:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLOCK_ENABLE_REG_0_IC_1_ADDR , R32_CLOCK_ENABLE_REGISTERS_IC_1_SIZE, R32_CLOCK_ENABLE_REGISTERS_IC_1_Default );
     b0c:	d1e00b04 	addi	r7,gp,-32724
     b10:	01800084 	movi	r6,2
     b14:	01503e44 	movi	r5,16633
     b18:	01001c04 	movi	r4,112
     b1c:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
     b20:	01c00074 	movhi	r7,1
     b24:	39c20104 	addi	r7,r7,2052
     b28:	01808484 	movi	r6,530
     b2c:	01420004 	movi	r5,2048
     b30:	01001c04 	movi	r4,112
     b34:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
     b38:	01c00074 	movhi	r7,1
     b3c:	39c28584 	addi	r7,r7,2582
     b40:	01801204 	movi	r6,72
     b44:	000b883a 	mov	r5,zero
     b48:	01001c04 	movi	r4,112
     b4c:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R35_SAMPLE_RATE_SETTING_IC_1_Default );
     b50:	d1e00b84 	addi	r7,gp,-32722
     b54:	01800044 	movi	r6,1
     b58:	01503ac4 	movi	r5,16619
     b5c:	01001c04 	movi	r4,112
     b60:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R36_DSP_RUN_REGISTER_IC_1_Default );
     b64:	d1e00bc4 	addi	r7,gp,-32721
     b68:	01800044 	movi	r6,1
     b6c:	01503d84 	movi	r5,16630
     b70:	01001c04 	movi	r4,112
     b74:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R37_DEJITTER_REGISTER_CONTROL_IC_1_Default );
     b78:	d1e02444 	addi	r7,gp,-32623
     b7c:	01800044 	movi	r6,1
     b80:	01500d84 	movi	r5,16438
     b84:	01001c04 	movi	r4,112
     b88:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R38_DEJITTER_REGISTER_CONTROL_IC_1_Default );
     b8c:	d1e00c04 	addi	r7,gp,-32720
     b90:	01800044 	movi	r6,1
     b94:	01500d84 	movi	r5,16438
     b98:	01001c04 	movi	r4,112
     b9c:	00004b80 	call	4b8 <SIGMA_WRITE_REGISTER_BLOCK>
}
     ba0:	0001883a 	nop
     ba4:	e037883a 	mov	sp,fp
     ba8:	dfc00117 	ldw	ra,4(sp)
     bac:	df000017 	ldw	fp,0(sp)
     bb0:	dec00204 	addi	sp,sp,8
     bb4:	f800283a 	ret

00000bb8 <msleep>:
int pwm_interval1 = 0;
int pwm_direction[4] = {-1, -1, -1, -1};
int pwm_counter[4] = {60000, 60000, 60000, 60000};

void msleep(int msec)
{
     bb8:	defffc04 	addi	sp,sp,-16
     bbc:	dfc00315 	stw	ra,12(sp)
     bc0:	df000215 	stw	fp,8(sp)
     bc4:	df000204 	addi	fp,sp,8
     bc8:	e13fff15 	stw	r4,-4(fp)
	for (int i = 0; i < msec; i++)
     bcc:	e03ffe15 	stw	zero,-8(fp)
     bd0:	00000506 	br	be8 <msleep+0x30>
	{
		usleep(1000);
     bd4:	0100fa04 	movi	r4,1000
     bd8:	000e6380 	call	e638 <usleep>
int pwm_direction[4] = {-1, -1, -1, -1};
int pwm_counter[4] = {60000, 60000, 60000, 60000};

void msleep(int msec)
{
	for (int i = 0; i < msec; i++)
     bdc:	e0bffe17 	ldw	r2,-8(fp)
     be0:	10800044 	addi	r2,r2,1
     be4:	e0bffe15 	stw	r2,-8(fp)
     be8:	e0fffe17 	ldw	r3,-8(fp)
     bec:	e0bfff17 	ldw	r2,-4(fp)
     bf0:	18bff816 	blt	r3,r2,bd4 <__reset+0xfbf00bd4>
	{
		usleep(1000);
	}
}
     bf4:	0001883a 	nop
     bf8:	e037883a 	mov	sp,fp
     bfc:	dfc00117 	ldw	ra,4(sp)
     c00:	df000017 	ldw	fp,0(sp)
     c04:	dec00204 	addi	sp,sp,8
     c08:	f800283a 	ret

00000c0c <read_device_id>:

// for QSPI Flash
int read_device_id(){
     c0c:	deffff04 	addi	sp,sp,-4
     c10:	df000015 	stw	fp,0(sp)
     c14:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x0000489F);
     c18:	00d227c4 	movi	r3,18591
     c1c:	00810834 	movhi	r2,1056
     c20:	10864704 	addi	r2,r2,6428
     c24:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     c28:	00c00044 	movi	r3,1
     c2c:	00810834 	movhi	r2,1056
     c30:	10864804 	addi	r2,r2,6432
     c34:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xc);
     c38:	00810834 	movhi	r2,1056
     c3c:	10864c04 	addi	r2,r2,6448
     c40:	10800037 	ldwio	r2,0(r2)
}
     c44:	e037883a 	mov	sp,fp
     c48:	df000017 	ldw	fp,0(sp)
     c4c:	dec00104 	addi	sp,sp,4
     c50:	f800283a 	ret

00000c54 <read_status_register>:

int read_status_register(){
     c54:	deffff04 	addi	sp,sp,-4
     c58:	df000015 	stw	fp,0(sp)
     c5c:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001805);
     c60:	00c60144 	movi	r3,6149
     c64:	00810834 	movhi	r2,1056
     c68:	10864704 	addi	r2,r2,6428
     c6c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     c70:	00c00044 	movi	r3,1
     c74:	00810834 	movhi	r2,1056
     c78:	10864804 	addi	r2,r2,6432
     c7c:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xc);
     c80:	00810834 	movhi	r2,1056
     c84:	10864c04 	addi	r2,r2,6448
     c88:	10800037 	ldwio	r2,0(r2)
}
     c8c:	e037883a 	mov	sp,fp
     c90:	df000017 	ldw	fp,0(sp)
     c94:	dec00104 	addi	sp,sp,4
     c98:	f800283a 	ret

00000c9c <read_flag_status_register>:

int read_flag_status_register(){
     c9c:	deffff04 	addi	sp,sp,-4
     ca0:	df000015 	stw	fp,0(sp)
     ca4:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001870);
     ca8:	00c61c04 	movi	r3,6256
     cac:	00810834 	movhi	r2,1056
     cb0:	10864704 	addi	r2,r2,6428
     cb4:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     cb8:	00c00044 	movi	r3,1
     cbc:	00810834 	movhi	r2,1056
     cc0:	10864804 	addi	r2,r2,6432
     cc4:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xc);
     cc8:	00810834 	movhi	r2,1056
     ccc:	10864c04 	addi	r2,r2,6448
     cd0:	10800037 	ldwio	r2,0(r2)
}
     cd4:	e037883a 	mov	sp,fp
     cd8:	df000017 	ldw	fp,0(sp)
     cdc:	dec00104 	addi	sp,sp,4
     ce0:	f800283a 	ret

00000ce4 <write_enable>:

void write_enable(){
     ce4:	deffff04 	addi	sp,sp,-4
     ce8:	df000015 	stw	fp,0(sp)
     cec:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00000006);
     cf0:	00c00184 	movi	r3,6
     cf4:	00810834 	movhi	r2,1056
     cf8:	10864704 	addi	r2,r2,6428
     cfc:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     d00:	00c00044 	movi	r3,1
     d04:	00810834 	movhi	r2,1056
     d08:	10864804 	addi	r2,r2,6432
     d0c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,1);
     d10:	00c00044 	movi	r3,1
     d14:	00810834 	movhi	r2,1056
     d18:	10864a04 	addi	r2,r2,6440
     d1c:	10c00035 	stwio	r3,0(r2)
}
     d20:	0001883a 	nop
     d24:	e037883a 	mov	sp,fp
     d28:	df000017 	ldw	fp,0(sp)
     d2c:	dec00104 	addi	sp,sp,4
     d30:	f800283a 	ret

00000d34 <enter_4byte_addressing_mode>:

void enter_4byte_addressing_mode(){
     d34:	deffff04 	addi	sp,sp,-4
     d38:	df000015 	stw	fp,0(sp)
     d3c:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x000000B7);
     d40:	00c02dc4 	movi	r3,183
     d44:	00810834 	movhi	r2,1056
     d48:	10864704 	addi	r2,r2,6428
     d4c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     d50:	00c00044 	movi	r3,1
     d54:	00810834 	movhi	r2,1056
     d58:	10864804 	addi	r2,r2,6432
     d5c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,1);
     d60:	00c00044 	movi	r3,1
     d64:	00810834 	movhi	r2,1056
     d68:	10864a04 	addi	r2,r2,6440
     d6c:	10c00035 	stwio	r3,0(r2)
}
     d70:	0001883a 	nop
     d74:	e037883a 	mov	sp,fp
     d78:	df000017 	ldw	fp,0(sp)
     d7c:	dec00104 	addi	sp,sp,4
     d80:	f800283a 	ret

00000d84 <clear_flag_status_register>:

void clear_flag_status_register(){
     d84:	deffff04 	addi	sp,sp,-4
     d88:	df000015 	stw	fp,0(sp)
     d8c:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00000050);
     d90:	00c01404 	movi	r3,80
     d94:	00810834 	movhi	r2,1056
     d98:	10864704 	addi	r2,r2,6428
     d9c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     da0:	00c00044 	movi	r3,1
     da4:	00810834 	movhi	r2,1056
     da8:	10864804 	addi	r2,r2,6432
     dac:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,1);
     db0:	00c00044 	movi	r3,1
     db4:	00810834 	movhi	r2,1056
     db8:	10864a04 	addi	r2,r2,6440
     dbc:	10c00035 	stwio	r3,0(r2)
}
     dc0:	0001883a 	nop
     dc4:	e037883a 	mov	sp,fp
     dc8:	df000017 	ldw	fp,0(sp)
     dcc:	dec00104 	addi	sp,sp,4
     dd0:	f800283a 	ret

00000dd4 <read_bank_register>:

int read_bank_register(){
     dd4:	deffff04 	addi	sp,sp,-4
     dd8:	df000015 	stw	fp,0(sp)
     ddc:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001816);
     de0:	00c60584 	movi	r3,6166
     de4:	00810834 	movhi	r2,1056
     de8:	10864704 	addi	r2,r2,6428
     dec:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     df0:	00c00044 	movi	r3,1
     df4:	00810834 	movhi	r2,1056
     df8:	10864804 	addi	r2,r2,6432
     dfc:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xc);
     e00:	00810834 	movhi	r2,1056
     e04:	10864c04 	addi	r2,r2,6448
     e08:	10800037 	ldwio	r2,0(r2)
}
     e0c:	e037883a 	mov	sp,fp
     e10:	df000017 	ldw	fp,0(sp)
     e14:	dec00104 	addi	sp,sp,4
     e18:	f800283a 	ret

00000e1c <write_bank_register_enter4byte>:

//for cypress flash to enter four byte addr
void write_bank_register_enter4byte(){
     e1c:	deffff04 	addi	sp,sp,-4
     e20:	df000015 	stw	fp,0(sp)
     e24:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001017);
     e28:	00c405c4 	movi	r3,4119
     e2c:	00810834 	movhi	r2,1056
     e30:	10864704 	addi	r2,r2,6428
     e34:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,0x00000080);
     e38:	00c02004 	movi	r3,128
     e3c:	00810834 	movhi	r2,1056
     e40:	10864a04 	addi	r2,r2,6440
     e44:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     e48:	00c00044 	movi	r3,1
     e4c:	00810834 	movhi	r2,1056
     e50:	10864804 	addi	r2,r2,6432
     e54:	10c00035 	stwio	r3,0(r2)
}
     e58:	0001883a 	nop
     e5c:	e037883a 	mov	sp,fp
     e60:	df000017 	ldw	fp,0(sp)
     e64:	dec00104 	addi	sp,sp,4
     e68:	f800283a 	ret

00000e6c <write_bank_register_exit4byte>:

//for cypress flash to enter 3 byte addr
void write_bank_register_exit4byte(){
     e6c:	deffff04 	addi	sp,sp,-4
     e70:	df000015 	stw	fp,0(sp)
     e74:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001017);
     e78:	00c405c4 	movi	r3,4119
     e7c:	00810834 	movhi	r2,1056
     e80:	10864704 	addi	r2,r2,6428
     e84:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,0x00000000);
     e88:	0007883a 	mov	r3,zero
     e8c:	00810834 	movhi	r2,1056
     e90:	10864a04 	addi	r2,r2,6440
     e94:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     e98:	00c00044 	movi	r3,1
     e9c:	00810834 	movhi	r2,1056
     ea0:	10864804 	addi	r2,r2,6432
     ea4:	10c00035 	stwio	r3,0(r2)
}
     ea8:	0001883a 	nop
     eac:	e037883a 	mov	sp,fp
     eb0:	df000017 	ldw	fp,0(sp)
     eb4:	dec00104 	addi	sp,sp,4
     eb8:	f800283a 	ret

00000ebc <read_config_register>:

//to check cypress flash in dual or quad mode
int read_config_register(){
     ebc:	deffff04 	addi	sp,sp,-4
     ec0:	df000015 	stw	fp,0(sp)
     ec4:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001835);
     ec8:	00c60d44 	movi	r3,6197
     ecc:	00810834 	movhi	r2,1056
     ed0:	10864704 	addi	r2,r2,6428
     ed4:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     ed8:	00c00044 	movi	r3,1
     edc:	00810834 	movhi	r2,1056
     ee0:	10864804 	addi	r2,r2,6432
     ee4:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xc);
     ee8:	00810834 	movhi	r2,1056
     eec:	10864c04 	addi	r2,r2,6448
     ef0:	10800037 	ldwio	r2,0(r2)
}
     ef4:	e037883a 	mov	sp,fp
     ef8:	df000017 	ldw	fp,0(sp)
     efc:	dec00104 	addi	sp,sp,4
     f00:	f800283a 	ret

00000f04 <write_config_register>:

//for cypress flash to enter quad mode
void write_config_register(){
     f04:	deffff04 	addi	sp,sp,-4
     f08:	df000015 	stw	fp,0(sp)
     f0c:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00002001);
     f10:	00c80044 	movi	r3,8193
     f14:	00810834 	movhi	r2,1056
     f18:	10864704 	addi	r2,r2,6428
     f1c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,0x00000200);
     f20:	00c08004 	movi	r3,512
     f24:	00810834 	movhi	r2,1056
     f28:	10864a04 	addi	r2,r2,6440
     f2c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     f30:	00c00044 	movi	r3,1
     f34:	00810834 	movhi	r2,1056
     f38:	10864804 	addi	r2,r2,6432
     f3c:	10c00035 	stwio	r3,0(r2)
}
     f40:	0001883a 	nop
     f44:	e037883a 	mov	sp,fp
     f48:	df000017 	ldw	fp,0(sp)
     f4c:	dec00104 	addi	sp,sp,4
     f50:	f800283a 	ret

00000f54 <clear_status_register>:

//exit p_err & e_err mode
void clear_status_register(){
     f54:	deffff04 	addi	sp,sp,-4
     f58:	df000015 	stw	fp,0(sp)
     f5c:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00001030);
     f60:	00c40c04 	movi	r3,4144
     f64:	00810834 	movhi	r2,1056
     f68:	10864704 	addi	r2,r2,6428
     f6c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     f70:	00c00044 	movi	r3,1
     f74:	00810834 	movhi	r2,1056
     f78:	10864804 	addi	r2,r2,6432
     f7c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,1);
     f80:	00c00044 	movi	r3,1
     f84:	00810834 	movhi	r2,1056
     f88:	10864a04 	addi	r2,r2,6440
     f8c:	10c00035 	stwio	r3,0(r2)
}
     f90:	0001883a 	nop
     f94:	e037883a 	mov	sp,fp
     f98:	df000017 	ldw	fp,0(sp)
     f9c:	dec00104 	addi	sp,sp,4
     fa0:	f800283a 	ret

00000fa4 <erase_sector_cypress>:

void erase_sector_cypress(){
     fa4:	deffff04 	addi	sp,sp,-4
     fa8:	df000015 	stw	fp,0(sp)
     fac:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x000003D8);
     fb0:	00c0f604 	movi	r3,984
     fb4:	00810834 	movhi	r2,1056
     fb8:	10864704 	addi	r2,r2,6428
     fbc:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x9,0x00000000);
     fc0:	0007883a 	mov	r3,zero
     fc4:	00810834 	movhi	r2,1056
     fc8:	10864904 	addi	r2,r2,6436
     fcc:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
     fd0:	00c00044 	movi	r3,1
     fd4:	00810834 	movhi	r2,1056
     fd8:	10864804 	addi	r2,r2,6432
     fdc:	10c00035 	stwio	r3,0(r2)
}
     fe0:	0001883a 	nop
     fe4:	e037883a 	mov	sp,fp
     fe8:	df000017 	ldw	fp,0(sp)
     fec:	dec00104 	addi	sp,sp,4
     ff0:	f800283a 	ret

00000ff4 <read_memory>:

int read_memory(){
     ff4:	deffff04 	addi	sp,sp,-4
     ff8:	df000015 	stw	fp,0(sp)
     ffc:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x4,0x00000000);
    1000:	0007883a 	mov	r3,zero
    1004:	00810834 	movhi	r2,1056
    1008:	10864404 	addi	r2,r2,6416
    100c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x0,0x00000101);
    1010:	00c04044 	movi	r3,257
    1014:	00810834 	movhi	r2,1056
    1018:	10864004 	addi	r2,r2,6400
    101c:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x5,0x00000003);
    1020:	00c000c4 	movi	r3,3
    1024:	00810834 	movhi	r2,1056
    1028:	10864504 	addi	r2,r2,6420
    102c:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_MEM_BASE,0x00000000);
    1030:	0080c034 	movhi	r2,768
    1034:	10800037 	ldwio	r2,0(r2)
}
    1038:	e037883a 	mov	sp,fp
    103c:	df000017 	ldw	fp,0(sp)
    1040:	dec00104 	addi	sp,sp,4
    1044:	f800283a 	ret

00001048 <read_memory_3byte>:
int read_memory_3byte(){
    1048:	deffff04 	addi	sp,sp,-4
    104c:	df000015 	stw	fp,0(sp)
    1050:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x4,0x00000000);
    1054:	0007883a 	mov	r3,zero
    1058:	00810834 	movhi	r2,1056
    105c:	10864404 	addi	r2,r2,6416
    1060:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x0,0x00000001);
    1064:	00c00044 	movi	r3,1
    1068:	00810834 	movhi	r2,1056
    106c:	10864004 	addi	r2,r2,6400
    1070:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x5,0x00000003);
    1074:	00c000c4 	movi	r3,3
    1078:	00810834 	movhi	r2,1056
    107c:	10864504 	addi	r2,r2,6420
    1080:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_MEM_BASE,0x00000000);
    1084:	0080c034 	movhi	r2,768
    1088:	10800037 	ldwio	r2,0(r2)
}
    108c:	e037883a 	mov	sp,fp
    1090:	df000017 	ldw	fp,0(sp)
    1094:	dec00104 	addi	sp,sp,4
    1098:	f800283a 	ret

0000109c <cypress_four_byte_fast_read>:
//cypress 4 byte fast read (0C)
int cypress_four_byte_fast_read(){
    109c:	deffff04 	addi	sp,sp,-4
    10a0:	df000015 	stw	fp,0(sp)
    10a4:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x4,0x00000000);
    10a8:	0007883a 	mov	r3,zero
    10ac:	00810834 	movhi	r2,1056
    10b0:	10864404 	addi	r2,r2,6416
    10b4:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x0,0x00000101);
    10b8:	00c04044 	movi	r3,257
    10bc:	00810834 	movhi	r2,1056
    10c0:	10864004 	addi	r2,r2,6400
    10c4:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x5,0x000080C);
    10c8:	00c20304 	movi	r3,2060
    10cc:	00810834 	movhi	r2,1056
    10d0:	10864504 	addi	r2,r2,6420
    10d4:	10c00035 	stwio	r3,0(r2)
	return IORD(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_MEM_BASE,0x00000000);
    10d8:	0080c034 	movhi	r2,768
    10dc:	10800037 	ldwio	r2,0(r2)
}
    10e0:	e037883a 	mov	sp,fp
    10e4:	df000017 	ldw	fp,0(sp)
    10e8:	dec00104 	addi	sp,sp,4
    10ec:	f800283a 	ret

000010f0 <write_memory>:

//4byte addr page program
void write_memory(){
    10f0:	deffff04 	addi	sp,sp,-4
    10f4:	df000015 	stw	fp,0(sp)
    10f8:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x4,0x00000000);
    10fc:	0007883a 	mov	r3,zero
    1100:	00810834 	movhi	r2,1056
    1104:	10864404 	addi	r2,r2,6416
    1108:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x0,0x00000101);
    110c:	00c04044 	movi	r3,257
    1110:	00810834 	movhi	r2,1056
    1114:	10864004 	addi	r2,r2,6400
    1118:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x6,0x00007002);
    111c:	00dc0084 	movi	r3,28674
    1120:	00810834 	movhi	r2,1056
    1124:	10864604 	addi	r2,r2,6424
    1128:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_MEM_BASE,0x00000000,0xabcd1234);
    112c:	00aaf374 	movhi	r2,43981
    1130:	10848d04 	addi	r2,r2,4660
    1134:	00c0c034 	movhi	r3,768
    1138:	18800035 	stwio	r2,0(r3)
}
    113c:	0001883a 	nop
    1140:	e037883a 	mov	sp,fp
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00104 	addi	sp,sp,4
    114c:	f800283a 	ret

00001150 <write_memory_3byte>:
void write_memory_3byte(){
    1150:	deffff04 	addi	sp,sp,-4
    1154:	df000015 	stw	fp,0(sp)
    1158:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x4,0x00000000);
    115c:	0007883a 	mov	r3,zero
    1160:	00810834 	movhi	r2,1056
    1164:	10864404 	addi	r2,r2,6416
    1168:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x0,0x00000001);
    116c:	00c00044 	movi	r3,1
    1170:	00810834 	movhi	r2,1056
    1174:	10864004 	addi	r2,r2,6400
    1178:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x6,0x00000502);
    117c:	00c14084 	movi	r3,1282
    1180:	00810834 	movhi	r2,1056
    1184:	10864604 	addi	r2,r2,6424
    1188:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_MEM_BASE,0x00000000,0xabcd1234);
    118c:	00aaf374 	movhi	r2,43981
    1190:	10848d04 	addi	r2,r2,4660
    1194:	00c0c034 	movhi	r3,768
    1198:	18800035 	stwio	r2,0(r3)
}
    119c:	0001883a 	nop
    11a0:	e037883a 	mov	sp,fp
    11a4:	df000017 	ldw	fp,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <write_register_for_sector_protect_cypress>:

//Bit 5 & Bit 3 set of configuration register set to 1; Sector 0 of memory array is protected(TB-BP2-BP1-BP0:1-0-0-1) in status register;
void write_register_for_sector_protect_cypress(){
    11b0:	deffff04 	addi	sp,sp,-4
    11b4:	df000015 	stw	fp,0(sp)
    11b8:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00002001);
    11bc:	00c80044 	movi	r3,8193
    11c0:	00810834 	movhi	r2,1056
    11c4:	10864704 	addi	r2,r2,6428
    11c8:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,0x0000201c);
    11cc:	00c80704 	movi	r3,8220
    11d0:	00810834 	movhi	r2,1056
    11d4:	10864a04 	addi	r2,r2,6440
    11d8:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
    11dc:	00c00044 	movi	r3,1
    11e0:	00810834 	movhi	r2,1056
    11e4:	10864804 	addi	r2,r2,6432
    11e8:	10c00035 	stwio	r3,0(r2)
}
    11ec:	0001883a 	nop
    11f0:	e037883a 	mov	sp,fp
    11f4:	df000017 	ldw	fp,0(sp)
    11f8:	dec00104 	addi	sp,sp,4
    11fc:	f800283a 	ret

00001200 <write_register_for_sector_unprotect_cypress>:

void write_register_for_sector_unprotect_cypress(){
    1200:	deffff04 	addi	sp,sp,-4
    1204:	df000015 	stw	fp,0(sp)
    1208:	d839883a 	mov	fp,sp
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x7,0x00002001);
    120c:	00c80044 	movi	r3,8193
    1210:	00810834 	movhi	r2,1056
    1214:	10864704 	addi	r2,r2,6428
    1218:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0xA,0x00002000);
    121c:	00c80004 	movi	r3,8192
    1220:	00810834 	movhi	r2,1056
    1224:	10864a04 	addi	r2,r2,6440
    1228:	10c00035 	stwio	r3,0(r2)
	IOWR(INTEL_GENERIC_SERIAL_FLASH_INTERFACE_TOP_0_AVL_CSR_BASE,0x8,0x1);
    122c:	00c00044 	movi	r3,1
    1230:	00810834 	movhi	r2,1056
    1234:	10864804 	addi	r2,r2,6432
    1238:	10c00035 	stwio	r3,0(r2)
}
    123c:	0001883a 	nop
    1240:	e037883a 	mov	sp,fp
    1244:	df000017 	ldw	fp,0(sp)
    1248:	dec00104 	addi	sp,sp,4
    124c:	f800283a 	ret

00001250 <isr_timer0>:

static void isr_timer0(void *context)
{
    1250:	defffe04 	addi	sp,sp,-8
    1254:	df000115 	stw	fp,4(sp)
    1258:	df000104 	addi	fp,sp,4
    125c:	e13fff15 	stw	r4,-4(fp)
	pwm_interval0++;
    1260:	d0a02a17 	ldw	r2,-32600(gp)
    1264:	10800044 	addi	r2,r2,1
    1268:	d0a02a15 	stw	r2,-32600(gp)
	if (pwm_interval0 > 4)
    126c:	d0a02a17 	ldw	r2,-32600(gp)
    1270:	10800150 	cmplti	r2,r2,5
    1274:	10004f1e 	bne	r2,zero,13b4 <isr_timer0+0x164>
	{
		IOWR(AVALON_PWM_0_BASE, pwm_addr0, pwm_counter[pwm_addr0]);
    1278:	d0a02917 	ldw	r2,-32604(gp)
    127c:	1085883a 	add	r2,r2,r2
    1280:	1085883a 	add	r2,r2,r2
    1284:	1007883a 	mov	r3,r2
    1288:	00810834 	movhi	r2,1056
    128c:	10869004 	addi	r2,r2,6720
    1290:	1889883a 	add	r4,r3,r2
    1294:	d0e02917 	ldw	r3,-32604(gp)
    1298:	00800074 	movhi	r2,1
    129c:	10829f04 	addi	r2,r2,2684
    12a0:	18c7883a 	add	r3,r3,r3
    12a4:	18c7883a 	add	r3,r3,r3
    12a8:	10c5883a 	add	r2,r2,r3
    12ac:	10800017 	ldw	r2,0(r2)
    12b0:	20800035 	stwio	r2,0(r4)
		pwm_counter[pwm_addr0] += pwm_direction[pwm_addr0];
    12b4:	d0e02917 	ldw	r3,-32604(gp)
    12b8:	d1202917 	ldw	r4,-32604(gp)
    12bc:	00800074 	movhi	r2,1
    12c0:	10829f04 	addi	r2,r2,2684
    12c4:	2109883a 	add	r4,r4,r4
    12c8:	2109883a 	add	r4,r4,r4
    12cc:	1105883a 	add	r2,r2,r4
    12d0:	11400017 	ldw	r5,0(r2)
    12d4:	d1202917 	ldw	r4,-32604(gp)
    12d8:	00800074 	movhi	r2,1
    12dc:	10829b04 	addi	r2,r2,2668
    12e0:	2109883a 	add	r4,r4,r4
    12e4:	2109883a 	add	r4,r4,r4
    12e8:	1105883a 	add	r2,r2,r4
    12ec:	10800017 	ldw	r2,0(r2)
    12f0:	2889883a 	add	r4,r5,r2
    12f4:	00800074 	movhi	r2,1
    12f8:	10829f04 	addi	r2,r2,2684
    12fc:	18c7883a 	add	r3,r3,r3
    1300:	18c7883a 	add	r3,r3,r3
    1304:	10c5883a 	add	r2,r2,r3
    1308:	11000015 	stw	r4,0(r2)

		if (pwm_counter[pwm_addr0] > 60000)
    130c:	d0e02917 	ldw	r3,-32604(gp)
    1310:	00800074 	movhi	r2,1
    1314:	10829f04 	addi	r2,r2,2684
    1318:	18c7883a 	add	r3,r3,r3
    131c:	18c7883a 	add	r3,r3,r3
    1320:	10c5883a 	add	r2,r2,r3
    1324:	10800017 	ldw	r2,0(r2)
    1328:	00fa9814 	movui	r3,60000
    132c:	1880100e 	bge	r3,r2,1370 <isr_timer0+0x120>
		{
			pwm_direction[pwm_addr0] = -1;
    1330:	d0e02917 	ldw	r3,-32604(gp)
    1334:	00800074 	movhi	r2,1
    1338:	10829b04 	addi	r2,r2,2668
    133c:	18c7883a 	add	r3,r3,r3
    1340:	18c7883a 	add	r3,r3,r3
    1344:	10c5883a 	add	r2,r2,r3
    1348:	00ffffc4 	movi	r3,-1
    134c:	10c00015 	stw	r3,0(r2)

			pwm_addr0++;
    1350:	d0a02917 	ldw	r2,-32604(gp)
    1354:	10800044 	addi	r2,r2,1
    1358:	d0a02915 	stw	r2,-32604(gp)
			if (pwm_addr0 > 1)
    135c:	d0a02917 	ldw	r2,-32604(gp)
    1360:	10800090 	cmplti	r2,r2,2
    1364:	1000121e 	bne	r2,zero,13b0 <isr_timer0+0x160>
				pwm_addr0 = 0;
    1368:	d0202915 	stw	zero,-32604(gp)
    136c:	00001006 	br	13b0 <isr_timer0+0x160>
			}
		else if (pwm_counter[pwm_addr0] < 0)
    1370:	d0e02917 	ldw	r3,-32604(gp)
    1374:	00800074 	movhi	r2,1
    1378:	10829f04 	addi	r2,r2,2684
    137c:	18c7883a 	add	r3,r3,r3
    1380:	18c7883a 	add	r3,r3,r3
    1384:	10c5883a 	add	r2,r2,r3
    1388:	10800017 	ldw	r2,0(r2)
    138c:	1000080e 	bge	r2,zero,13b0 <isr_timer0+0x160>
		{
			pwm_direction[pwm_addr0] = 1;
    1390:	d0e02917 	ldw	r3,-32604(gp)
    1394:	00800074 	movhi	r2,1
    1398:	10829b04 	addi	r2,r2,2668
    139c:	18c7883a 	add	r3,r3,r3
    13a0:	18c7883a 	add	r3,r3,r3
    13a4:	10c5883a 	add	r2,r2,r3
    13a8:	00c00044 	movi	r3,1
    13ac:	10c00015 	stw	r3,0(r2)
		}
		pwm_interval0 = 0;
    13b0:	d0202a15 	stw	zero,-32600(gp)
	}

	pwm_interval1++;
    13b4:	d0a02b17 	ldw	r2,-32596(gp)
    13b8:	10800044 	addi	r2,r2,1
    13bc:	d0a02b15 	stw	r2,-32596(gp)
	if (pwm_interval1 > 2)
    13c0:	d0a02b17 	ldw	r2,-32596(gp)
    13c4:	108000d0 	cmplti	r2,r2,3
    13c8:	1000511e 	bne	r2,zero,1510 <isr_timer0+0x2c0>
	{
		IOWR(AVALON_PWM_0_BASE, pwm_addr1, pwm_counter[pwm_addr1]);
    13cc:	d0a00d17 	ldw	r2,-32716(gp)
    13d0:	1085883a 	add	r2,r2,r2
    13d4:	1085883a 	add	r2,r2,r2
    13d8:	1007883a 	mov	r3,r2
    13dc:	00810834 	movhi	r2,1056
    13e0:	10869004 	addi	r2,r2,6720
    13e4:	1889883a 	add	r4,r3,r2
    13e8:	d0e00d17 	ldw	r3,-32716(gp)
    13ec:	00800074 	movhi	r2,1
    13f0:	10829f04 	addi	r2,r2,2684
    13f4:	18c7883a 	add	r3,r3,r3
    13f8:	18c7883a 	add	r3,r3,r3
    13fc:	10c5883a 	add	r2,r2,r3
    1400:	10800017 	ldw	r2,0(r2)
    1404:	20800035 	stwio	r2,0(r4)
		pwm_counter[pwm_addr1] += pwm_direction[pwm_addr1];
    1408:	d0e00d17 	ldw	r3,-32716(gp)
    140c:	d1200d17 	ldw	r4,-32716(gp)
    1410:	00800074 	movhi	r2,1
    1414:	10829f04 	addi	r2,r2,2684
    1418:	2109883a 	add	r4,r4,r4
    141c:	2109883a 	add	r4,r4,r4
    1420:	1105883a 	add	r2,r2,r4
    1424:	11400017 	ldw	r5,0(r2)
    1428:	d1200d17 	ldw	r4,-32716(gp)
    142c:	00800074 	movhi	r2,1
    1430:	10829b04 	addi	r2,r2,2668
    1434:	2109883a 	add	r4,r4,r4
    1438:	2109883a 	add	r4,r4,r4
    143c:	1105883a 	add	r2,r2,r4
    1440:	10800017 	ldw	r2,0(r2)
    1444:	2889883a 	add	r4,r5,r2
    1448:	00800074 	movhi	r2,1
    144c:	10829f04 	addi	r2,r2,2684
    1450:	18c7883a 	add	r3,r3,r3
    1454:	18c7883a 	add	r3,r3,r3
    1458:	10c5883a 	add	r2,r2,r3
    145c:	11000015 	stw	r4,0(r2)

		if (pwm_counter[pwm_addr1] > 59000)
    1460:	d0e00d17 	ldw	r3,-32716(gp)
    1464:	00800074 	movhi	r2,1
    1468:	10829f04 	addi	r2,r2,2684
    146c:	18c7883a 	add	r3,r3,r3
    1470:	18c7883a 	add	r3,r3,r3
    1474:	10c5883a 	add	r2,r2,r3
    1478:	10800017 	ldw	r2,0(r2)
    147c:	00f99e14 	movui	r3,59000
    1480:	1880110e 	bge	r3,r2,14c8 <isr_timer0+0x278>
		{
			pwm_direction[pwm_addr1] = -1;
    1484:	d0e00d17 	ldw	r3,-32716(gp)
    1488:	00800074 	movhi	r2,1
    148c:	10829b04 	addi	r2,r2,2668
    1490:	18c7883a 	add	r3,r3,r3
    1494:	18c7883a 	add	r3,r3,r3
    1498:	10c5883a 	add	r2,r2,r3
    149c:	00ffffc4 	movi	r3,-1
    14a0:	10c00015 	stw	r3,0(r2)

			pwm_addr1++;
    14a4:	d0a00d17 	ldw	r2,-32716(gp)
    14a8:	10800044 	addi	r2,r2,1
    14ac:	d0a00d15 	stw	r2,-32716(gp)
			if (pwm_addr1 > 3)
    14b0:	d0a00d17 	ldw	r2,-32716(gp)
    14b4:	10800110 	cmplti	r2,r2,4
    14b8:	1000141e 	bne	r2,zero,150c <isr_timer0+0x2bc>
				pwm_addr1 = 2;
    14bc:	00800084 	movi	r2,2
    14c0:	d0a00d15 	stw	r2,-32716(gp)
    14c4:	00001106 	br	150c <isr_timer0+0x2bc>
		}
		else if (pwm_counter[pwm_addr1] < 2000)
    14c8:	d0e00d17 	ldw	r3,-32716(gp)
    14cc:	00800074 	movhi	r2,1
    14d0:	10829f04 	addi	r2,r2,2684
    14d4:	18c7883a 	add	r3,r3,r3
    14d8:	18c7883a 	add	r3,r3,r3
    14dc:	10c5883a 	add	r2,r2,r3
    14e0:	10800017 	ldw	r2,0(r2)
    14e4:	1081f408 	cmpgei	r2,r2,2000
    14e8:	1000081e 	bne	r2,zero,150c <isr_timer0+0x2bc>
		{
			pwm_direction[pwm_addr1] = 1;
    14ec:	d0e00d17 	ldw	r3,-32716(gp)
    14f0:	00800074 	movhi	r2,1
    14f4:	10829b04 	addi	r2,r2,2668
    14f8:	18c7883a 	add	r3,r3,r3
    14fc:	18c7883a 	add	r3,r3,r3
    1500:	10c5883a 	add	r2,r2,r3
    1504:	00c00044 	movi	r3,1
    1508:	10c00015 	stw	r3,0(r2)
		}
		pwm_interval1 = 0;
    150c:	d0202b15 	stw	zero,-32596(gp)
	}

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    1510:	0007883a 	mov	r3,zero
    1514:	00810834 	movhi	r2,1056
    1518:	10868804 	addi	r2,r2,6688
    151c:	10c00035 	stwio	r3,0(r2)
}
    1520:	0001883a 	nop
    1524:	e037883a 	mov	sp,fp
    1528:	df000017 	ldw	fp,0(sp)
    152c:	dec00104 	addi	sp,sp,4
    1530:	f800283a 	ret

00001534 <dma_rx_done1>:

static void dma_rx_done1(void *handle, void *data)
{
    1534:	defffd04 	addi	sp,sp,-12
    1538:	df000215 	stw	fp,8(sp)
    153c:	df000204 	addi	fp,sp,8
    1540:	e13ffe15 	stw	r4,-8(fp)
    1544:	e17fff15 	stw	r5,-4(fp)
	rx_done1++;
    1548:	d0a02817 	ldw	r2,-32608(gp)
    154c:	10800044 	addi	r2,r2,1
    1550:	d0a02815 	stw	r2,-32608(gp)
}
    1554:	0001883a 	nop
    1558:	e037883a 	mov	sp,fp
    155c:	df000017 	ldw	fp,0(sp)
    1560:	dec00104 	addi	sp,sp,4
    1564:	f800283a 	ret

00001568 <dma_rx_done>:

static void dma_rx_done(void *handle, void *data)
{
    1568:	defffa04 	addi	sp,sp,-24
    156c:	dfc00515 	stw	ra,20(sp)
    1570:	df000415 	stw	fp,16(sp)
    1574:	df000404 	addi	fp,sp,16
    1578:	e13ffe15 	stw	r4,-8(fp)
    157c:	e17fff15 	stw	r5,-4(fp)
	rx_done++;
    1580:	d0a02717 	ldw	r2,-32612(gp)
    1584:	10800044 	addi	r2,r2,1
    1588:	d0a02715 	stw	r2,-32612(gp)

	//int fifo_level = altera_avalon_fifo_read_level(FIFO_TX_BASE);
	int rc = alt_dma_txchan_send(txchan1, rx_buffer, I2S_BUF_SIZE, NULL, NULL);
    158c:	d0a02e17 	ldw	r2,-32584(gp)
    1590:	d8000015 	stw	zero,0(sp)
    1594:	000f883a 	mov	r7,zero
    1598:	01804004 	movi	r6,256
    159c:	01400074 	movhi	r5,1
    15a0:	294f1404 	addi	r5,r5,15440
    15a4:	1009883a 	mov	r4,r2
    15a8:	00007a80 	call	7a8 <alt_dma_txchan_send>
    15ac:	e0bffd15 	stw	r2,-12(fp)
	//int rc = alt_dma_txchan_send(txchan1, rx_buffer, fifo_level, NULL, NULL);
	if (rc < 0)
    15b0:	e0bffd17 	ldw	r2,-12(fp)
    15b4:	1000040e 	bge	r2,zero,15c8 <dma_rx_done+0x60>
	{
		printf("Failed to post write request, reason = %d\n", rc);
    15b8:	e17ffd17 	ldw	r5,-12(fp)
    15bc:	01000074 	movhi	r4,1
    15c0:	2100f504 	addi	r4,r4,980
    15c4:	0001bc80 	call	1bc8 <printf>
	}

	rc = alt_dma_rxchan_prepare(rxchan1, (void *)0x0, I2S_BUF_SIZE, dma_rx_done1, NULL);
    15c8:	d0a02c17 	ldw	r2,-32592(gp)
    15cc:	d8000015 	stw	zero,0(sp)
    15d0:	01c00034 	movhi	r7,0
    15d4:	39c54d04 	addi	r7,r7,5428
    15d8:	01804004 	movi	r6,256
    15dc:	000b883a 	mov	r5,zero
    15e0:	1009883a 	mov	r4,r2
    15e4:	00008100 	call	810 <alt_dma_rxchan_prepare>
    15e8:	e0bffd15 	stw	r2,-12(fp)
	//rc = alt_dma_rxchan_prepare(rxchan1, (void *)0x0, fifo_level, dma_rx_done1, NULL);
	if (rc < 0)
    15ec:	e0bffd17 	ldw	r2,-12(fp)
    15f0:	1000040e 	bge	r2,zero,1604 <dma_rx_done+0x9c>
	{
		printf("Failed to post read request, reason = %d\n", rc);
    15f4:	e17ffd17 	ldw	r5,-12(fp)
    15f8:	01000074 	movhi	r4,1
    15fc:	21010004 	addi	r4,r4,1024
    1600:	0001bc80 	call	1bc8 <printf>
	}
}
    1604:	0001883a 	nop
    1608:	e037883a 	mov	sp,fp
    160c:	dfc00117 	ldw	ra,4(sp)
    1610:	df000017 	ldw	fp,0(sp)
    1614:	dec00204 	addi	sp,sp,8
    1618:	f800283a 	ret

0000161c <fifo_callback>:

static void fifo_callback(void *context)
{
    161c:	defffa04 	addi	sp,sp,-24
    1620:	dfc00515 	stw	ra,20(sp)
    1624:	df000415 	stw	fp,16(sp)
    1628:	df000404 	addi	fp,sp,16
    162c:	e13fff15 	stw	r4,-4(fp)
	int status = altera_avalon_fifo_read_status(FIFO_RX_BASE, ALTERA_AVALON_FIFO_IENABLE_ALL);
    1630:	01400fc4 	movi	r5,63
    1634:	01010834 	movhi	r4,1056
    1638:	2106a804 	addi	r4,r4,6816
    163c:	000ed480 	call	ed48 <altera_avalon_fifo_read_status>
    1640:	e0bffd15 	stw	r2,-12(fp)
	if (status & (ALTERA_AVALON_FIFO_STATUS_AF_MSK | ALTERA_AVALON_FIFO_STATUS_F_MSK))
    1644:	e0bffd17 	ldw	r2,-12(fp)
    1648:	1080014c 	andi	r2,r2,5
    164c:	10001e26 	beq	r2,zero,16c8 <fifo_callback+0xac>
	{
		//int fifo_level = altera_avalon_fifo_read_level(FIFO_RX_BASE);
		int rc = alt_dma_txchan_send(txchan, (void *)0x0, I2S_BUF_SIZE, NULL, NULL);
    1650:	d0a02f17 	ldw	r2,-32580(gp)
    1654:	d8000015 	stw	zero,0(sp)
    1658:	000f883a 	mov	r7,zero
    165c:	01804004 	movi	r6,256
    1660:	000b883a 	mov	r5,zero
    1664:	1009883a 	mov	r4,r2
    1668:	00007a80 	call	7a8 <alt_dma_txchan_send>
    166c:	e0bffe15 	stw	r2,-8(fp)
		//int rc = alt_dma_txchan_send(txchan, (void *)0x0, fifo_level, NULL, NULL);
		if (rc < 0)
    1670:	e0bffe17 	ldw	r2,-8(fp)
    1674:	1000040e 	bge	r2,zero,1688 <fifo_callback+0x6c>
		{
			printf("Failed to post write request, reason = %d\n", rc);
    1678:	e17ffe17 	ldw	r5,-8(fp)
    167c:	01000074 	movhi	r4,1
    1680:	2100f504 	addi	r4,r4,980
    1684:	0001bc80 	call	1bc8 <printf>
		}

		rc = alt_dma_rxchan_prepare(rxchan, rx_buffer, I2S_BUF_SIZE, dma_rx_done, NULL);
    1688:	d0a02d17 	ldw	r2,-32588(gp)
    168c:	d8000015 	stw	zero,0(sp)
    1690:	01c00034 	movhi	r7,0
    1694:	39c55a04 	addi	r7,r7,5480
    1698:	01804004 	movi	r6,256
    169c:	01400074 	movhi	r5,1
    16a0:	294f1404 	addi	r5,r5,15440
    16a4:	1009883a 	mov	r4,r2
    16a8:	00008100 	call	810 <alt_dma_rxchan_prepare>
    16ac:	e0bffe15 	stw	r2,-8(fp)
		//rc = alt_dma_rxchan_prepare(rxchan, rx_buffer, fifo_level, dma_rx_done, NULL);
		if (rc < 0)
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	1000040e 	bge	r2,zero,16c8 <fifo_callback+0xac>
		{
			printf("Failed to post read request, reason = %d\n", rc);
    16b8:	e17ffe17 	ldw	r5,-8(fp)
    16bc:	01000074 	movhi	r4,1
    16c0:	21010004 	addi	r4,r4,1024
    16c4:	0001bc80 	call	1bc8 <printf>
		}

		//printf("data = %08X\n", ((int *)rx_buffer)[0]);
	}

	altera_avalon_fifo_clear_event(FIFO_RX_BASE, ALTERA_AVALON_FIFO_EVENT_ALL);
    16c8:	01400fc4 	movi	r5,63
    16cc:	01010834 	movhi	r4,1056
    16d0:	2106a804 	addi	r4,r4,6816
    16d4:	000ed840 	call	ed84 <altera_avalon_fifo_clear_event>
}
    16d8:	0001883a 	nop
    16dc:	e037883a 	mov	sp,fp
    16e0:	dfc00117 	ldw	ra,4(sp)
    16e4:	df000017 	ldw	fp,0(sp)
    16e8:	dec00204 	addi	sp,sp,8
    16ec:	f800283a 	ret

000016f0 <initDMA>:

int initDMA()
{
    16f0:	defffe04 	addi	sp,sp,-8
    16f4:	dfc00115 	stw	ra,4(sp)
    16f8:	df000015 	stw	fp,0(sp)
    16fc:	d839883a 	mov	fp,sp
	if ((txchan = alt_dma_txchan_open(DMA_RX_NAME)) == NULL)
    1700:	01000074 	movhi	r4,1
    1704:	21010b04 	addi	r4,r4,1068
    1708:	000e41c0 	call	e41c <alt_dma_txchan_open>
    170c:	d0a02f15 	stw	r2,-32580(gp)
    1710:	d0a02f17 	ldw	r2,-32580(gp)
    1714:	1000051e 	bne	r2,zero,172c <initDMA+0x3c>
	{
		printf("Failed to open transit channel\n");
    1718:	01000074 	movhi	r4,1
    171c:	21010e04 	addi	r4,r4,1080
    1720:	0001cc40 	call	1cc4 <puts>
		return -1;
    1724:	00bfffc4 	movi	r2,-1
    1728:	00002206 	br	17b4 <initDMA+0xc4>
	}

	if ((rxchan = alt_dma_rxchan_open(DMA_RX_NAME)) == NULL)
    172c:	01000074 	movhi	r4,1
    1730:	21010b04 	addi	r4,r4,1068
    1734:	000e3d00 	call	e3d0 <alt_dma_rxchan_open>
    1738:	d0a02d15 	stw	r2,-32588(gp)
    173c:	d0a02d17 	ldw	r2,-32588(gp)
    1740:	1000051e 	bne	r2,zero,1758 <initDMA+0x68>
	{
		printf("Failed to open receive channel\n");
    1744:	01000074 	movhi	r4,1
    1748:	21011604 	addi	r4,r4,1112
    174c:	0001cc40 	call	1cc4 <puts>
		return -2;
    1750:	00bfff84 	movi	r2,-2
    1754:	00001706 	br	17b4 <initDMA+0xc4>
	}

	if ((txchan1 = alt_dma_txchan_open(DMA_TX_NAME)) == NULL)
    1758:	01000074 	movhi	r4,1
    175c:	21011e04 	addi	r4,r4,1144
    1760:	000e41c0 	call	e41c <alt_dma_txchan_open>
    1764:	d0a02e15 	stw	r2,-32584(gp)
    1768:	d0a02e17 	ldw	r2,-32584(gp)
    176c:	1000051e 	bne	r2,zero,1784 <initDMA+0x94>
	{
		printf("Failed to open transit channel\n");
    1770:	01000074 	movhi	r4,1
    1774:	21010e04 	addi	r4,r4,1080
    1778:	0001cc40 	call	1cc4 <puts>
		return -3;
    177c:	00bfff44 	movi	r2,-3
    1780:	00000c06 	br	17b4 <initDMA+0xc4>
	}

	if ((rxchan1 = alt_dma_rxchan_open(DMA_TX_NAME)) == NULL)
    1784:	01000074 	movhi	r4,1
    1788:	21011e04 	addi	r4,r4,1144
    178c:	000e3d00 	call	e3d0 <alt_dma_rxchan_open>
    1790:	d0a02c15 	stw	r2,-32592(gp)
    1794:	d0a02c17 	ldw	r2,-32592(gp)
    1798:	1000051e 	bne	r2,zero,17b0 <initDMA+0xc0>
	{
		printf("Failed to open receive channel\n");
    179c:	01000074 	movhi	r4,1
    17a0:	21011604 	addi	r4,r4,1112
    17a4:	0001cc40 	call	1cc4 <puts>
		return -4;
    17a8:	00bfff04 	movi	r2,-4
    17ac:	00000106 	br	17b4 <initDMA+0xc4>
	}

	return 0;
    17b0:	0005883a 	mov	r2,zero
}
    17b4:	e037883a 	mov	sp,fp
    17b8:	dfc00117 	ldw	ra,4(sp)
    17bc:	df000017 	ldw	fp,0(sp)
    17c0:	dec00204 	addi	sp,sp,8
    17c4:	f800283a 	ret

000017c8 <initCODEC>:

int initCODEC()
{
    17c8:	defffe04 	addi	sp,sp,-8
    17cc:	dfc00115 	stw	ra,4(sp)
    17d0:	df000015 	stw	fp,0(sp)
    17d4:	d839883a 	mov	fp,sp
	//ADAU1761 RESET
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_4_BASE, 1);
    17d8:	00c00044 	movi	r3,1
    17dc:	00810834 	movhi	r2,1056
    17e0:	1086cd04 	addi	r2,r2,6964
    17e4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 1);
    17e8:	00c00044 	movi	r3,1
    17ec:	00810834 	movhi	r2,1056
    17f0:	1086cc04 	addi	r2,r2,6960
    17f4:	10c00035 	stwio	r3,0(r2)

	i2c_setup(0x00, 0xB3);
    17f8:	01402cc4 	movi	r5,179
    17fc:	0009883a 	mov	r4,zero
    1800:	00000b40 	call	b4 <i2c_setup>
	default_download_IC_1();
    1804:	00008780 	call	878 <default_download_IC_1>

	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 0);
    1808:	0007883a 	mov	r3,zero
    180c:	00810834 	movhi	r2,1056
    1810:	1086cc04 	addi	r2,r2,6960
    1814:	10c00035 	stwio	r3,0(r2)
	usleep(1000 * 200);
    1818:	010000f4 	movhi	r4,3
    181c:	21035004 	addi	r4,r4,3392
    1820:	000e6380 	call	e638 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 1);
    1824:	00c00044 	movi	r3,1
    1828:	00810834 	movhi	r2,1056
    182c:	1086cc04 	addi	r2,r2,6960
    1830:	10c00035 	stwio	r3,0(r2)

	default_download_IC_1();
    1834:	00008780 	call	878 <default_download_IC_1>

	return 0;
    1838:	0005883a 	mov	r2,zero
}
    183c:	e037883a 	mov	sp,fp
    1840:	dfc00117 	ldw	ra,4(sp)
    1844:	df000017 	ldw	fp,0(sp)
    1848:	dec00204 	addi	sp,sp,8
    184c:	f800283a 	ret

00001850 <main>:

int main()
{
    1850:	defffa04 	addi	sp,sp,-24
    1854:	dfc00515 	stw	ra,20(sp)
    1858:	df000415 	stw	fp,16(sp)
    185c:	df000404 	addi	fp,sp,16
	printf("Hello from Nios II\n");
    1860:	01000074 	movhi	r4,1
    1864:	21012104 	addi	r4,r4,1156
    1868:	0001cc40 	call	1cc4 <puts>

	//test reset
	IOWR(AVALON_I2S_0_BASE, 0, 0);
    186c:	0007883a 	mov	r3,zero
    1870:	00810834 	movhi	r2,1056
    1874:	1086b804 	addi	r2,r2,6880
    1878:	10c00035 	stwio	r3,0(r2)

	initDMA();
    187c:	00016f00 	call	16f0 <initDMA>
	initCODEC();
    1880:	00017c80 	call	17c8 <initCODEC>

#if 1
    IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_5_BASE, 1);
    1884:	00c00044 	movi	r3,1
    1888:	00810834 	movhi	r2,1056
    188c:	1086c904 	addi	r2,r2,6948
    1890:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE, 0x1);
    1894:	00c00044 	movi	r3,1
    1898:	00810834 	movhi	r2,1056
    189c:	1086c804 	addi	r2,r2,6944
    18a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_2_BASE, 0x01);
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_2_BASE, 0x10);
#endif

    // PMOD2
    IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_3_BASE, 0);
    18a4:	0007883a 	mov	r3,zero
    18a8:	00810834 	movhi	r2,1056
    18ac:	1086c104 	addi	r2,r2,6916
    18b0:	10c00035 	stwio	r3,0(r2)

    // ADC
    IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_6_BASE, 0);
    18b4:	0007883a 	mov	r3,zero
    18b8:	00810834 	movhi	r2,1056
    18bc:	1086bd04 	addi	r2,r2,6900
    18c0:	10c00035 	stwio	r3,0(r2)
#if 0
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 15);
    usleep(1000 * 1000);
#endif

    IOWR_32DIRECT(AVALON_PWM_0_BASE, 0, pwm_counter);
    18c4:	00c00074 	movhi	r3,1
    18c8:	18c29f04 	addi	r3,r3,2684
    18cc:	00810834 	movhi	r2,1056
    18d0:	10869004 	addi	r2,r2,6720
    18d4:	10c00035 	stwio	r3,0(r2)
		printf("Something is wrong...");
		return 0;
	}
#endif

	IOWR(AVALON_PWM_0_BASE, 0b100, 1);
    18d8:	00c00044 	movi	r3,1
    18dc:	00810834 	movhi	r2,1056
    18e0:	10869404 	addi	r2,r2,6736
    18e4:	10c00035 	stwio	r3,0(r2)
	IOWR(AVALON_PWM_0_BASE, 0b101, 1);
    18e8:	00c00044 	movi	r3,1
    18ec:	00810834 	movhi	r2,1056
    18f0:	10869504 	addi	r2,r2,6740
    18f4:	10c00035 	stwio	r3,0(r2)
	IOWR(AVALON_PWM_0_BASE, 0b110, 1);
    18f8:	00c00044 	movi	r3,1
    18fc:	00810834 	movhi	r2,1056
    1900:	10869604 	addi	r2,r2,6744
    1904:	10c00035 	stwio	r3,0(r2)
	IOWR(AVALON_PWM_0_BASE, 0b111, 1);
    1908:	00c00044 	movi	r3,1
    190c:	00810834 	movhi	r2,1056
    1910:	10869704 	addi	r2,r2,6748
    1914:	10c00035 	stwio	r3,0(r2)

	IOWR(AVALON_PWM_0_BASE, 0, 60000);
    1918:	00fa9814 	movui	r3,60000
    191c:	00810834 	movhi	r2,1056
    1920:	10869004 	addi	r2,r2,6720
    1924:	10c00035 	stwio	r3,0(r2)
	IOWR(AVALON_PWM_0_BASE, 1, 60000);
    1928:	00fa9814 	movui	r3,60000
    192c:	00810834 	movhi	r2,1056
    1930:	10869104 	addi	r2,r2,6724
    1934:	10c00035 	stwio	r3,0(r2)
	IOWR(AVALON_PWM_0_BASE, 2, 60000);
    1938:	00fa9814 	movui	r3,60000
    193c:	00810834 	movhi	r2,1056
    1940:	10869204 	addi	r2,r2,6728
    1944:	10c00035 	stwio	r3,0(r2)
	IOWR(AVALON_PWM_0_BASE, 3, 60000);
    1948:	00fa9814 	movui	r3,60000
    194c:	00810834 	movhi	r2,1056
    1950:	10869304 	addi	r2,r2,6732
    1954:	10c00035 	stwio	r3,0(r2)

	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    1958:	d8000015 	stw	zero,0(sp)
    195c:	000f883a 	mov	r7,zero
    1960:	01800034 	movhi	r6,0
    1964:	31849404 	addi	r6,r6,4688
    1968:	01400144 	movi	r5,5
    196c:	0009883a 	mov	r4,zero
    1970:	000ff580 	call	ff58 <alt_ic_isr_register>
						TIMER_0_IRQ,
						isr_timer0,
						NULL,
						NULL);

	alt_u32 count = 5000000 - 1;
    1974:	00801334 	movhi	r2,76
    1978:	1092cfc4 	addi	r2,r2,19263
    197c:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, count & 0xffff);
    1980:	e0bffd17 	ldw	r2,-12(fp)
    1984:	10ffffcc 	andi	r3,r2,65535
    1988:	00810834 	movhi	r2,1056
    198c:	10868a04 	addi	r2,r2,6696
    1990:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, (count >> 16) & 0xffff);
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	1004d43a 	srli	r2,r2,16
    199c:	1007883a 	mov	r3,r2
    19a0:	00810834 	movhi	r2,1056
    19a4:	10868a04 	addi	r2,r2,6696
    19a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    19ac:	00c001c4 	movi	r3,7
    19b0:	00810834 	movhi	r2,1056
    19b4:	10868904 	addi	r2,r2,6692
    19b8:	10c00035 	stwio	r3,0(r2)
									 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
									 ALTERA_AVALON_TIMER_CONTROL_START_MSK);


	//altera_avalon_fifo_clear_event(FIFO_0_IN_CSR_BASE, ALTERA_AVALON_FIFO_EVENT_ALL);
	int fifo_status = altera_avalon_fifo_init(FIFO_RX_BASE,
    19bc:	01c04004 	movi	r7,256
    19c0:	01800044 	movi	r6,1
    19c4:	01400144 	movi	r5,5
    19c8:	01010834 	movhi	r4,1056
    19cc:	2106a804 	addi	r4,r4,6816
    19d0:	000edf40 	call	edf4 <altera_avalon_fifo_init>
    19d4:	e0bffe15 	stw	r2,-8(fp)
#else
											  ALTERA_AVALON_FIFO_IENABLE_ALL,
#endif
											  1,
											  I2S_BUF_SIZE);
	if (fifo_status != ALTERA_AVALON_FIFO_OK)
    19d8:	e0bffe17 	ldw	r2,-8(fp)
    19dc:	10000626 	beq	r2,zero,19f8 <main+0x1a8>
	{
		printf("FIFO init Failed %d\n", fifo_status);
    19e0:	e17ffe17 	ldw	r5,-8(fp)
    19e4:	01000074 	movhi	r4,1
    19e8:	21012604 	addi	r4,r4,1176
    19ec:	0001bc80 	call	1bc8 <printf>
		return 0;
    19f0:	0005883a 	mov	r2,zero
    19f4:	00001906 	br	1a5c <main+0x20c>
	}
	alt_ic_isr_register(FIFO_RX_IRQ_INTERRUPT_CONTROLLER_ID,
    19f8:	d8000015 	stw	zero,0(sp)
    19fc:	000f883a 	mov	r7,zero
    1a00:	01800034 	movhi	r6,0
    1a04:	31858704 	addi	r6,r6,5660
    1a08:	01400084 	movi	r5,2
    1a0c:	0009883a 	mov	r4,zero
    1a10:	000ff580 	call	ff58 <alt_ic_isr_register>
						FIFO_RX_IRQ,
						fifo_callback,
						NULL,
						NULL);

	IOWR(AVALON_I2S_0_BASE, 0, 1);
    1a14:	00c00044 	movi	r3,1
    1a18:	00810834 	movhi	r2,1056
    1a1c:	1086b804 	addi	r2,r2,6880
    1a20:	10c00035 	stwio	r3,0(r2)
		//int key = alt_getchar();
		//alt_printf("\n => %c", key);

		//if (callback_count != callback_count_old)
		{
			int fifo_level = altera_avalon_fifo_read_level(FIFO_RX_BASE);
    1a24:	01010834 	movhi	r4,1056
    1a28:	2106a804 	addi	r4,r4,6816
    1a2c:	000ed7c0 	call	ed7c <altera_avalon_fifo_read_level>
    1a30:	e0bfff15 	stw	r2,-4(fp)
			printf("fifo_level => %d\n", fifo_level);
    1a34:	e17fff17 	ldw	r5,-4(fp)
    1a38:	01000074 	movhi	r4,1
    1a3c:	21012c04 	addi	r4,r4,1200
    1a40:	0001bc80 	call	1bc8 <printf>
		}

		printf("rx_done = %d\n", rx_done);
    1a44:	d0a02717 	ldw	r2,-32612(gp)
    1a48:	100b883a 	mov	r5,r2
    1a4c:	01000074 	movhi	r4,1
    1a50:	21013104 	addi	r4,r4,1220
    1a54:	0001bc80 	call	1bc8 <printf>
		//printf("data = %08X\n", ((int *)rx_buffer)[0]);
	}
    1a58:	003ff206 	br	1a24 <__reset+0xfbf01a24>

	return 0;
}
    1a5c:	e037883a 	mov	sp,fp
    1a60:	dfc00117 	ldw	ra,4(sp)
    1a64:	df000017 	ldw	fp,0(sp)
    1a68:	dec00204 	addi	sp,sp,8
    1a6c:	f800283a 	ret

00001a70 <memset>:
    1a70:	20c000cc 	andi	r3,r4,3
    1a74:	2005883a 	mov	r2,r4
    1a78:	18004426 	beq	r3,zero,1b8c <memset+0x11c>
    1a7c:	31ffffc4 	addi	r7,r6,-1
    1a80:	30004026 	beq	r6,zero,1b84 <memset+0x114>
    1a84:	2813883a 	mov	r9,r5
    1a88:	200d883a 	mov	r6,r4
    1a8c:	2007883a 	mov	r3,r4
    1a90:	00000406 	br	1aa4 <memset+0x34>
    1a94:	3a3fffc4 	addi	r8,r7,-1
    1a98:	31800044 	addi	r6,r6,1
    1a9c:	38003926 	beq	r7,zero,1b84 <memset+0x114>
    1aa0:	400f883a 	mov	r7,r8
    1aa4:	18c00044 	addi	r3,r3,1
    1aa8:	32400005 	stb	r9,0(r6)
    1aac:	1a0000cc 	andi	r8,r3,3
    1ab0:	403ff81e 	bne	r8,zero,1a94 <__reset+0xfbf01a94>
    1ab4:	010000c4 	movi	r4,3
    1ab8:	21c02d2e 	bgeu	r4,r7,1b70 <memset+0x100>
    1abc:	29003fcc 	andi	r4,r5,255
    1ac0:	200c923a 	slli	r6,r4,8
    1ac4:	3108b03a 	or	r4,r6,r4
    1ac8:	200c943a 	slli	r6,r4,16
    1acc:	218cb03a 	or	r6,r4,r6
    1ad0:	010003c4 	movi	r4,15
    1ad4:	21c0182e 	bgeu	r4,r7,1b38 <memset+0xc8>
    1ad8:	3b3ffc04 	addi	r12,r7,-16
    1adc:	6018d13a 	srli	r12,r12,4
    1ae0:	1a000104 	addi	r8,r3,4
    1ae4:	1ac00204 	addi	r11,r3,8
    1ae8:	6008913a 	slli	r4,r12,4
    1aec:	1a800304 	addi	r10,r3,12
    1af0:	1813883a 	mov	r9,r3
    1af4:	21000504 	addi	r4,r4,20
    1af8:	1909883a 	add	r4,r3,r4
    1afc:	49800015 	stw	r6,0(r9)
    1b00:	41800015 	stw	r6,0(r8)
    1b04:	59800015 	stw	r6,0(r11)
    1b08:	51800015 	stw	r6,0(r10)
    1b0c:	42000404 	addi	r8,r8,16
    1b10:	4a400404 	addi	r9,r9,16
    1b14:	5ac00404 	addi	r11,r11,16
    1b18:	52800404 	addi	r10,r10,16
    1b1c:	413ff71e 	bne	r8,r4,1afc <__reset+0xfbf01afc>
    1b20:	63000044 	addi	r12,r12,1
    1b24:	6018913a 	slli	r12,r12,4
    1b28:	39c003cc 	andi	r7,r7,15
    1b2c:	010000c4 	movi	r4,3
    1b30:	1b07883a 	add	r3,r3,r12
    1b34:	21c00e2e 	bgeu	r4,r7,1b70 <memset+0x100>
    1b38:	1813883a 	mov	r9,r3
    1b3c:	3811883a 	mov	r8,r7
    1b40:	010000c4 	movi	r4,3
    1b44:	49800015 	stw	r6,0(r9)
    1b48:	423fff04 	addi	r8,r8,-4
    1b4c:	4a400104 	addi	r9,r9,4
    1b50:	223ffc36 	bltu	r4,r8,1b44 <__reset+0xfbf01b44>
    1b54:	393fff04 	addi	r4,r7,-4
    1b58:	2008d0ba 	srli	r4,r4,2
    1b5c:	39c000cc 	andi	r7,r7,3
    1b60:	21000044 	addi	r4,r4,1
    1b64:	2109883a 	add	r4,r4,r4
    1b68:	2109883a 	add	r4,r4,r4
    1b6c:	1907883a 	add	r3,r3,r4
    1b70:	38000526 	beq	r7,zero,1b88 <memset+0x118>
    1b74:	19cf883a 	add	r7,r3,r7
    1b78:	19400005 	stb	r5,0(r3)
    1b7c:	18c00044 	addi	r3,r3,1
    1b80:	38fffd1e 	bne	r7,r3,1b78 <__reset+0xfbf01b78>
    1b84:	f800283a 	ret
    1b88:	f800283a 	ret
    1b8c:	2007883a 	mov	r3,r4
    1b90:	300f883a 	mov	r7,r6
    1b94:	003fc706 	br	1ab4 <__reset+0xfbf01ab4>

00001b98 <_printf_r>:
    1b98:	defffd04 	addi	sp,sp,-12
    1b9c:	2805883a 	mov	r2,r5
    1ba0:	dfc00015 	stw	ra,0(sp)
    1ba4:	d9800115 	stw	r6,4(sp)
    1ba8:	d9c00215 	stw	r7,8(sp)
    1bac:	21400217 	ldw	r5,8(r4)
    1bb0:	d9c00104 	addi	r7,sp,4
    1bb4:	100d883a 	mov	r6,r2
    1bb8:	0001d700 	call	1d70 <___vfprintf_internal_r>
    1bbc:	dfc00017 	ldw	ra,0(sp)
    1bc0:	dec00304 	addi	sp,sp,12
    1bc4:	f800283a 	ret

00001bc8 <printf>:
    1bc8:	defffc04 	addi	sp,sp,-16
    1bcc:	dfc00015 	stw	ra,0(sp)
    1bd0:	d9400115 	stw	r5,4(sp)
    1bd4:	d9800215 	stw	r6,8(sp)
    1bd8:	d9c00315 	stw	r7,12(sp)
    1bdc:	00800074 	movhi	r2,1
    1be0:	1089e504 	addi	r2,r2,10132
    1be4:	10800017 	ldw	r2,0(r2)
    1be8:	200b883a 	mov	r5,r4
    1bec:	d9800104 	addi	r6,sp,4
    1bf0:	11000217 	ldw	r4,8(r2)
    1bf4:	0003f680 	call	3f68 <__vfprintf_internal>
    1bf8:	dfc00017 	ldw	ra,0(sp)
    1bfc:	dec00404 	addi	sp,sp,16
    1c00:	f800283a 	ret

00001c04 <_puts_r>:
    1c04:	defff604 	addi	sp,sp,-40
    1c08:	dc000715 	stw	r16,28(sp)
    1c0c:	2021883a 	mov	r16,r4
    1c10:	2809883a 	mov	r4,r5
    1c14:	dc400815 	stw	r17,32(sp)
    1c18:	dfc00915 	stw	ra,36(sp)
    1c1c:	2823883a 	mov	r17,r5
    1c20:	0001cd80 	call	1cd8 <strlen>
    1c24:	10c00044 	addi	r3,r2,1
    1c28:	d8800115 	stw	r2,4(sp)
    1c2c:	00800074 	movhi	r2,1
    1c30:	10813504 	addi	r2,r2,1236
    1c34:	d8800215 	stw	r2,8(sp)
    1c38:	00800044 	movi	r2,1
    1c3c:	d8800315 	stw	r2,12(sp)
    1c40:	00800084 	movi	r2,2
    1c44:	dc400015 	stw	r17,0(sp)
    1c48:	d8c00615 	stw	r3,24(sp)
    1c4c:	dec00415 	stw	sp,16(sp)
    1c50:	d8800515 	stw	r2,20(sp)
    1c54:	80000226 	beq	r16,zero,1c60 <_puts_r+0x5c>
    1c58:	80800e17 	ldw	r2,56(r16)
    1c5c:	10001426 	beq	r2,zero,1cb0 <_puts_r+0xac>
    1c60:	81400217 	ldw	r5,8(r16)
    1c64:	2880030b 	ldhu	r2,12(r5)
    1c68:	10c8000c 	andi	r3,r2,8192
    1c6c:	1800061e 	bne	r3,zero,1c88 <_puts_r+0x84>
    1c70:	29001917 	ldw	r4,100(r5)
    1c74:	00f7ffc4 	movi	r3,-8193
    1c78:	10880014 	ori	r2,r2,8192
    1c7c:	20c6703a 	and	r3,r4,r3
    1c80:	2880030d 	sth	r2,12(r5)
    1c84:	28c01915 	stw	r3,100(r5)
    1c88:	d9800404 	addi	r6,sp,16
    1c8c:	8009883a 	mov	r4,r16
    1c90:	00064980 	call	6498 <__sfvwrite_r>
    1c94:	1000091e 	bne	r2,zero,1cbc <_puts_r+0xb8>
    1c98:	00800284 	movi	r2,10
    1c9c:	dfc00917 	ldw	ra,36(sp)
    1ca0:	dc400817 	ldw	r17,32(sp)
    1ca4:	dc000717 	ldw	r16,28(sp)
    1ca8:	dec00a04 	addi	sp,sp,40
    1cac:	f800283a 	ret
    1cb0:	8009883a 	mov	r4,r16
    1cb4:	00060140 	call	6014 <__sinit>
    1cb8:	003fe906 	br	1c60 <__reset+0xfbf01c60>
    1cbc:	00bfffc4 	movi	r2,-1
    1cc0:	003ff606 	br	1c9c <__reset+0xfbf01c9c>

00001cc4 <puts>:
    1cc4:	00800074 	movhi	r2,1
    1cc8:	1089e504 	addi	r2,r2,10132
    1ccc:	200b883a 	mov	r5,r4
    1cd0:	11000017 	ldw	r4,0(r2)
    1cd4:	0001c041 	jmpi	1c04 <_puts_r>

00001cd8 <strlen>:
    1cd8:	208000cc 	andi	r2,r4,3
    1cdc:	10002026 	beq	r2,zero,1d60 <strlen+0x88>
    1ce0:	20800007 	ldb	r2,0(r4)
    1ce4:	10002026 	beq	r2,zero,1d68 <strlen+0x90>
    1ce8:	2005883a 	mov	r2,r4
    1cec:	00000206 	br	1cf8 <strlen+0x20>
    1cf0:	10c00007 	ldb	r3,0(r2)
    1cf4:	18001826 	beq	r3,zero,1d58 <strlen+0x80>
    1cf8:	10800044 	addi	r2,r2,1
    1cfc:	10c000cc 	andi	r3,r2,3
    1d00:	183ffb1e 	bne	r3,zero,1cf0 <__reset+0xfbf01cf0>
    1d04:	10c00017 	ldw	r3,0(r2)
    1d08:	01ffbff4 	movhi	r7,65279
    1d0c:	39ffbfc4 	addi	r7,r7,-257
    1d10:	00ca303a 	nor	r5,zero,r3
    1d14:	01a02074 	movhi	r6,32897
    1d18:	19c7883a 	add	r3,r3,r7
    1d1c:	31a02004 	addi	r6,r6,-32640
    1d20:	1946703a 	and	r3,r3,r5
    1d24:	1986703a 	and	r3,r3,r6
    1d28:	1800091e 	bne	r3,zero,1d50 <strlen+0x78>
    1d2c:	10800104 	addi	r2,r2,4
    1d30:	10c00017 	ldw	r3,0(r2)
    1d34:	19cb883a 	add	r5,r3,r7
    1d38:	00c6303a 	nor	r3,zero,r3
    1d3c:	28c6703a 	and	r3,r5,r3
    1d40:	1986703a 	and	r3,r3,r6
    1d44:	183ff926 	beq	r3,zero,1d2c <__reset+0xfbf01d2c>
    1d48:	00000106 	br	1d50 <strlen+0x78>
    1d4c:	10800044 	addi	r2,r2,1
    1d50:	10c00007 	ldb	r3,0(r2)
    1d54:	183ffd1e 	bne	r3,zero,1d4c <__reset+0xfbf01d4c>
    1d58:	1105c83a 	sub	r2,r2,r4
    1d5c:	f800283a 	ret
    1d60:	2005883a 	mov	r2,r4
    1d64:	003fe706 	br	1d04 <__reset+0xfbf01d04>
    1d68:	0005883a 	mov	r2,zero
    1d6c:	f800283a 	ret

00001d70 <___vfprintf_internal_r>:
    1d70:	deffb804 	addi	sp,sp,-288
    1d74:	dfc04715 	stw	ra,284(sp)
    1d78:	ddc04515 	stw	r23,276(sp)
    1d7c:	dd404315 	stw	r21,268(sp)
    1d80:	d9002c15 	stw	r4,176(sp)
    1d84:	282f883a 	mov	r23,r5
    1d88:	302b883a 	mov	r21,r6
    1d8c:	d9c02d15 	stw	r7,180(sp)
    1d90:	df004615 	stw	fp,280(sp)
    1d94:	dd804415 	stw	r22,272(sp)
    1d98:	dd004215 	stw	r20,264(sp)
    1d9c:	dcc04115 	stw	r19,260(sp)
    1da0:	dc804015 	stw	r18,256(sp)
    1da4:	dc403f15 	stw	r17,252(sp)
    1da8:	dc003e15 	stw	r16,248(sp)
    1dac:	0006b880 	call	6b88 <_localeconv_r>
    1db0:	10800017 	ldw	r2,0(r2)
    1db4:	1009883a 	mov	r4,r2
    1db8:	d8803415 	stw	r2,208(sp)
    1dbc:	0001cd80 	call	1cd8 <strlen>
    1dc0:	d8803715 	stw	r2,220(sp)
    1dc4:	d8802c17 	ldw	r2,176(sp)
    1dc8:	10000226 	beq	r2,zero,1dd4 <___vfprintf_internal_r+0x64>
    1dcc:	10800e17 	ldw	r2,56(r2)
    1dd0:	1000f926 	beq	r2,zero,21b8 <___vfprintf_internal_r+0x448>
    1dd4:	b880030b 	ldhu	r2,12(r23)
    1dd8:	10c8000c 	andi	r3,r2,8192
    1ddc:	1800061e 	bne	r3,zero,1df8 <___vfprintf_internal_r+0x88>
    1de0:	b9001917 	ldw	r4,100(r23)
    1de4:	00f7ffc4 	movi	r3,-8193
    1de8:	10880014 	ori	r2,r2,8192
    1dec:	20c6703a 	and	r3,r4,r3
    1df0:	b880030d 	sth	r2,12(r23)
    1df4:	b8c01915 	stw	r3,100(r23)
    1df8:	10c0020c 	andi	r3,r2,8
    1dfc:	1800c126 	beq	r3,zero,2104 <___vfprintf_internal_r+0x394>
    1e00:	b8c00417 	ldw	r3,16(r23)
    1e04:	1800bf26 	beq	r3,zero,2104 <___vfprintf_internal_r+0x394>
    1e08:	1080068c 	andi	r2,r2,26
    1e0c:	00c00284 	movi	r3,10
    1e10:	10c0c426 	beq	r2,r3,2124 <___vfprintf_internal_r+0x3b4>
    1e14:	d8c00404 	addi	r3,sp,16
    1e18:	05000074 	movhi	r20,1
    1e1c:	d9001e04 	addi	r4,sp,120
    1e20:	a5014684 	addi	r20,r20,1306
    1e24:	d8c01e15 	stw	r3,120(sp)
    1e28:	d8002015 	stw	zero,128(sp)
    1e2c:	d8001f15 	stw	zero,124(sp)
    1e30:	d8003315 	stw	zero,204(sp)
    1e34:	d8003615 	stw	zero,216(sp)
    1e38:	d8003815 	stw	zero,224(sp)
    1e3c:	1811883a 	mov	r8,r3
    1e40:	d8003915 	stw	zero,228(sp)
    1e44:	d8003a15 	stw	zero,232(sp)
    1e48:	d8002f15 	stw	zero,188(sp)
    1e4c:	d9002815 	stw	r4,160(sp)
    1e50:	a8800007 	ldb	r2,0(r21)
    1e54:	10027b26 	beq	r2,zero,2844 <___vfprintf_internal_r+0xad4>
    1e58:	00c00944 	movi	r3,37
    1e5c:	a821883a 	mov	r16,r21
    1e60:	10c0021e 	bne	r2,r3,1e6c <___vfprintf_internal_r+0xfc>
    1e64:	00001406 	br	1eb8 <___vfprintf_internal_r+0x148>
    1e68:	10c00326 	beq	r2,r3,1e78 <___vfprintf_internal_r+0x108>
    1e6c:	84000044 	addi	r16,r16,1
    1e70:	80800007 	ldb	r2,0(r16)
    1e74:	103ffc1e 	bne	r2,zero,1e68 <__reset+0xfbf01e68>
    1e78:	8563c83a 	sub	r17,r16,r21
    1e7c:	88000e26 	beq	r17,zero,1eb8 <___vfprintf_internal_r+0x148>
    1e80:	d8c02017 	ldw	r3,128(sp)
    1e84:	d8801f17 	ldw	r2,124(sp)
    1e88:	45400015 	stw	r21,0(r8)
    1e8c:	1c47883a 	add	r3,r3,r17
    1e90:	10800044 	addi	r2,r2,1
    1e94:	d8c02015 	stw	r3,128(sp)
    1e98:	44400115 	stw	r17,4(r8)
    1e9c:	d8801f15 	stw	r2,124(sp)
    1ea0:	00c001c4 	movi	r3,7
    1ea4:	1880a716 	blt	r3,r2,2144 <___vfprintf_internal_r+0x3d4>
    1ea8:	42000204 	addi	r8,r8,8
    1eac:	d9402f17 	ldw	r5,188(sp)
    1eb0:	2c4b883a 	add	r5,r5,r17
    1eb4:	d9402f15 	stw	r5,188(sp)
    1eb8:	80800007 	ldb	r2,0(r16)
    1ebc:	1000a826 	beq	r2,zero,2160 <___vfprintf_internal_r+0x3f0>
    1ec0:	84400047 	ldb	r17,1(r16)
    1ec4:	00bfffc4 	movi	r2,-1
    1ec8:	85400044 	addi	r21,r16,1
    1ecc:	d8002785 	stb	zero,158(sp)
    1ed0:	0007883a 	mov	r3,zero
    1ed4:	000f883a 	mov	r7,zero
    1ed8:	d8802915 	stw	r2,164(sp)
    1edc:	d8003115 	stw	zero,196(sp)
    1ee0:	0025883a 	mov	r18,zero
    1ee4:	01401604 	movi	r5,88
    1ee8:	01800244 	movi	r6,9
    1eec:	02800a84 	movi	r10,42
    1ef0:	02401b04 	movi	r9,108
    1ef4:	ad400044 	addi	r21,r21,1
    1ef8:	88bff804 	addi	r2,r17,-32
    1efc:	28830436 	bltu	r5,r2,2b10 <___vfprintf_internal_r+0xda0>
    1f00:	100490ba 	slli	r2,r2,2
    1f04:	01000034 	movhi	r4,0
    1f08:	2107c604 	addi	r4,r4,7960
    1f0c:	1105883a 	add	r2,r2,r4
    1f10:	10800017 	ldw	r2,0(r2)
    1f14:	1000683a 	jmp	r2
    1f18:	00002a30 	cmpltui	zero,zero,168
    1f1c:	00002b10 	cmplti	zero,zero,172
    1f20:	00002b10 	cmplti	zero,zero,172
    1f24:	00002a50 	cmplti	zero,zero,169
    1f28:	00002b10 	cmplti	zero,zero,172
    1f2c:	00002b10 	cmplti	zero,zero,172
    1f30:	00002b10 	cmplti	zero,zero,172
    1f34:	00002b10 	cmplti	zero,zero,172
    1f38:	00002b10 	cmplti	zero,zero,172
    1f3c:	00002b10 	cmplti	zero,zero,172
    1f40:	000021c4 	movi	zero,135
    1f44:	0000296c 	andhi	zero,zero,165
    1f48:	00002b10 	cmplti	zero,zero,172
    1f4c:	0000208c 	andi	zero,zero,130
    1f50:	000021ec 	andhi	zero,zero,135
    1f54:	00002b10 	cmplti	zero,zero,172
    1f58:	0000222c 	andhi	zero,zero,136
    1f5c:	00002238 	rdprs	zero,zero,136
    1f60:	00002238 	rdprs	zero,zero,136
    1f64:	00002238 	rdprs	zero,zero,136
    1f68:	00002238 	rdprs	zero,zero,136
    1f6c:	00002238 	rdprs	zero,zero,136
    1f70:	00002238 	rdprs	zero,zero,136
    1f74:	00002238 	rdprs	zero,zero,136
    1f78:	00002238 	rdprs	zero,zero,136
    1f7c:	00002238 	rdprs	zero,zero,136
    1f80:	00002b10 	cmplti	zero,zero,172
    1f84:	00002b10 	cmplti	zero,zero,172
    1f88:	00002b10 	cmplti	zero,zero,172
    1f8c:	00002b10 	cmplti	zero,zero,172
    1f90:	00002b10 	cmplti	zero,zero,172
    1f94:	00002b10 	cmplti	zero,zero,172
    1f98:	00002b10 	cmplti	zero,zero,172
    1f9c:	00002b10 	cmplti	zero,zero,172
    1fa0:	00002b10 	cmplti	zero,zero,172
    1fa4:	00002b10 	cmplti	zero,zero,172
    1fa8:	0000226c 	andhi	zero,zero,137
    1fac:	00002328 	cmpgeui	zero,zero,140
    1fb0:	00002b10 	cmplti	zero,zero,172
    1fb4:	00002328 	cmpgeui	zero,zero,140
    1fb8:	00002b10 	cmplti	zero,zero,172
    1fbc:	00002b10 	cmplti	zero,zero,172
    1fc0:	00002b10 	cmplti	zero,zero,172
    1fc4:	00002b10 	cmplti	zero,zero,172
    1fc8:	000023c8 	cmpgei	zero,zero,143
    1fcc:	00002b10 	cmplti	zero,zero,172
    1fd0:	00002b10 	cmplti	zero,zero,172
    1fd4:	000023d4 	movui	zero,143
    1fd8:	00002b10 	cmplti	zero,zero,172
    1fdc:	00002b10 	cmplti	zero,zero,172
    1fe0:	00002b10 	cmplti	zero,zero,172
    1fe4:	00002b10 	cmplti	zero,zero,172
    1fe8:	00002b10 	cmplti	zero,zero,172
    1fec:	0000284c 	andi	zero,zero,161
    1ff0:	00002b10 	cmplti	zero,zero,172
    1ff4:	00002b10 	cmplti	zero,zero,172
    1ff8:	000028ac 	andhi	zero,zero,162
    1ffc:	00002b10 	cmplti	zero,zero,172
    2000:	00002b10 	cmplti	zero,zero,172
    2004:	00002b10 	cmplti	zero,zero,172
    2008:	00002b10 	cmplti	zero,zero,172
    200c:	00002b10 	cmplti	zero,zero,172
    2010:	00002b10 	cmplti	zero,zero,172
    2014:	00002b10 	cmplti	zero,zero,172
    2018:	00002b10 	cmplti	zero,zero,172
    201c:	00002b10 	cmplti	zero,zero,172
    2020:	00002b10 	cmplti	zero,zero,172
    2024:	00002abc 	xorhi	zero,zero,170
    2028:	00002a5c 	xori	zero,zero,169
    202c:	00002328 	cmpgeui	zero,zero,140
    2030:	00002328 	cmpgeui	zero,zero,140
    2034:	00002328 	cmpgeui	zero,zero,140
    2038:	00002a6c 	andhi	zero,zero,169
    203c:	00002a5c 	xori	zero,zero,169
    2040:	00002b10 	cmplti	zero,zero,172
    2044:	00002b10 	cmplti	zero,zero,172
    2048:	00002a78 	rdprs	zero,zero,169
    204c:	00002b10 	cmplti	zero,zero,172
    2050:	00002a88 	cmpgei	zero,zero,170
    2054:	0000295c 	xori	zero,zero,165
    2058:	00002098 	cmpnei	zero,zero,130
    205c:	0000297c 	xorhi	zero,zero,165
    2060:	00002b10 	cmplti	zero,zero,172
    2064:	00002988 	cmpgei	zero,zero,166
    2068:	00002b10 	cmplti	zero,zero,172
    206c:	000029e4 	muli	zero,zero,167
    2070:	00002b10 	cmplti	zero,zero,172
    2074:	00002b10 	cmplti	zero,zero,172
    2078:	000029f4 	movhi	zero,167
    207c:	d9003117 	ldw	r4,196(sp)
    2080:	d8802d15 	stw	r2,180(sp)
    2084:	0109c83a 	sub	r4,zero,r4
    2088:	d9003115 	stw	r4,196(sp)
    208c:	94800114 	ori	r18,r18,4
    2090:	ac400007 	ldb	r17,0(r21)
    2094:	003f9706 	br	1ef4 <__reset+0xfbf01ef4>
    2098:	00800c04 	movi	r2,48
    209c:	d9002d17 	ldw	r4,180(sp)
    20a0:	d9402917 	ldw	r5,164(sp)
    20a4:	d8802705 	stb	r2,156(sp)
    20a8:	00801e04 	movi	r2,120
    20ac:	d8802745 	stb	r2,157(sp)
    20b0:	d8002785 	stb	zero,158(sp)
    20b4:	20c00104 	addi	r3,r4,4
    20b8:	24c00017 	ldw	r19,0(r4)
    20bc:	002d883a 	mov	r22,zero
    20c0:	90800094 	ori	r2,r18,2
    20c4:	28029a16 	blt	r5,zero,2b30 <___vfprintf_internal_r+0xdc0>
    20c8:	00bfdfc4 	movi	r2,-129
    20cc:	90a4703a 	and	r18,r18,r2
    20d0:	d8c02d15 	stw	r3,180(sp)
    20d4:	94800094 	ori	r18,r18,2
    20d8:	9802871e 	bne	r19,zero,2af8 <___vfprintf_internal_r+0xd88>
    20dc:	00800074 	movhi	r2,1
    20e0:	10813f04 	addi	r2,r2,1276
    20e4:	d8803915 	stw	r2,228(sp)
    20e8:	04401e04 	movi	r17,120
    20ec:	d8802917 	ldw	r2,164(sp)
    20f0:	0039883a 	mov	fp,zero
    20f4:	1001e926 	beq	r2,zero,289c <___vfprintf_internal_r+0xb2c>
    20f8:	0027883a 	mov	r19,zero
    20fc:	002d883a 	mov	r22,zero
    2100:	00020506 	br	2918 <___vfprintf_internal_r+0xba8>
    2104:	d9002c17 	ldw	r4,176(sp)
    2108:	b80b883a 	mov	r5,r23
    210c:	00040400 	call	4040 <__swsetup_r>
    2110:	1005ac1e 	bne	r2,zero,37c4 <___vfprintf_internal_r+0x1a54>
    2114:	b880030b 	ldhu	r2,12(r23)
    2118:	00c00284 	movi	r3,10
    211c:	1080068c 	andi	r2,r2,26
    2120:	10ff3c1e 	bne	r2,r3,1e14 <__reset+0xfbf01e14>
    2124:	b880038f 	ldh	r2,14(r23)
    2128:	103f3a16 	blt	r2,zero,1e14 <__reset+0xfbf01e14>
    212c:	d9c02d17 	ldw	r7,180(sp)
    2130:	d9002c17 	ldw	r4,176(sp)
    2134:	a80d883a 	mov	r6,r21
    2138:	b80b883a 	mov	r5,r23
    213c:	0003f840 	call	3f84 <__sbprintf>
    2140:	00001106 	br	2188 <___vfprintf_internal_r+0x418>
    2144:	d9002c17 	ldw	r4,176(sp)
    2148:	d9801e04 	addi	r6,sp,120
    214c:	b80b883a 	mov	r5,r23
    2150:	00092440 	call	9244 <__sprint_r>
    2154:	1000081e 	bne	r2,zero,2178 <___vfprintf_internal_r+0x408>
    2158:	da000404 	addi	r8,sp,16
    215c:	003f5306 	br	1eac <__reset+0xfbf01eac>
    2160:	d8802017 	ldw	r2,128(sp)
    2164:	10000426 	beq	r2,zero,2178 <___vfprintf_internal_r+0x408>
    2168:	d9002c17 	ldw	r4,176(sp)
    216c:	d9801e04 	addi	r6,sp,120
    2170:	b80b883a 	mov	r5,r23
    2174:	00092440 	call	9244 <__sprint_r>
    2178:	b880030b 	ldhu	r2,12(r23)
    217c:	1080100c 	andi	r2,r2,64
    2180:	1005901e 	bne	r2,zero,37c4 <___vfprintf_internal_r+0x1a54>
    2184:	d8802f17 	ldw	r2,188(sp)
    2188:	dfc04717 	ldw	ra,284(sp)
    218c:	df004617 	ldw	fp,280(sp)
    2190:	ddc04517 	ldw	r23,276(sp)
    2194:	dd804417 	ldw	r22,272(sp)
    2198:	dd404317 	ldw	r21,268(sp)
    219c:	dd004217 	ldw	r20,264(sp)
    21a0:	dcc04117 	ldw	r19,260(sp)
    21a4:	dc804017 	ldw	r18,256(sp)
    21a8:	dc403f17 	ldw	r17,252(sp)
    21ac:	dc003e17 	ldw	r16,248(sp)
    21b0:	dec04804 	addi	sp,sp,288
    21b4:	f800283a 	ret
    21b8:	d9002c17 	ldw	r4,176(sp)
    21bc:	00060140 	call	6014 <__sinit>
    21c0:	003f0406 	br	1dd4 <__reset+0xfbf01dd4>
    21c4:	d8802d17 	ldw	r2,180(sp)
    21c8:	d9002d17 	ldw	r4,180(sp)
    21cc:	10800017 	ldw	r2,0(r2)
    21d0:	d8803115 	stw	r2,196(sp)
    21d4:	20800104 	addi	r2,r4,4
    21d8:	d9003117 	ldw	r4,196(sp)
    21dc:	203fa716 	blt	r4,zero,207c <__reset+0xfbf0207c>
    21e0:	d8802d15 	stw	r2,180(sp)
    21e4:	ac400007 	ldb	r17,0(r21)
    21e8:	003f4206 	br	1ef4 <__reset+0xfbf01ef4>
    21ec:	ac400007 	ldb	r17,0(r21)
    21f0:	aac00044 	addi	r11,r21,1
    21f4:	8a872826 	beq	r17,r10,3e98 <___vfprintf_internal_r+0x2128>
    21f8:	88bff404 	addi	r2,r17,-48
    21fc:	0009883a 	mov	r4,zero
    2200:	30867d36 	bltu	r6,r2,3bf8 <___vfprintf_internal_r+0x1e88>
    2204:	5c400007 	ldb	r17,0(r11)
    2208:	210002a4 	muli	r4,r4,10
    220c:	5d400044 	addi	r21,r11,1
    2210:	a817883a 	mov	r11,r21
    2214:	2089883a 	add	r4,r4,r2
    2218:	88bff404 	addi	r2,r17,-48
    221c:	30bff92e 	bgeu	r6,r2,2204 <__reset+0xfbf02204>
    2220:	2005c916 	blt	r4,zero,3948 <___vfprintf_internal_r+0x1bd8>
    2224:	d9002915 	stw	r4,164(sp)
    2228:	003f3306 	br	1ef8 <__reset+0xfbf01ef8>
    222c:	94802014 	ori	r18,r18,128
    2230:	ac400007 	ldb	r17,0(r21)
    2234:	003f2f06 	br	1ef4 <__reset+0xfbf01ef4>
    2238:	a809883a 	mov	r4,r21
    223c:	d8003115 	stw	zero,196(sp)
    2240:	88bff404 	addi	r2,r17,-48
    2244:	0017883a 	mov	r11,zero
    2248:	24400007 	ldb	r17,0(r4)
    224c:	5ac002a4 	muli	r11,r11,10
    2250:	ad400044 	addi	r21,r21,1
    2254:	a809883a 	mov	r4,r21
    2258:	12d7883a 	add	r11,r2,r11
    225c:	88bff404 	addi	r2,r17,-48
    2260:	30bff92e 	bgeu	r6,r2,2248 <__reset+0xfbf02248>
    2264:	dac03115 	stw	r11,196(sp)
    2268:	003f2306 	br	1ef8 <__reset+0xfbf01ef8>
    226c:	18c03fcc 	andi	r3,r3,255
    2270:	18072b1e 	bne	r3,zero,3f20 <___vfprintf_internal_r+0x21b0>
    2274:	94800414 	ori	r18,r18,16
    2278:	9080080c 	andi	r2,r18,32
    227c:	10037b26 	beq	r2,zero,306c <___vfprintf_internal_r+0x12fc>
    2280:	d9402d17 	ldw	r5,180(sp)
    2284:	28800117 	ldw	r2,4(r5)
    2288:	2cc00017 	ldw	r19,0(r5)
    228c:	29400204 	addi	r5,r5,8
    2290:	d9402d15 	stw	r5,180(sp)
    2294:	102d883a 	mov	r22,r2
    2298:	10044b16 	blt	r2,zero,33c8 <___vfprintf_internal_r+0x1658>
    229c:	d9402917 	ldw	r5,164(sp)
    22a0:	df002783 	ldbu	fp,158(sp)
    22a4:	2803bc16 	blt	r5,zero,3198 <___vfprintf_internal_r+0x1428>
    22a8:	00ffdfc4 	movi	r3,-129
    22ac:	9d84b03a 	or	r2,r19,r22
    22b0:	90e4703a 	and	r18,r18,r3
    22b4:	10017726 	beq	r2,zero,2894 <___vfprintf_internal_r+0xb24>
    22b8:	b0038326 	beq	r22,zero,30c8 <___vfprintf_internal_r+0x1358>
    22bc:	dc402a15 	stw	r17,168(sp)
    22c0:	dc001e04 	addi	r16,sp,120
    22c4:	b023883a 	mov	r17,r22
    22c8:	402d883a 	mov	r22,r8
    22cc:	9809883a 	mov	r4,r19
    22d0:	880b883a 	mov	r5,r17
    22d4:	01800284 	movi	r6,10
    22d8:	000f883a 	mov	r7,zero
    22dc:	000b63c0 	call	b63c <__umoddi3>
    22e0:	10800c04 	addi	r2,r2,48
    22e4:	843fffc4 	addi	r16,r16,-1
    22e8:	9809883a 	mov	r4,r19
    22ec:	880b883a 	mov	r5,r17
    22f0:	80800005 	stb	r2,0(r16)
    22f4:	01800284 	movi	r6,10
    22f8:	000f883a 	mov	r7,zero
    22fc:	000b0c40 	call	b0c4 <__udivdi3>
    2300:	1027883a 	mov	r19,r2
    2304:	10c4b03a 	or	r2,r2,r3
    2308:	1823883a 	mov	r17,r3
    230c:	103fef1e 	bne	r2,zero,22cc <__reset+0xfbf022cc>
    2310:	d8c02817 	ldw	r3,160(sp)
    2314:	dc402a17 	ldw	r17,168(sp)
    2318:	b011883a 	mov	r8,r22
    231c:	1c07c83a 	sub	r3,r3,r16
    2320:	d8c02e15 	stw	r3,184(sp)
    2324:	00005906 	br	248c <___vfprintf_internal_r+0x71c>
    2328:	18c03fcc 	andi	r3,r3,255
    232c:	1806fa1e 	bne	r3,zero,3f18 <___vfprintf_internal_r+0x21a8>
    2330:	9080020c 	andi	r2,r18,8
    2334:	10048a26 	beq	r2,zero,3560 <___vfprintf_internal_r+0x17f0>
    2338:	d8c02d17 	ldw	r3,180(sp)
    233c:	d9002d17 	ldw	r4,180(sp)
    2340:	d9402d17 	ldw	r5,180(sp)
    2344:	18c00017 	ldw	r3,0(r3)
    2348:	21000117 	ldw	r4,4(r4)
    234c:	29400204 	addi	r5,r5,8
    2350:	d8c03615 	stw	r3,216(sp)
    2354:	d9003815 	stw	r4,224(sp)
    2358:	d9402d15 	stw	r5,180(sp)
    235c:	d9003617 	ldw	r4,216(sp)
    2360:	d9403817 	ldw	r5,224(sp)
    2364:	da003d15 	stw	r8,244(sp)
    2368:	04000044 	movi	r16,1
    236c:	0008e680 	call	8e68 <__fpclassifyd>
    2370:	da003d17 	ldw	r8,244(sp)
    2374:	14041f1e 	bne	r2,r16,33f4 <___vfprintf_internal_r+0x1684>
    2378:	d9003617 	ldw	r4,216(sp)
    237c:	d9403817 	ldw	r5,224(sp)
    2380:	000d883a 	mov	r6,zero
    2384:	000f883a 	mov	r7,zero
    2388:	000d0200 	call	d020 <__ledf2>
    238c:	da003d17 	ldw	r8,244(sp)
    2390:	1005be16 	blt	r2,zero,3a8c <___vfprintf_internal_r+0x1d1c>
    2394:	df002783 	ldbu	fp,158(sp)
    2398:	008011c4 	movi	r2,71
    239c:	1445330e 	bge	r2,r17,386c <___vfprintf_internal_r+0x1afc>
    23a0:	04000074 	movhi	r16,1
    23a4:	84013704 	addi	r16,r16,1244
    23a8:	00c000c4 	movi	r3,3
    23ac:	00bfdfc4 	movi	r2,-129
    23b0:	d8c02a15 	stw	r3,168(sp)
    23b4:	90a4703a 	and	r18,r18,r2
    23b8:	d8c02e15 	stw	r3,184(sp)
    23bc:	d8002915 	stw	zero,164(sp)
    23c0:	d8003215 	stw	zero,200(sp)
    23c4:	00003706 	br	24a4 <___vfprintf_internal_r+0x734>
    23c8:	94800214 	ori	r18,r18,8
    23cc:	ac400007 	ldb	r17,0(r21)
    23d0:	003ec806 	br	1ef4 <__reset+0xfbf01ef4>
    23d4:	18c03fcc 	andi	r3,r3,255
    23d8:	1806db1e 	bne	r3,zero,3f48 <___vfprintf_internal_r+0x21d8>
    23dc:	94800414 	ori	r18,r18,16
    23e0:	9080080c 	andi	r2,r18,32
    23e4:	1002d826 	beq	r2,zero,2f48 <___vfprintf_internal_r+0x11d8>
    23e8:	d9402d17 	ldw	r5,180(sp)
    23ec:	d8c02917 	ldw	r3,164(sp)
    23f0:	d8002785 	stb	zero,158(sp)
    23f4:	28800204 	addi	r2,r5,8
    23f8:	2cc00017 	ldw	r19,0(r5)
    23fc:	2d800117 	ldw	r22,4(r5)
    2400:	18048f16 	blt	r3,zero,3640 <___vfprintf_internal_r+0x18d0>
    2404:	013fdfc4 	movi	r4,-129
    2408:	9d86b03a 	or	r3,r19,r22
    240c:	d8802d15 	stw	r2,180(sp)
    2410:	9124703a 	and	r18,r18,r4
    2414:	1802d91e 	bne	r3,zero,2f7c <___vfprintf_internal_r+0x120c>
    2418:	d8c02917 	ldw	r3,164(sp)
    241c:	0039883a 	mov	fp,zero
    2420:	1805c326 	beq	r3,zero,3b30 <___vfprintf_internal_r+0x1dc0>
    2424:	0027883a 	mov	r19,zero
    2428:	002d883a 	mov	r22,zero
    242c:	dc001e04 	addi	r16,sp,120
    2430:	9806d0fa 	srli	r3,r19,3
    2434:	b008977a 	slli	r4,r22,29
    2438:	b02cd0fa 	srli	r22,r22,3
    243c:	9cc001cc 	andi	r19,r19,7
    2440:	98800c04 	addi	r2,r19,48
    2444:	843fffc4 	addi	r16,r16,-1
    2448:	20e6b03a 	or	r19,r4,r3
    244c:	80800005 	stb	r2,0(r16)
    2450:	9d86b03a 	or	r3,r19,r22
    2454:	183ff61e 	bne	r3,zero,2430 <__reset+0xfbf02430>
    2458:	90c0004c 	andi	r3,r18,1
    245c:	18013b26 	beq	r3,zero,294c <___vfprintf_internal_r+0xbdc>
    2460:	10803fcc 	andi	r2,r2,255
    2464:	1080201c 	xori	r2,r2,128
    2468:	10bfe004 	addi	r2,r2,-128
    246c:	00c00c04 	movi	r3,48
    2470:	10c13626 	beq	r2,r3,294c <___vfprintf_internal_r+0xbdc>
    2474:	80ffffc5 	stb	r3,-1(r16)
    2478:	d8c02817 	ldw	r3,160(sp)
    247c:	80bfffc4 	addi	r2,r16,-1
    2480:	1021883a 	mov	r16,r2
    2484:	1887c83a 	sub	r3,r3,r2
    2488:	d8c02e15 	stw	r3,184(sp)
    248c:	d8802e17 	ldw	r2,184(sp)
    2490:	d9002917 	ldw	r4,164(sp)
    2494:	1100010e 	bge	r2,r4,249c <___vfprintf_internal_r+0x72c>
    2498:	2005883a 	mov	r2,r4
    249c:	d8802a15 	stw	r2,168(sp)
    24a0:	d8003215 	stw	zero,200(sp)
    24a4:	e7003fcc 	andi	fp,fp,255
    24a8:	e700201c 	xori	fp,fp,128
    24ac:	e73fe004 	addi	fp,fp,-128
    24b0:	e0000326 	beq	fp,zero,24c0 <___vfprintf_internal_r+0x750>
    24b4:	d8c02a17 	ldw	r3,168(sp)
    24b8:	18c00044 	addi	r3,r3,1
    24bc:	d8c02a15 	stw	r3,168(sp)
    24c0:	90c0008c 	andi	r3,r18,2
    24c4:	d8c02b15 	stw	r3,172(sp)
    24c8:	18000326 	beq	r3,zero,24d8 <___vfprintf_internal_r+0x768>
    24cc:	d8c02a17 	ldw	r3,168(sp)
    24d0:	18c00084 	addi	r3,r3,2
    24d4:	d8c02a15 	stw	r3,168(sp)
    24d8:	90c0210c 	andi	r3,r18,132
    24dc:	d8c03015 	stw	r3,192(sp)
    24e0:	1801a31e 	bne	r3,zero,2b70 <___vfprintf_internal_r+0xe00>
    24e4:	d9003117 	ldw	r4,196(sp)
    24e8:	d8c02a17 	ldw	r3,168(sp)
    24ec:	20e7c83a 	sub	r19,r4,r3
    24f0:	04c19f0e 	bge	zero,r19,2b70 <___vfprintf_internal_r+0xe00>
    24f4:	02400404 	movi	r9,16
    24f8:	d8c02017 	ldw	r3,128(sp)
    24fc:	d8801f17 	ldw	r2,124(sp)
    2500:	4cc50d0e 	bge	r9,r19,3938 <___vfprintf_internal_r+0x1bc8>
    2504:	01400074 	movhi	r5,1
    2508:	29414a84 	addi	r5,r5,1322
    250c:	dc403b15 	stw	r17,236(sp)
    2510:	d9403515 	stw	r5,212(sp)
    2514:	9823883a 	mov	r17,r19
    2518:	482d883a 	mov	r22,r9
    251c:	9027883a 	mov	r19,r18
    2520:	070001c4 	movi	fp,7
    2524:	8025883a 	mov	r18,r16
    2528:	dc002c17 	ldw	r16,176(sp)
    252c:	00000306 	br	253c <___vfprintf_internal_r+0x7cc>
    2530:	8c7ffc04 	addi	r17,r17,-16
    2534:	42000204 	addi	r8,r8,8
    2538:	b440130e 	bge	r22,r17,2588 <___vfprintf_internal_r+0x818>
    253c:	01000074 	movhi	r4,1
    2540:	18c00404 	addi	r3,r3,16
    2544:	10800044 	addi	r2,r2,1
    2548:	21014a84 	addi	r4,r4,1322
    254c:	41000015 	stw	r4,0(r8)
    2550:	45800115 	stw	r22,4(r8)
    2554:	d8c02015 	stw	r3,128(sp)
    2558:	d8801f15 	stw	r2,124(sp)
    255c:	e0bff40e 	bge	fp,r2,2530 <__reset+0xfbf02530>
    2560:	d9801e04 	addi	r6,sp,120
    2564:	b80b883a 	mov	r5,r23
    2568:	8009883a 	mov	r4,r16
    256c:	00092440 	call	9244 <__sprint_r>
    2570:	103f011e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2574:	8c7ffc04 	addi	r17,r17,-16
    2578:	d8c02017 	ldw	r3,128(sp)
    257c:	d8801f17 	ldw	r2,124(sp)
    2580:	da000404 	addi	r8,sp,16
    2584:	b47fed16 	blt	r22,r17,253c <__reset+0xfbf0253c>
    2588:	9021883a 	mov	r16,r18
    258c:	9825883a 	mov	r18,r19
    2590:	8827883a 	mov	r19,r17
    2594:	dc403b17 	ldw	r17,236(sp)
    2598:	d9403517 	ldw	r5,212(sp)
    259c:	98c7883a 	add	r3,r19,r3
    25a0:	10800044 	addi	r2,r2,1
    25a4:	41400015 	stw	r5,0(r8)
    25a8:	44c00115 	stw	r19,4(r8)
    25ac:	d8c02015 	stw	r3,128(sp)
    25b0:	d8801f15 	stw	r2,124(sp)
    25b4:	010001c4 	movi	r4,7
    25b8:	2082a316 	blt	r4,r2,3048 <___vfprintf_internal_r+0x12d8>
    25bc:	df002787 	ldb	fp,158(sp)
    25c0:	42000204 	addi	r8,r8,8
    25c4:	e0000c26 	beq	fp,zero,25f8 <___vfprintf_internal_r+0x888>
    25c8:	d8801f17 	ldw	r2,124(sp)
    25cc:	d9002784 	addi	r4,sp,158
    25d0:	18c00044 	addi	r3,r3,1
    25d4:	10800044 	addi	r2,r2,1
    25d8:	41000015 	stw	r4,0(r8)
    25dc:	01000044 	movi	r4,1
    25e0:	41000115 	stw	r4,4(r8)
    25e4:	d8c02015 	stw	r3,128(sp)
    25e8:	d8801f15 	stw	r2,124(sp)
    25ec:	010001c4 	movi	r4,7
    25f0:	20823c16 	blt	r4,r2,2ee4 <___vfprintf_internal_r+0x1174>
    25f4:	42000204 	addi	r8,r8,8
    25f8:	d8802b17 	ldw	r2,172(sp)
    25fc:	10000c26 	beq	r2,zero,2630 <___vfprintf_internal_r+0x8c0>
    2600:	d8801f17 	ldw	r2,124(sp)
    2604:	d9002704 	addi	r4,sp,156
    2608:	18c00084 	addi	r3,r3,2
    260c:	10800044 	addi	r2,r2,1
    2610:	41000015 	stw	r4,0(r8)
    2614:	01000084 	movi	r4,2
    2618:	41000115 	stw	r4,4(r8)
    261c:	d8c02015 	stw	r3,128(sp)
    2620:	d8801f15 	stw	r2,124(sp)
    2624:	010001c4 	movi	r4,7
    2628:	20823616 	blt	r4,r2,2f04 <___vfprintf_internal_r+0x1194>
    262c:	42000204 	addi	r8,r8,8
    2630:	d9003017 	ldw	r4,192(sp)
    2634:	00802004 	movi	r2,128
    2638:	20819926 	beq	r4,r2,2ca0 <___vfprintf_internal_r+0xf30>
    263c:	d9402917 	ldw	r5,164(sp)
    2640:	d8802e17 	ldw	r2,184(sp)
    2644:	28adc83a 	sub	r22,r5,r2
    2648:	0580310e 	bge	zero,r22,2710 <___vfprintf_internal_r+0x9a0>
    264c:	07000404 	movi	fp,16
    2650:	d8801f17 	ldw	r2,124(sp)
    2654:	e584140e 	bge	fp,r22,36a8 <___vfprintf_internal_r+0x1938>
    2658:	01400074 	movhi	r5,1
    265c:	29414684 	addi	r5,r5,1306
    2660:	dc402915 	stw	r17,164(sp)
    2664:	d9402b15 	stw	r5,172(sp)
    2668:	b023883a 	mov	r17,r22
    266c:	04c001c4 	movi	r19,7
    2670:	a82d883a 	mov	r22,r21
    2674:	902b883a 	mov	r21,r18
    2678:	8025883a 	mov	r18,r16
    267c:	dc002c17 	ldw	r16,176(sp)
    2680:	00000306 	br	2690 <___vfprintf_internal_r+0x920>
    2684:	8c7ffc04 	addi	r17,r17,-16
    2688:	42000204 	addi	r8,r8,8
    268c:	e440110e 	bge	fp,r17,26d4 <___vfprintf_internal_r+0x964>
    2690:	18c00404 	addi	r3,r3,16
    2694:	10800044 	addi	r2,r2,1
    2698:	45000015 	stw	r20,0(r8)
    269c:	47000115 	stw	fp,4(r8)
    26a0:	d8c02015 	stw	r3,128(sp)
    26a4:	d8801f15 	stw	r2,124(sp)
    26a8:	98bff60e 	bge	r19,r2,2684 <__reset+0xfbf02684>
    26ac:	d9801e04 	addi	r6,sp,120
    26b0:	b80b883a 	mov	r5,r23
    26b4:	8009883a 	mov	r4,r16
    26b8:	00092440 	call	9244 <__sprint_r>
    26bc:	103eae1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    26c0:	8c7ffc04 	addi	r17,r17,-16
    26c4:	d8c02017 	ldw	r3,128(sp)
    26c8:	d8801f17 	ldw	r2,124(sp)
    26cc:	da000404 	addi	r8,sp,16
    26d0:	e47fef16 	blt	fp,r17,2690 <__reset+0xfbf02690>
    26d4:	9021883a 	mov	r16,r18
    26d8:	a825883a 	mov	r18,r21
    26dc:	b02b883a 	mov	r21,r22
    26e0:	882d883a 	mov	r22,r17
    26e4:	dc402917 	ldw	r17,164(sp)
    26e8:	d9002b17 	ldw	r4,172(sp)
    26ec:	1d87883a 	add	r3,r3,r22
    26f0:	10800044 	addi	r2,r2,1
    26f4:	41000015 	stw	r4,0(r8)
    26f8:	45800115 	stw	r22,4(r8)
    26fc:	d8c02015 	stw	r3,128(sp)
    2700:	d8801f15 	stw	r2,124(sp)
    2704:	010001c4 	movi	r4,7
    2708:	2081ee16 	blt	r4,r2,2ec4 <___vfprintf_internal_r+0x1154>
    270c:	42000204 	addi	r8,r8,8
    2710:	9080400c 	andi	r2,r18,256
    2714:	1001181e 	bne	r2,zero,2b78 <___vfprintf_internal_r+0xe08>
    2718:	d9402e17 	ldw	r5,184(sp)
    271c:	d8801f17 	ldw	r2,124(sp)
    2720:	44000015 	stw	r16,0(r8)
    2724:	1947883a 	add	r3,r3,r5
    2728:	10800044 	addi	r2,r2,1
    272c:	41400115 	stw	r5,4(r8)
    2730:	d8c02015 	stw	r3,128(sp)
    2734:	d8801f15 	stw	r2,124(sp)
    2738:	010001c4 	movi	r4,7
    273c:	2081d316 	blt	r4,r2,2e8c <___vfprintf_internal_r+0x111c>
    2740:	42000204 	addi	r8,r8,8
    2744:	9480010c 	andi	r18,r18,4
    2748:	90003226 	beq	r18,zero,2814 <___vfprintf_internal_r+0xaa4>
    274c:	d9403117 	ldw	r5,196(sp)
    2750:	d8802a17 	ldw	r2,168(sp)
    2754:	28a1c83a 	sub	r16,r5,r2
    2758:	04002e0e 	bge	zero,r16,2814 <___vfprintf_internal_r+0xaa4>
    275c:	04400404 	movi	r17,16
    2760:	d8801f17 	ldw	r2,124(sp)
    2764:	8c04a20e 	bge	r17,r16,39f0 <___vfprintf_internal_r+0x1c80>
    2768:	01400074 	movhi	r5,1
    276c:	29414a84 	addi	r5,r5,1322
    2770:	d9403515 	stw	r5,212(sp)
    2774:	048001c4 	movi	r18,7
    2778:	dcc02c17 	ldw	r19,176(sp)
    277c:	00000306 	br	278c <___vfprintf_internal_r+0xa1c>
    2780:	843ffc04 	addi	r16,r16,-16
    2784:	42000204 	addi	r8,r8,8
    2788:	8c00130e 	bge	r17,r16,27d8 <___vfprintf_internal_r+0xa68>
    278c:	01000074 	movhi	r4,1
    2790:	18c00404 	addi	r3,r3,16
    2794:	10800044 	addi	r2,r2,1
    2798:	21014a84 	addi	r4,r4,1322
    279c:	41000015 	stw	r4,0(r8)
    27a0:	44400115 	stw	r17,4(r8)
    27a4:	d8c02015 	stw	r3,128(sp)
    27a8:	d8801f15 	stw	r2,124(sp)
    27ac:	90bff40e 	bge	r18,r2,2780 <__reset+0xfbf02780>
    27b0:	d9801e04 	addi	r6,sp,120
    27b4:	b80b883a 	mov	r5,r23
    27b8:	9809883a 	mov	r4,r19
    27bc:	00092440 	call	9244 <__sprint_r>
    27c0:	103e6d1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    27c4:	843ffc04 	addi	r16,r16,-16
    27c8:	d8c02017 	ldw	r3,128(sp)
    27cc:	d8801f17 	ldw	r2,124(sp)
    27d0:	da000404 	addi	r8,sp,16
    27d4:	8c3fed16 	blt	r17,r16,278c <__reset+0xfbf0278c>
    27d8:	d9403517 	ldw	r5,212(sp)
    27dc:	1c07883a 	add	r3,r3,r16
    27e0:	10800044 	addi	r2,r2,1
    27e4:	41400015 	stw	r5,0(r8)
    27e8:	44000115 	stw	r16,4(r8)
    27ec:	d8c02015 	stw	r3,128(sp)
    27f0:	d8801f15 	stw	r2,124(sp)
    27f4:	010001c4 	movi	r4,7
    27f8:	2080060e 	bge	r4,r2,2814 <___vfprintf_internal_r+0xaa4>
    27fc:	d9002c17 	ldw	r4,176(sp)
    2800:	d9801e04 	addi	r6,sp,120
    2804:	b80b883a 	mov	r5,r23
    2808:	00092440 	call	9244 <__sprint_r>
    280c:	103e5a1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2810:	d8c02017 	ldw	r3,128(sp)
    2814:	d8803117 	ldw	r2,196(sp)
    2818:	d9002a17 	ldw	r4,168(sp)
    281c:	1100010e 	bge	r2,r4,2824 <___vfprintf_internal_r+0xab4>
    2820:	2005883a 	mov	r2,r4
    2824:	d9402f17 	ldw	r5,188(sp)
    2828:	288b883a 	add	r5,r5,r2
    282c:	d9402f15 	stw	r5,188(sp)
    2830:	18019e1e 	bne	r3,zero,2eac <___vfprintf_internal_r+0x113c>
    2834:	a8800007 	ldb	r2,0(r21)
    2838:	d8001f15 	stw	zero,124(sp)
    283c:	da000404 	addi	r8,sp,16
    2840:	103d851e 	bne	r2,zero,1e58 <__reset+0xfbf01e58>
    2844:	a821883a 	mov	r16,r21
    2848:	003d9b06 	br	1eb8 <__reset+0xfbf01eb8>
    284c:	18c03fcc 	andi	r3,r3,255
    2850:	1805c11e 	bne	r3,zero,3f58 <___vfprintf_internal_r+0x21e8>
    2854:	94800414 	ori	r18,r18,16
    2858:	9080080c 	andi	r2,r18,32
    285c:	10020c26 	beq	r2,zero,3090 <___vfprintf_internal_r+0x1320>
    2860:	d8802d17 	ldw	r2,180(sp)
    2864:	d9002917 	ldw	r4,164(sp)
    2868:	d8002785 	stb	zero,158(sp)
    286c:	10c00204 	addi	r3,r2,8
    2870:	14c00017 	ldw	r19,0(r2)
    2874:	15800117 	ldw	r22,4(r2)
    2878:	20040f16 	blt	r4,zero,38b8 <___vfprintf_internal_r+0x1b48>
    287c:	013fdfc4 	movi	r4,-129
    2880:	9d84b03a 	or	r2,r19,r22
    2884:	d8c02d15 	stw	r3,180(sp)
    2888:	9124703a 	and	r18,r18,r4
    288c:	0039883a 	mov	fp,zero
    2890:	103e891e 	bne	r2,zero,22b8 <__reset+0xfbf022b8>
    2894:	d9002917 	ldw	r4,164(sp)
    2898:	2002c11e 	bne	r4,zero,33a0 <___vfprintf_internal_r+0x1630>
    289c:	d8002915 	stw	zero,164(sp)
    28a0:	d8002e15 	stw	zero,184(sp)
    28a4:	dc001e04 	addi	r16,sp,120
    28a8:	003ef806 	br	248c <__reset+0xfbf0248c>
    28ac:	18c03fcc 	andi	r3,r3,255
    28b0:	18059d1e 	bne	r3,zero,3f28 <___vfprintf_internal_r+0x21b8>
    28b4:	01400074 	movhi	r5,1
    28b8:	29413a04 	addi	r5,r5,1256
    28bc:	d9403915 	stw	r5,228(sp)
    28c0:	9080080c 	andi	r2,r18,32
    28c4:	10005226 	beq	r2,zero,2a10 <___vfprintf_internal_r+0xca0>
    28c8:	d8802d17 	ldw	r2,180(sp)
    28cc:	14c00017 	ldw	r19,0(r2)
    28d0:	15800117 	ldw	r22,4(r2)
    28d4:	10800204 	addi	r2,r2,8
    28d8:	d8802d15 	stw	r2,180(sp)
    28dc:	9080004c 	andi	r2,r18,1
    28e0:	10019026 	beq	r2,zero,2f24 <___vfprintf_internal_r+0x11b4>
    28e4:	9d84b03a 	or	r2,r19,r22
    28e8:	10036926 	beq	r2,zero,3690 <___vfprintf_internal_r+0x1920>
    28ec:	d8c02917 	ldw	r3,164(sp)
    28f0:	00800c04 	movi	r2,48
    28f4:	d8802705 	stb	r2,156(sp)
    28f8:	dc402745 	stb	r17,157(sp)
    28fc:	d8002785 	stb	zero,158(sp)
    2900:	90800094 	ori	r2,r18,2
    2904:	18045d16 	blt	r3,zero,3a7c <___vfprintf_internal_r+0x1d0c>
    2908:	00bfdfc4 	movi	r2,-129
    290c:	90a4703a 	and	r18,r18,r2
    2910:	94800094 	ori	r18,r18,2
    2914:	0039883a 	mov	fp,zero
    2918:	d9003917 	ldw	r4,228(sp)
    291c:	dc001e04 	addi	r16,sp,120
    2920:	988003cc 	andi	r2,r19,15
    2924:	b006973a 	slli	r3,r22,28
    2928:	2085883a 	add	r2,r4,r2
    292c:	9826d13a 	srli	r19,r19,4
    2930:	10800003 	ldbu	r2,0(r2)
    2934:	b02cd13a 	srli	r22,r22,4
    2938:	843fffc4 	addi	r16,r16,-1
    293c:	1ce6b03a 	or	r19,r3,r19
    2940:	80800005 	stb	r2,0(r16)
    2944:	9d84b03a 	or	r2,r19,r22
    2948:	103ff51e 	bne	r2,zero,2920 <__reset+0xfbf02920>
    294c:	d8c02817 	ldw	r3,160(sp)
    2950:	1c07c83a 	sub	r3,r3,r16
    2954:	d8c02e15 	stw	r3,184(sp)
    2958:	003ecc06 	br	248c <__reset+0xfbf0248c>
    295c:	18c03fcc 	andi	r3,r3,255
    2960:	183e9f26 	beq	r3,zero,23e0 <__reset+0xfbf023e0>
    2964:	d9c02785 	stb	r7,158(sp)
    2968:	003e9d06 	br	23e0 <__reset+0xfbf023e0>
    296c:	00c00044 	movi	r3,1
    2970:	01c00ac4 	movi	r7,43
    2974:	ac400007 	ldb	r17,0(r21)
    2978:	003d5e06 	br	1ef4 <__reset+0xfbf01ef4>
    297c:	94800814 	ori	r18,r18,32
    2980:	ac400007 	ldb	r17,0(r21)
    2984:	003d5b06 	br	1ef4 <__reset+0xfbf01ef4>
    2988:	d8c02d17 	ldw	r3,180(sp)
    298c:	d8002785 	stb	zero,158(sp)
    2990:	1c000017 	ldw	r16,0(r3)
    2994:	1cc00104 	addi	r19,r3,4
    2998:	80041926 	beq	r16,zero,3a00 <___vfprintf_internal_r+0x1c90>
    299c:	d9002917 	ldw	r4,164(sp)
    29a0:	2003d016 	blt	r4,zero,38e4 <___vfprintf_internal_r+0x1b74>
    29a4:	200d883a 	mov	r6,r4
    29a8:	000b883a 	mov	r5,zero
    29ac:	8009883a 	mov	r4,r16
    29b0:	da003d15 	stw	r8,244(sp)
    29b4:	00075800 	call	7580 <memchr>
    29b8:	da003d17 	ldw	r8,244(sp)
    29bc:	10045426 	beq	r2,zero,3b10 <___vfprintf_internal_r+0x1da0>
    29c0:	1405c83a 	sub	r2,r2,r16
    29c4:	d8802e15 	stw	r2,184(sp)
    29c8:	1003cc16 	blt	r2,zero,38fc <___vfprintf_internal_r+0x1b8c>
    29cc:	df002783 	ldbu	fp,158(sp)
    29d0:	d8802a15 	stw	r2,168(sp)
    29d4:	dcc02d15 	stw	r19,180(sp)
    29d8:	d8002915 	stw	zero,164(sp)
    29dc:	d8003215 	stw	zero,200(sp)
    29e0:	003eb006 	br	24a4 <__reset+0xfbf024a4>
    29e4:	18c03fcc 	andi	r3,r3,255
    29e8:	183f9b26 	beq	r3,zero,2858 <__reset+0xfbf02858>
    29ec:	d9c02785 	stb	r7,158(sp)
    29f0:	003f9906 	br	2858 <__reset+0xfbf02858>
    29f4:	18c03fcc 	andi	r3,r3,255
    29f8:	1805551e 	bne	r3,zero,3f50 <___vfprintf_internal_r+0x21e0>
    29fc:	01400074 	movhi	r5,1
    2a00:	29413f04 	addi	r5,r5,1276
    2a04:	d9403915 	stw	r5,228(sp)
    2a08:	9080080c 	andi	r2,r18,32
    2a0c:	103fae1e 	bne	r2,zero,28c8 <__reset+0xfbf028c8>
    2a10:	9080040c 	andi	r2,r18,16
    2a14:	1002de26 	beq	r2,zero,3590 <___vfprintf_internal_r+0x1820>
    2a18:	d8c02d17 	ldw	r3,180(sp)
    2a1c:	002d883a 	mov	r22,zero
    2a20:	1cc00017 	ldw	r19,0(r3)
    2a24:	18c00104 	addi	r3,r3,4
    2a28:	d8c02d15 	stw	r3,180(sp)
    2a2c:	003fab06 	br	28dc <__reset+0xfbf028dc>
    2a30:	38803fcc 	andi	r2,r7,255
    2a34:	1080201c 	xori	r2,r2,128
    2a38:	10bfe004 	addi	r2,r2,-128
    2a3c:	1002d21e 	bne	r2,zero,3588 <___vfprintf_internal_r+0x1818>
    2a40:	00c00044 	movi	r3,1
    2a44:	01c00804 	movi	r7,32
    2a48:	ac400007 	ldb	r17,0(r21)
    2a4c:	003d2906 	br	1ef4 <__reset+0xfbf01ef4>
    2a50:	94800054 	ori	r18,r18,1
    2a54:	ac400007 	ldb	r17,0(r21)
    2a58:	003d2606 	br	1ef4 <__reset+0xfbf01ef4>
    2a5c:	18c03fcc 	andi	r3,r3,255
    2a60:	183e0526 	beq	r3,zero,2278 <__reset+0xfbf02278>
    2a64:	d9c02785 	stb	r7,158(sp)
    2a68:	003e0306 	br	2278 <__reset+0xfbf02278>
    2a6c:	94801014 	ori	r18,r18,64
    2a70:	ac400007 	ldb	r17,0(r21)
    2a74:	003d1f06 	br	1ef4 <__reset+0xfbf01ef4>
    2a78:	ac400007 	ldb	r17,0(r21)
    2a7c:	8a438726 	beq	r17,r9,389c <___vfprintf_internal_r+0x1b2c>
    2a80:	94800414 	ori	r18,r18,16
    2a84:	003d1b06 	br	1ef4 <__reset+0xfbf01ef4>
    2a88:	18c03fcc 	andi	r3,r3,255
    2a8c:	1805341e 	bne	r3,zero,3f60 <___vfprintf_internal_r+0x21f0>
    2a90:	9080080c 	andi	r2,r18,32
    2a94:	1002cd26 	beq	r2,zero,35cc <___vfprintf_internal_r+0x185c>
    2a98:	d9402d17 	ldw	r5,180(sp)
    2a9c:	d9002f17 	ldw	r4,188(sp)
    2aa0:	28800017 	ldw	r2,0(r5)
    2aa4:	2007d7fa 	srai	r3,r4,31
    2aa8:	29400104 	addi	r5,r5,4
    2aac:	d9402d15 	stw	r5,180(sp)
    2ab0:	11000015 	stw	r4,0(r2)
    2ab4:	10c00115 	stw	r3,4(r2)
    2ab8:	003ce506 	br	1e50 <__reset+0xfbf01e50>
    2abc:	d8c02d17 	ldw	r3,180(sp)
    2ac0:	d9002d17 	ldw	r4,180(sp)
    2ac4:	d8002785 	stb	zero,158(sp)
    2ac8:	18800017 	ldw	r2,0(r3)
    2acc:	21000104 	addi	r4,r4,4
    2ad0:	00c00044 	movi	r3,1
    2ad4:	d8c02a15 	stw	r3,168(sp)
    2ad8:	d8801405 	stb	r2,80(sp)
    2adc:	d9002d15 	stw	r4,180(sp)
    2ae0:	d8c02e15 	stw	r3,184(sp)
    2ae4:	d8002915 	stw	zero,164(sp)
    2ae8:	d8003215 	stw	zero,200(sp)
    2aec:	dc001404 	addi	r16,sp,80
    2af0:	0039883a 	mov	fp,zero
    2af4:	003e7206 	br	24c0 <__reset+0xfbf024c0>
    2af8:	01000074 	movhi	r4,1
    2afc:	21013f04 	addi	r4,r4,1276
    2b00:	0039883a 	mov	fp,zero
    2b04:	d9003915 	stw	r4,228(sp)
    2b08:	04401e04 	movi	r17,120
    2b0c:	003f8206 	br	2918 <__reset+0xfbf02918>
    2b10:	18c03fcc 	andi	r3,r3,255
    2b14:	1805061e 	bne	r3,zero,3f30 <___vfprintf_internal_r+0x21c0>
    2b18:	883d9126 	beq	r17,zero,2160 <__reset+0xfbf02160>
    2b1c:	00c00044 	movi	r3,1
    2b20:	d8c02a15 	stw	r3,168(sp)
    2b24:	dc401405 	stb	r17,80(sp)
    2b28:	d8002785 	stb	zero,158(sp)
    2b2c:	003fec06 	br	2ae0 <__reset+0xfbf02ae0>
    2b30:	01400074 	movhi	r5,1
    2b34:	29413f04 	addi	r5,r5,1276
    2b38:	d9403915 	stw	r5,228(sp)
    2b3c:	d8c02d15 	stw	r3,180(sp)
    2b40:	1025883a 	mov	r18,r2
    2b44:	04401e04 	movi	r17,120
    2b48:	9d84b03a 	or	r2,r19,r22
    2b4c:	1000fc1e 	bne	r2,zero,2f40 <___vfprintf_internal_r+0x11d0>
    2b50:	0039883a 	mov	fp,zero
    2b54:	00800084 	movi	r2,2
    2b58:	10803fcc 	andi	r2,r2,255
    2b5c:	00c00044 	movi	r3,1
    2b60:	10c20f26 	beq	r2,r3,33a0 <___vfprintf_internal_r+0x1630>
    2b64:	00c00084 	movi	r3,2
    2b68:	10fd6326 	beq	r2,r3,20f8 <__reset+0xfbf020f8>
    2b6c:	003e2d06 	br	2424 <__reset+0xfbf02424>
    2b70:	d8c02017 	ldw	r3,128(sp)
    2b74:	003e9306 	br	25c4 <__reset+0xfbf025c4>
    2b78:	00801944 	movi	r2,101
    2b7c:	14407e0e 	bge	r2,r17,2d78 <___vfprintf_internal_r+0x1008>
    2b80:	d9003617 	ldw	r4,216(sp)
    2b84:	d9403817 	ldw	r5,224(sp)
    2b88:	000d883a 	mov	r6,zero
    2b8c:	000f883a 	mov	r7,zero
    2b90:	d8c03c15 	stw	r3,240(sp)
    2b94:	da003d15 	stw	r8,244(sp)
    2b98:	000cebc0 	call	cebc <__eqdf2>
    2b9c:	d8c03c17 	ldw	r3,240(sp)
    2ba0:	da003d17 	ldw	r8,244(sp)
    2ba4:	1000f71e 	bne	r2,zero,2f84 <___vfprintf_internal_r+0x1214>
    2ba8:	d8801f17 	ldw	r2,124(sp)
    2bac:	01000074 	movhi	r4,1
    2bb0:	21014604 	addi	r4,r4,1304
    2bb4:	18c00044 	addi	r3,r3,1
    2bb8:	10800044 	addi	r2,r2,1
    2bbc:	41000015 	stw	r4,0(r8)
    2bc0:	01000044 	movi	r4,1
    2bc4:	41000115 	stw	r4,4(r8)
    2bc8:	d8c02015 	stw	r3,128(sp)
    2bcc:	d8801f15 	stw	r2,124(sp)
    2bd0:	010001c4 	movi	r4,7
    2bd4:	2082b816 	blt	r4,r2,36b8 <___vfprintf_internal_r+0x1948>
    2bd8:	42000204 	addi	r8,r8,8
    2bdc:	d8802617 	ldw	r2,152(sp)
    2be0:	d9403317 	ldw	r5,204(sp)
    2be4:	11400216 	blt	r2,r5,2bf0 <___vfprintf_internal_r+0xe80>
    2be8:	9080004c 	andi	r2,r18,1
    2bec:	103ed526 	beq	r2,zero,2744 <__reset+0xfbf02744>
    2bf0:	d8803717 	ldw	r2,220(sp)
    2bf4:	d9003417 	ldw	r4,208(sp)
    2bf8:	d9403717 	ldw	r5,220(sp)
    2bfc:	1887883a 	add	r3,r3,r2
    2c00:	d8801f17 	ldw	r2,124(sp)
    2c04:	41000015 	stw	r4,0(r8)
    2c08:	41400115 	stw	r5,4(r8)
    2c0c:	10800044 	addi	r2,r2,1
    2c10:	d8c02015 	stw	r3,128(sp)
    2c14:	d8801f15 	stw	r2,124(sp)
    2c18:	010001c4 	movi	r4,7
    2c1c:	20832916 	blt	r4,r2,38c4 <___vfprintf_internal_r+0x1b54>
    2c20:	42000204 	addi	r8,r8,8
    2c24:	d8803317 	ldw	r2,204(sp)
    2c28:	143fffc4 	addi	r16,r2,-1
    2c2c:	043ec50e 	bge	zero,r16,2744 <__reset+0xfbf02744>
    2c30:	04400404 	movi	r17,16
    2c34:	d8801f17 	ldw	r2,124(sp)
    2c38:	8c00880e 	bge	r17,r16,2e5c <___vfprintf_internal_r+0x10ec>
    2c3c:	01400074 	movhi	r5,1
    2c40:	29414684 	addi	r5,r5,1306
    2c44:	d9402b15 	stw	r5,172(sp)
    2c48:	058001c4 	movi	r22,7
    2c4c:	dcc02c17 	ldw	r19,176(sp)
    2c50:	00000306 	br	2c60 <___vfprintf_internal_r+0xef0>
    2c54:	42000204 	addi	r8,r8,8
    2c58:	843ffc04 	addi	r16,r16,-16
    2c5c:	8c00820e 	bge	r17,r16,2e68 <___vfprintf_internal_r+0x10f8>
    2c60:	18c00404 	addi	r3,r3,16
    2c64:	10800044 	addi	r2,r2,1
    2c68:	45000015 	stw	r20,0(r8)
    2c6c:	44400115 	stw	r17,4(r8)
    2c70:	d8c02015 	stw	r3,128(sp)
    2c74:	d8801f15 	stw	r2,124(sp)
    2c78:	b0bff60e 	bge	r22,r2,2c54 <__reset+0xfbf02c54>
    2c7c:	d9801e04 	addi	r6,sp,120
    2c80:	b80b883a 	mov	r5,r23
    2c84:	9809883a 	mov	r4,r19
    2c88:	00092440 	call	9244 <__sprint_r>
    2c8c:	103d3a1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2c90:	d8c02017 	ldw	r3,128(sp)
    2c94:	d8801f17 	ldw	r2,124(sp)
    2c98:	da000404 	addi	r8,sp,16
    2c9c:	003fee06 	br	2c58 <__reset+0xfbf02c58>
    2ca0:	d9403117 	ldw	r5,196(sp)
    2ca4:	d8802a17 	ldw	r2,168(sp)
    2ca8:	28adc83a 	sub	r22,r5,r2
    2cac:	05be630e 	bge	zero,r22,263c <__reset+0xfbf0263c>
    2cb0:	07000404 	movi	fp,16
    2cb4:	d8801f17 	ldw	r2,124(sp)
    2cb8:	e5838f0e 	bge	fp,r22,3af8 <___vfprintf_internal_r+0x1d88>
    2cbc:	01400074 	movhi	r5,1
    2cc0:	29414684 	addi	r5,r5,1306
    2cc4:	dc403015 	stw	r17,192(sp)
    2cc8:	d9402b15 	stw	r5,172(sp)
    2ccc:	b023883a 	mov	r17,r22
    2cd0:	04c001c4 	movi	r19,7
    2cd4:	a82d883a 	mov	r22,r21
    2cd8:	902b883a 	mov	r21,r18
    2cdc:	8025883a 	mov	r18,r16
    2ce0:	dc002c17 	ldw	r16,176(sp)
    2ce4:	00000306 	br	2cf4 <___vfprintf_internal_r+0xf84>
    2ce8:	8c7ffc04 	addi	r17,r17,-16
    2cec:	42000204 	addi	r8,r8,8
    2cf0:	e440110e 	bge	fp,r17,2d38 <___vfprintf_internal_r+0xfc8>
    2cf4:	18c00404 	addi	r3,r3,16
    2cf8:	10800044 	addi	r2,r2,1
    2cfc:	45000015 	stw	r20,0(r8)
    2d00:	47000115 	stw	fp,4(r8)
    2d04:	d8c02015 	stw	r3,128(sp)
    2d08:	d8801f15 	stw	r2,124(sp)
    2d0c:	98bff60e 	bge	r19,r2,2ce8 <__reset+0xfbf02ce8>
    2d10:	d9801e04 	addi	r6,sp,120
    2d14:	b80b883a 	mov	r5,r23
    2d18:	8009883a 	mov	r4,r16
    2d1c:	00092440 	call	9244 <__sprint_r>
    2d20:	103d151e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2d24:	8c7ffc04 	addi	r17,r17,-16
    2d28:	d8c02017 	ldw	r3,128(sp)
    2d2c:	d8801f17 	ldw	r2,124(sp)
    2d30:	da000404 	addi	r8,sp,16
    2d34:	e47fef16 	blt	fp,r17,2cf4 <__reset+0xfbf02cf4>
    2d38:	9021883a 	mov	r16,r18
    2d3c:	a825883a 	mov	r18,r21
    2d40:	b02b883a 	mov	r21,r22
    2d44:	882d883a 	mov	r22,r17
    2d48:	dc403017 	ldw	r17,192(sp)
    2d4c:	d9002b17 	ldw	r4,172(sp)
    2d50:	1d87883a 	add	r3,r3,r22
    2d54:	10800044 	addi	r2,r2,1
    2d58:	41000015 	stw	r4,0(r8)
    2d5c:	45800115 	stw	r22,4(r8)
    2d60:	d8c02015 	stw	r3,128(sp)
    2d64:	d8801f15 	stw	r2,124(sp)
    2d68:	010001c4 	movi	r4,7
    2d6c:	20818e16 	blt	r4,r2,33a8 <___vfprintf_internal_r+0x1638>
    2d70:	42000204 	addi	r8,r8,8
    2d74:	003e3106 	br	263c <__reset+0xfbf0263c>
    2d78:	d9403317 	ldw	r5,204(sp)
    2d7c:	00800044 	movi	r2,1
    2d80:	18c00044 	addi	r3,r3,1
    2d84:	1141530e 	bge	r2,r5,32d4 <___vfprintf_internal_r+0x1564>
    2d88:	dc401f17 	ldw	r17,124(sp)
    2d8c:	00800044 	movi	r2,1
    2d90:	40800115 	stw	r2,4(r8)
    2d94:	8c400044 	addi	r17,r17,1
    2d98:	44000015 	stw	r16,0(r8)
    2d9c:	d8c02015 	stw	r3,128(sp)
    2da0:	dc401f15 	stw	r17,124(sp)
    2da4:	008001c4 	movi	r2,7
    2da8:	14416b16 	blt	r2,r17,3358 <___vfprintf_internal_r+0x15e8>
    2dac:	42000204 	addi	r8,r8,8
    2db0:	d8803717 	ldw	r2,220(sp)
    2db4:	d9003417 	ldw	r4,208(sp)
    2db8:	8c400044 	addi	r17,r17,1
    2dbc:	10c7883a 	add	r3,r2,r3
    2dc0:	40800115 	stw	r2,4(r8)
    2dc4:	41000015 	stw	r4,0(r8)
    2dc8:	d8c02015 	stw	r3,128(sp)
    2dcc:	dc401f15 	stw	r17,124(sp)
    2dd0:	008001c4 	movi	r2,7
    2dd4:	14416916 	blt	r2,r17,337c <___vfprintf_internal_r+0x160c>
    2dd8:	45800204 	addi	r22,r8,8
    2ddc:	d9003617 	ldw	r4,216(sp)
    2de0:	d9403817 	ldw	r5,224(sp)
    2de4:	000d883a 	mov	r6,zero
    2de8:	000f883a 	mov	r7,zero
    2dec:	d8c03c15 	stw	r3,240(sp)
    2df0:	000cebc0 	call	cebc <__eqdf2>
    2df4:	d8c03c17 	ldw	r3,240(sp)
    2df8:	1000bc26 	beq	r2,zero,30ec <___vfprintf_internal_r+0x137c>
    2dfc:	d9403317 	ldw	r5,204(sp)
    2e00:	84000044 	addi	r16,r16,1
    2e04:	8c400044 	addi	r17,r17,1
    2e08:	28bfffc4 	addi	r2,r5,-1
    2e0c:	1887883a 	add	r3,r3,r2
    2e10:	b0800115 	stw	r2,4(r22)
    2e14:	b4000015 	stw	r16,0(r22)
    2e18:	d8c02015 	stw	r3,128(sp)
    2e1c:	dc401f15 	stw	r17,124(sp)
    2e20:	008001c4 	movi	r2,7
    2e24:	14414316 	blt	r2,r17,3334 <___vfprintf_internal_r+0x15c4>
    2e28:	b5800204 	addi	r22,r22,8
    2e2c:	d9003a17 	ldw	r4,232(sp)
    2e30:	df0022c4 	addi	fp,sp,139
    2e34:	8c400044 	addi	r17,r17,1
    2e38:	20c7883a 	add	r3,r4,r3
    2e3c:	b7000015 	stw	fp,0(r22)
    2e40:	b1000115 	stw	r4,4(r22)
    2e44:	d8c02015 	stw	r3,128(sp)
    2e48:	dc401f15 	stw	r17,124(sp)
    2e4c:	008001c4 	movi	r2,7
    2e50:	14400e16 	blt	r2,r17,2e8c <___vfprintf_internal_r+0x111c>
    2e54:	b2000204 	addi	r8,r22,8
    2e58:	003e3a06 	br	2744 <__reset+0xfbf02744>
    2e5c:	01000074 	movhi	r4,1
    2e60:	21014684 	addi	r4,r4,1306
    2e64:	d9002b15 	stw	r4,172(sp)
    2e68:	d9002b17 	ldw	r4,172(sp)
    2e6c:	1c07883a 	add	r3,r3,r16
    2e70:	44000115 	stw	r16,4(r8)
    2e74:	41000015 	stw	r4,0(r8)
    2e78:	10800044 	addi	r2,r2,1
    2e7c:	d8c02015 	stw	r3,128(sp)
    2e80:	d8801f15 	stw	r2,124(sp)
    2e84:	010001c4 	movi	r4,7
    2e88:	20be2d0e 	bge	r4,r2,2740 <__reset+0xfbf02740>
    2e8c:	d9002c17 	ldw	r4,176(sp)
    2e90:	d9801e04 	addi	r6,sp,120
    2e94:	b80b883a 	mov	r5,r23
    2e98:	00092440 	call	9244 <__sprint_r>
    2e9c:	103cb61e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2ea0:	d8c02017 	ldw	r3,128(sp)
    2ea4:	da000404 	addi	r8,sp,16
    2ea8:	003e2606 	br	2744 <__reset+0xfbf02744>
    2eac:	d9002c17 	ldw	r4,176(sp)
    2eb0:	d9801e04 	addi	r6,sp,120
    2eb4:	b80b883a 	mov	r5,r23
    2eb8:	00092440 	call	9244 <__sprint_r>
    2ebc:	103e5d26 	beq	r2,zero,2834 <__reset+0xfbf02834>
    2ec0:	003cad06 	br	2178 <__reset+0xfbf02178>
    2ec4:	d9002c17 	ldw	r4,176(sp)
    2ec8:	d9801e04 	addi	r6,sp,120
    2ecc:	b80b883a 	mov	r5,r23
    2ed0:	00092440 	call	9244 <__sprint_r>
    2ed4:	103ca81e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2ed8:	d8c02017 	ldw	r3,128(sp)
    2edc:	da000404 	addi	r8,sp,16
    2ee0:	003e0b06 	br	2710 <__reset+0xfbf02710>
    2ee4:	d9002c17 	ldw	r4,176(sp)
    2ee8:	d9801e04 	addi	r6,sp,120
    2eec:	b80b883a 	mov	r5,r23
    2ef0:	00092440 	call	9244 <__sprint_r>
    2ef4:	103ca01e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2ef8:	d8c02017 	ldw	r3,128(sp)
    2efc:	da000404 	addi	r8,sp,16
    2f00:	003dbd06 	br	25f8 <__reset+0xfbf025f8>
    2f04:	d9002c17 	ldw	r4,176(sp)
    2f08:	d9801e04 	addi	r6,sp,120
    2f0c:	b80b883a 	mov	r5,r23
    2f10:	00092440 	call	9244 <__sprint_r>
    2f14:	103c981e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    2f18:	d8c02017 	ldw	r3,128(sp)
    2f1c:	da000404 	addi	r8,sp,16
    2f20:	003dc306 	br	2630 <__reset+0xfbf02630>
    2f24:	d8802917 	ldw	r2,164(sp)
    2f28:	d8002785 	stb	zero,158(sp)
    2f2c:	103f0616 	blt	r2,zero,2b48 <__reset+0xfbf02b48>
    2f30:	00ffdfc4 	movi	r3,-129
    2f34:	9d84b03a 	or	r2,r19,r22
    2f38:	90e4703a 	and	r18,r18,r3
    2f3c:	103c6b26 	beq	r2,zero,20ec <__reset+0xfbf020ec>
    2f40:	0039883a 	mov	fp,zero
    2f44:	003e7406 	br	2918 <__reset+0xfbf02918>
    2f48:	9080040c 	andi	r2,r18,16
    2f4c:	1001b326 	beq	r2,zero,361c <___vfprintf_internal_r+0x18ac>
    2f50:	d9002d17 	ldw	r4,180(sp)
    2f54:	d9402917 	ldw	r5,164(sp)
    2f58:	d8002785 	stb	zero,158(sp)
    2f5c:	20800104 	addi	r2,r4,4
    2f60:	24c00017 	ldw	r19,0(r4)
    2f64:	002d883a 	mov	r22,zero
    2f68:	2801b516 	blt	r5,zero,3640 <___vfprintf_internal_r+0x18d0>
    2f6c:	00ffdfc4 	movi	r3,-129
    2f70:	d8802d15 	stw	r2,180(sp)
    2f74:	90e4703a 	and	r18,r18,r3
    2f78:	983d2726 	beq	r19,zero,2418 <__reset+0xfbf02418>
    2f7c:	0039883a 	mov	fp,zero
    2f80:	003d2a06 	br	242c <__reset+0xfbf0242c>
    2f84:	dc402617 	ldw	r17,152(sp)
    2f88:	0441d30e 	bge	zero,r17,36d8 <___vfprintf_internal_r+0x1968>
    2f8c:	dc403217 	ldw	r17,200(sp)
    2f90:	d8803317 	ldw	r2,204(sp)
    2f94:	1440010e 	bge	r2,r17,2f9c <___vfprintf_internal_r+0x122c>
    2f98:	1023883a 	mov	r17,r2
    2f9c:	04400a0e 	bge	zero,r17,2fc8 <___vfprintf_internal_r+0x1258>
    2fa0:	d8801f17 	ldw	r2,124(sp)
    2fa4:	1c47883a 	add	r3,r3,r17
    2fa8:	44000015 	stw	r16,0(r8)
    2fac:	10800044 	addi	r2,r2,1
    2fb0:	44400115 	stw	r17,4(r8)
    2fb4:	d8c02015 	stw	r3,128(sp)
    2fb8:	d8801f15 	stw	r2,124(sp)
    2fbc:	010001c4 	movi	r4,7
    2fc0:	20826516 	blt	r4,r2,3958 <___vfprintf_internal_r+0x1be8>
    2fc4:	42000204 	addi	r8,r8,8
    2fc8:	88026116 	blt	r17,zero,3950 <___vfprintf_internal_r+0x1be0>
    2fcc:	d9003217 	ldw	r4,200(sp)
    2fd0:	2463c83a 	sub	r17,r4,r17
    2fd4:	04407b0e 	bge	zero,r17,31c4 <___vfprintf_internal_r+0x1454>
    2fd8:	05800404 	movi	r22,16
    2fdc:	d8801f17 	ldw	r2,124(sp)
    2fe0:	b4419d0e 	bge	r22,r17,3658 <___vfprintf_internal_r+0x18e8>
    2fe4:	01000074 	movhi	r4,1
    2fe8:	21014684 	addi	r4,r4,1306
    2fec:	d9002b15 	stw	r4,172(sp)
    2ff0:	070001c4 	movi	fp,7
    2ff4:	dcc02c17 	ldw	r19,176(sp)
    2ff8:	00000306 	br	3008 <___vfprintf_internal_r+0x1298>
    2ffc:	42000204 	addi	r8,r8,8
    3000:	8c7ffc04 	addi	r17,r17,-16
    3004:	b441970e 	bge	r22,r17,3664 <___vfprintf_internal_r+0x18f4>
    3008:	18c00404 	addi	r3,r3,16
    300c:	10800044 	addi	r2,r2,1
    3010:	45000015 	stw	r20,0(r8)
    3014:	45800115 	stw	r22,4(r8)
    3018:	d8c02015 	stw	r3,128(sp)
    301c:	d8801f15 	stw	r2,124(sp)
    3020:	e0bff60e 	bge	fp,r2,2ffc <__reset+0xfbf02ffc>
    3024:	d9801e04 	addi	r6,sp,120
    3028:	b80b883a 	mov	r5,r23
    302c:	9809883a 	mov	r4,r19
    3030:	00092440 	call	9244 <__sprint_r>
    3034:	103c501e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    3038:	d8c02017 	ldw	r3,128(sp)
    303c:	d8801f17 	ldw	r2,124(sp)
    3040:	da000404 	addi	r8,sp,16
    3044:	003fee06 	br	3000 <__reset+0xfbf03000>
    3048:	d9002c17 	ldw	r4,176(sp)
    304c:	d9801e04 	addi	r6,sp,120
    3050:	b80b883a 	mov	r5,r23
    3054:	00092440 	call	9244 <__sprint_r>
    3058:	103c471e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    305c:	d8c02017 	ldw	r3,128(sp)
    3060:	df002787 	ldb	fp,158(sp)
    3064:	da000404 	addi	r8,sp,16
    3068:	003d5606 	br	25c4 <__reset+0xfbf025c4>
    306c:	9080040c 	andi	r2,r18,16
    3070:	10016126 	beq	r2,zero,35f8 <___vfprintf_internal_r+0x1888>
    3074:	d8802d17 	ldw	r2,180(sp)
    3078:	14c00017 	ldw	r19,0(r2)
    307c:	10800104 	addi	r2,r2,4
    3080:	d8802d15 	stw	r2,180(sp)
    3084:	982dd7fa 	srai	r22,r19,31
    3088:	b005883a 	mov	r2,r22
    308c:	003c8206 	br	2298 <__reset+0xfbf02298>
    3090:	9080040c 	andi	r2,r18,16
    3094:	10003526 	beq	r2,zero,316c <___vfprintf_internal_r+0x13fc>
    3098:	d9402d17 	ldw	r5,180(sp)
    309c:	d8c02917 	ldw	r3,164(sp)
    30a0:	d8002785 	stb	zero,158(sp)
    30a4:	28800104 	addi	r2,r5,4
    30a8:	2cc00017 	ldw	r19,0(r5)
    30ac:	002d883a 	mov	r22,zero
    30b0:	18003716 	blt	r3,zero,3190 <___vfprintf_internal_r+0x1420>
    30b4:	00ffdfc4 	movi	r3,-129
    30b8:	d8802d15 	stw	r2,180(sp)
    30bc:	90e4703a 	and	r18,r18,r3
    30c0:	0039883a 	mov	fp,zero
    30c4:	983df326 	beq	r19,zero,2894 <__reset+0xfbf02894>
    30c8:	00800244 	movi	r2,9
    30cc:	14fc7b36 	bltu	r2,r19,22bc <__reset+0xfbf022bc>
    30d0:	d8c02817 	ldw	r3,160(sp)
    30d4:	dc001dc4 	addi	r16,sp,119
    30d8:	9cc00c04 	addi	r19,r19,48
    30dc:	1c07c83a 	sub	r3,r3,r16
    30e0:	dcc01dc5 	stb	r19,119(sp)
    30e4:	d8c02e15 	stw	r3,184(sp)
    30e8:	003ce806 	br	248c <__reset+0xfbf0248c>
    30ec:	d8803317 	ldw	r2,204(sp)
    30f0:	143fffc4 	addi	r16,r2,-1
    30f4:	043f4d0e 	bge	zero,r16,2e2c <__reset+0xfbf02e2c>
    30f8:	07000404 	movi	fp,16
    30fc:	e400810e 	bge	fp,r16,3304 <___vfprintf_internal_r+0x1594>
    3100:	01400074 	movhi	r5,1
    3104:	29414684 	addi	r5,r5,1306
    3108:	d9402b15 	stw	r5,172(sp)
    310c:	01c001c4 	movi	r7,7
    3110:	dcc02c17 	ldw	r19,176(sp)
    3114:	00000306 	br	3124 <___vfprintf_internal_r+0x13b4>
    3118:	b5800204 	addi	r22,r22,8
    311c:	843ffc04 	addi	r16,r16,-16
    3120:	e4007b0e 	bge	fp,r16,3310 <___vfprintf_internal_r+0x15a0>
    3124:	18c00404 	addi	r3,r3,16
    3128:	8c400044 	addi	r17,r17,1
    312c:	b5000015 	stw	r20,0(r22)
    3130:	b7000115 	stw	fp,4(r22)
    3134:	d8c02015 	stw	r3,128(sp)
    3138:	dc401f15 	stw	r17,124(sp)
    313c:	3c7ff60e 	bge	r7,r17,3118 <__reset+0xfbf03118>
    3140:	d9801e04 	addi	r6,sp,120
    3144:	b80b883a 	mov	r5,r23
    3148:	9809883a 	mov	r4,r19
    314c:	d9c03c15 	stw	r7,240(sp)
    3150:	00092440 	call	9244 <__sprint_r>
    3154:	d9c03c17 	ldw	r7,240(sp)
    3158:	103c071e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    315c:	d8c02017 	ldw	r3,128(sp)
    3160:	dc401f17 	ldw	r17,124(sp)
    3164:	dd800404 	addi	r22,sp,16
    3168:	003fec06 	br	311c <__reset+0xfbf0311c>
    316c:	9080100c 	andi	r2,r18,64
    3170:	d8002785 	stb	zero,158(sp)
    3174:	10010e26 	beq	r2,zero,35b0 <___vfprintf_internal_r+0x1840>
    3178:	d9002d17 	ldw	r4,180(sp)
    317c:	d9402917 	ldw	r5,164(sp)
    3180:	002d883a 	mov	r22,zero
    3184:	20800104 	addi	r2,r4,4
    3188:	24c0000b 	ldhu	r19,0(r4)
    318c:	283fc90e 	bge	r5,zero,30b4 <__reset+0xfbf030b4>
    3190:	d8802d15 	stw	r2,180(sp)
    3194:	0039883a 	mov	fp,zero
    3198:	9d84b03a 	or	r2,r19,r22
    319c:	103c461e 	bne	r2,zero,22b8 <__reset+0xfbf022b8>
    31a0:	00800044 	movi	r2,1
    31a4:	003e6c06 	br	2b58 <__reset+0xfbf02b58>
    31a8:	d9002c17 	ldw	r4,176(sp)
    31ac:	d9801e04 	addi	r6,sp,120
    31b0:	b80b883a 	mov	r5,r23
    31b4:	00092440 	call	9244 <__sprint_r>
    31b8:	103bef1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    31bc:	d8c02017 	ldw	r3,128(sp)
    31c0:	da000404 	addi	r8,sp,16
    31c4:	d9003217 	ldw	r4,200(sp)
    31c8:	d8802617 	ldw	r2,152(sp)
    31cc:	d9403317 	ldw	r5,204(sp)
    31d0:	8123883a 	add	r17,r16,r4
    31d4:	11400216 	blt	r2,r5,31e0 <___vfprintf_internal_r+0x1470>
    31d8:	9100004c 	andi	r4,r18,1
    31dc:	20000d26 	beq	r4,zero,3214 <___vfprintf_internal_r+0x14a4>
    31e0:	d9003717 	ldw	r4,220(sp)
    31e4:	d9403417 	ldw	r5,208(sp)
    31e8:	1907883a 	add	r3,r3,r4
    31ec:	d9001f17 	ldw	r4,124(sp)
    31f0:	41400015 	stw	r5,0(r8)
    31f4:	d9403717 	ldw	r5,220(sp)
    31f8:	21000044 	addi	r4,r4,1
    31fc:	d8c02015 	stw	r3,128(sp)
    3200:	41400115 	stw	r5,4(r8)
    3204:	d9001f15 	stw	r4,124(sp)
    3208:	014001c4 	movi	r5,7
    320c:	2901e816 	blt	r5,r4,39b0 <___vfprintf_internal_r+0x1c40>
    3210:	42000204 	addi	r8,r8,8
    3214:	d9003317 	ldw	r4,204(sp)
    3218:	8121883a 	add	r16,r16,r4
    321c:	2085c83a 	sub	r2,r4,r2
    3220:	8461c83a 	sub	r16,r16,r17
    3224:	1400010e 	bge	r2,r16,322c <___vfprintf_internal_r+0x14bc>
    3228:	1021883a 	mov	r16,r2
    322c:	04000a0e 	bge	zero,r16,3258 <___vfprintf_internal_r+0x14e8>
    3230:	d9001f17 	ldw	r4,124(sp)
    3234:	1c07883a 	add	r3,r3,r16
    3238:	44400015 	stw	r17,0(r8)
    323c:	21000044 	addi	r4,r4,1
    3240:	44000115 	stw	r16,4(r8)
    3244:	d8c02015 	stw	r3,128(sp)
    3248:	d9001f15 	stw	r4,124(sp)
    324c:	014001c4 	movi	r5,7
    3250:	2901fb16 	blt	r5,r4,3a40 <___vfprintf_internal_r+0x1cd0>
    3254:	42000204 	addi	r8,r8,8
    3258:	8001f716 	blt	r16,zero,3a38 <___vfprintf_internal_r+0x1cc8>
    325c:	1421c83a 	sub	r16,r2,r16
    3260:	043d380e 	bge	zero,r16,2744 <__reset+0xfbf02744>
    3264:	04400404 	movi	r17,16
    3268:	d8801f17 	ldw	r2,124(sp)
    326c:	8c3efb0e 	bge	r17,r16,2e5c <__reset+0xfbf02e5c>
    3270:	01400074 	movhi	r5,1
    3274:	29414684 	addi	r5,r5,1306
    3278:	d9402b15 	stw	r5,172(sp)
    327c:	058001c4 	movi	r22,7
    3280:	dcc02c17 	ldw	r19,176(sp)
    3284:	00000306 	br	3294 <___vfprintf_internal_r+0x1524>
    3288:	42000204 	addi	r8,r8,8
    328c:	843ffc04 	addi	r16,r16,-16
    3290:	8c3ef50e 	bge	r17,r16,2e68 <__reset+0xfbf02e68>
    3294:	18c00404 	addi	r3,r3,16
    3298:	10800044 	addi	r2,r2,1
    329c:	45000015 	stw	r20,0(r8)
    32a0:	44400115 	stw	r17,4(r8)
    32a4:	d8c02015 	stw	r3,128(sp)
    32a8:	d8801f15 	stw	r2,124(sp)
    32ac:	b0bff60e 	bge	r22,r2,3288 <__reset+0xfbf03288>
    32b0:	d9801e04 	addi	r6,sp,120
    32b4:	b80b883a 	mov	r5,r23
    32b8:	9809883a 	mov	r4,r19
    32bc:	00092440 	call	9244 <__sprint_r>
    32c0:	103bad1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    32c4:	d8c02017 	ldw	r3,128(sp)
    32c8:	d8801f17 	ldw	r2,124(sp)
    32cc:	da000404 	addi	r8,sp,16
    32d0:	003fee06 	br	328c <__reset+0xfbf0328c>
    32d4:	9088703a 	and	r4,r18,r2
    32d8:	203eab1e 	bne	r4,zero,2d88 <__reset+0xfbf02d88>
    32dc:	dc401f17 	ldw	r17,124(sp)
    32e0:	40800115 	stw	r2,4(r8)
    32e4:	44000015 	stw	r16,0(r8)
    32e8:	8c400044 	addi	r17,r17,1
    32ec:	d8c02015 	stw	r3,128(sp)
    32f0:	dc401f15 	stw	r17,124(sp)
    32f4:	008001c4 	movi	r2,7
    32f8:	14400e16 	blt	r2,r17,3334 <___vfprintf_internal_r+0x15c4>
    32fc:	45800204 	addi	r22,r8,8
    3300:	003eca06 	br	2e2c <__reset+0xfbf02e2c>
    3304:	01000074 	movhi	r4,1
    3308:	21014684 	addi	r4,r4,1306
    330c:	d9002b15 	stw	r4,172(sp)
    3310:	d8802b17 	ldw	r2,172(sp)
    3314:	1c07883a 	add	r3,r3,r16
    3318:	8c400044 	addi	r17,r17,1
    331c:	b0800015 	stw	r2,0(r22)
    3320:	b4000115 	stw	r16,4(r22)
    3324:	d8c02015 	stw	r3,128(sp)
    3328:	dc401f15 	stw	r17,124(sp)
    332c:	008001c4 	movi	r2,7
    3330:	147ebd0e 	bge	r2,r17,2e28 <__reset+0xfbf02e28>
    3334:	d9002c17 	ldw	r4,176(sp)
    3338:	d9801e04 	addi	r6,sp,120
    333c:	b80b883a 	mov	r5,r23
    3340:	00092440 	call	9244 <__sprint_r>
    3344:	103b8c1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    3348:	d8c02017 	ldw	r3,128(sp)
    334c:	dc401f17 	ldw	r17,124(sp)
    3350:	dd800404 	addi	r22,sp,16
    3354:	003eb506 	br	2e2c <__reset+0xfbf02e2c>
    3358:	d9002c17 	ldw	r4,176(sp)
    335c:	d9801e04 	addi	r6,sp,120
    3360:	b80b883a 	mov	r5,r23
    3364:	00092440 	call	9244 <__sprint_r>
    3368:	103b831e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    336c:	d8c02017 	ldw	r3,128(sp)
    3370:	dc401f17 	ldw	r17,124(sp)
    3374:	da000404 	addi	r8,sp,16
    3378:	003e8d06 	br	2db0 <__reset+0xfbf02db0>
    337c:	d9002c17 	ldw	r4,176(sp)
    3380:	d9801e04 	addi	r6,sp,120
    3384:	b80b883a 	mov	r5,r23
    3388:	00092440 	call	9244 <__sprint_r>
    338c:	103b7a1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    3390:	d8c02017 	ldw	r3,128(sp)
    3394:	dc401f17 	ldw	r17,124(sp)
    3398:	dd800404 	addi	r22,sp,16
    339c:	003e8f06 	br	2ddc <__reset+0xfbf02ddc>
    33a0:	0027883a 	mov	r19,zero
    33a4:	003f4a06 	br	30d0 <__reset+0xfbf030d0>
    33a8:	d9002c17 	ldw	r4,176(sp)
    33ac:	d9801e04 	addi	r6,sp,120
    33b0:	b80b883a 	mov	r5,r23
    33b4:	00092440 	call	9244 <__sprint_r>
    33b8:	103b6f1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    33bc:	d8c02017 	ldw	r3,128(sp)
    33c0:	da000404 	addi	r8,sp,16
    33c4:	003c9d06 	br	263c <__reset+0xfbf0263c>
    33c8:	04e7c83a 	sub	r19,zero,r19
    33cc:	9804c03a 	cmpne	r2,r19,zero
    33d0:	05adc83a 	sub	r22,zero,r22
    33d4:	b0adc83a 	sub	r22,r22,r2
    33d8:	d8802917 	ldw	r2,164(sp)
    33dc:	07000b44 	movi	fp,45
    33e0:	df002785 	stb	fp,158(sp)
    33e4:	10017b16 	blt	r2,zero,39d4 <___vfprintf_internal_r+0x1c64>
    33e8:	00bfdfc4 	movi	r2,-129
    33ec:	90a4703a 	and	r18,r18,r2
    33f0:	003bb106 	br	22b8 <__reset+0xfbf022b8>
    33f4:	d9003617 	ldw	r4,216(sp)
    33f8:	d9403817 	ldw	r5,224(sp)
    33fc:	da003d15 	stw	r8,244(sp)
    3400:	0008e680 	call	8e68 <__fpclassifyd>
    3404:	da003d17 	ldw	r8,244(sp)
    3408:	1000f026 	beq	r2,zero,37cc <___vfprintf_internal_r+0x1a5c>
    340c:	d9002917 	ldw	r4,164(sp)
    3410:	05bff7c4 	movi	r22,-33
    3414:	00bfffc4 	movi	r2,-1
    3418:	8dac703a 	and	r22,r17,r22
    341c:	20820026 	beq	r4,r2,3c20 <___vfprintf_internal_r+0x1eb0>
    3420:	008011c4 	movi	r2,71
    3424:	b081f726 	beq	r22,r2,3c04 <___vfprintf_internal_r+0x1e94>
    3428:	d9003817 	ldw	r4,224(sp)
    342c:	90c04014 	ori	r3,r18,256
    3430:	d8c02b15 	stw	r3,172(sp)
    3434:	20021516 	blt	r4,zero,3c8c <___vfprintf_internal_r+0x1f1c>
    3438:	dcc03817 	ldw	r19,224(sp)
    343c:	d8002a05 	stb	zero,168(sp)
    3440:	00801984 	movi	r2,102
    3444:	8881f926 	beq	r17,r2,3c2c <___vfprintf_internal_r+0x1ebc>
    3448:	00801184 	movi	r2,70
    344c:	88821c26 	beq	r17,r2,3cc0 <___vfprintf_internal_r+0x1f50>
    3450:	00801144 	movi	r2,69
    3454:	b081ef26 	beq	r22,r2,3c14 <___vfprintf_internal_r+0x1ea4>
    3458:	d8c02917 	ldw	r3,164(sp)
    345c:	d8802104 	addi	r2,sp,132
    3460:	d8800315 	stw	r2,12(sp)
    3464:	d9403617 	ldw	r5,216(sp)
    3468:	d8802504 	addi	r2,sp,148
    346c:	d9002c17 	ldw	r4,176(sp)
    3470:	d8800215 	stw	r2,8(sp)
    3474:	d8802604 	addi	r2,sp,152
    3478:	d8c00015 	stw	r3,0(sp)
    347c:	d8800115 	stw	r2,4(sp)
    3480:	01c00084 	movi	r7,2
    3484:	980d883a 	mov	r6,r19
    3488:	d8c03c15 	stw	r3,240(sp)
    348c:	da003d15 	stw	r8,244(sp)
    3490:	00043940 	call	4394 <_dtoa_r>
    3494:	1021883a 	mov	r16,r2
    3498:	008019c4 	movi	r2,103
    349c:	d8c03c17 	ldw	r3,240(sp)
    34a0:	da003d17 	ldw	r8,244(sp)
    34a4:	88817126 	beq	r17,r2,3a6c <___vfprintf_internal_r+0x1cfc>
    34a8:	008011c4 	movi	r2,71
    34ac:	88829226 	beq	r17,r2,3ef8 <___vfprintf_internal_r+0x2188>
    34b0:	80f9883a 	add	fp,r16,r3
    34b4:	d9003617 	ldw	r4,216(sp)
    34b8:	000d883a 	mov	r6,zero
    34bc:	000f883a 	mov	r7,zero
    34c0:	980b883a 	mov	r5,r19
    34c4:	da003d15 	stw	r8,244(sp)
    34c8:	000cebc0 	call	cebc <__eqdf2>
    34cc:	da003d17 	ldw	r8,244(sp)
    34d0:	10018d26 	beq	r2,zero,3b08 <___vfprintf_internal_r+0x1d98>
    34d4:	d8802117 	ldw	r2,132(sp)
    34d8:	1700062e 	bgeu	r2,fp,34f4 <___vfprintf_internal_r+0x1784>
    34dc:	01000c04 	movi	r4,48
    34e0:	10c00044 	addi	r3,r2,1
    34e4:	d8c02115 	stw	r3,132(sp)
    34e8:	11000005 	stb	r4,0(r2)
    34ec:	d8802117 	ldw	r2,132(sp)
    34f0:	173ffb36 	bltu	r2,fp,34e0 <__reset+0xfbf034e0>
    34f4:	1405c83a 	sub	r2,r2,r16
    34f8:	d8803315 	stw	r2,204(sp)
    34fc:	008011c4 	movi	r2,71
    3500:	b0817626 	beq	r22,r2,3adc <___vfprintf_internal_r+0x1d6c>
    3504:	00801944 	movi	r2,101
    3508:	1442810e 	bge	r2,r17,3f10 <___vfprintf_internal_r+0x21a0>
    350c:	d8c02617 	ldw	r3,152(sp)
    3510:	00801984 	movi	r2,102
    3514:	d8c03215 	stw	r3,200(sp)
    3518:	8881fe26 	beq	r17,r2,3d14 <___vfprintf_internal_r+0x1fa4>
    351c:	d8c03217 	ldw	r3,200(sp)
    3520:	d9003317 	ldw	r4,204(sp)
    3524:	1901dd16 	blt	r3,r4,3c9c <___vfprintf_internal_r+0x1f2c>
    3528:	9480004c 	andi	r18,r18,1
    352c:	90022b1e 	bne	r18,zero,3ddc <___vfprintf_internal_r+0x206c>
    3530:	1805883a 	mov	r2,r3
    3534:	18028016 	blt	r3,zero,3f38 <___vfprintf_internal_r+0x21c8>
    3538:	d8c03217 	ldw	r3,200(sp)
    353c:	044019c4 	movi	r17,103
    3540:	d8c02e15 	stw	r3,184(sp)
    3544:	df002a07 	ldb	fp,168(sp)
    3548:	e001531e 	bne	fp,zero,3a98 <___vfprintf_internal_r+0x1d28>
    354c:	df002783 	ldbu	fp,158(sp)
    3550:	d8802a15 	stw	r2,168(sp)
    3554:	dc802b17 	ldw	r18,172(sp)
    3558:	d8002915 	stw	zero,164(sp)
    355c:	003bd106 	br	24a4 <__reset+0xfbf024a4>
    3560:	d8802d17 	ldw	r2,180(sp)
    3564:	d8c02d17 	ldw	r3,180(sp)
    3568:	d9002d17 	ldw	r4,180(sp)
    356c:	10800017 	ldw	r2,0(r2)
    3570:	18c00117 	ldw	r3,4(r3)
    3574:	21000204 	addi	r4,r4,8
    3578:	d8803615 	stw	r2,216(sp)
    357c:	d8c03815 	stw	r3,224(sp)
    3580:	d9002d15 	stw	r4,180(sp)
    3584:	003b7506 	br	235c <__reset+0xfbf0235c>
    3588:	ac400007 	ldb	r17,0(r21)
    358c:	003a5906 	br	1ef4 <__reset+0xfbf01ef4>
    3590:	9080100c 	andi	r2,r18,64
    3594:	1000a826 	beq	r2,zero,3838 <___vfprintf_internal_r+0x1ac8>
    3598:	d9002d17 	ldw	r4,180(sp)
    359c:	002d883a 	mov	r22,zero
    35a0:	24c0000b 	ldhu	r19,0(r4)
    35a4:	21000104 	addi	r4,r4,4
    35a8:	d9002d15 	stw	r4,180(sp)
    35ac:	003ccb06 	br	28dc <__reset+0xfbf028dc>
    35b0:	d8c02d17 	ldw	r3,180(sp)
    35b4:	d9002917 	ldw	r4,164(sp)
    35b8:	002d883a 	mov	r22,zero
    35bc:	18800104 	addi	r2,r3,4
    35c0:	1cc00017 	ldw	r19,0(r3)
    35c4:	203ebb0e 	bge	r4,zero,30b4 <__reset+0xfbf030b4>
    35c8:	003ef106 	br	3190 <__reset+0xfbf03190>
    35cc:	9080040c 	andi	r2,r18,16
    35d0:	1000921e 	bne	r2,zero,381c <___vfprintf_internal_r+0x1aac>
    35d4:	9480100c 	andi	r18,r18,64
    35d8:	90013926 	beq	r18,zero,3ac0 <___vfprintf_internal_r+0x1d50>
    35dc:	d9002d17 	ldw	r4,180(sp)
    35e0:	d9402f17 	ldw	r5,188(sp)
    35e4:	20800017 	ldw	r2,0(r4)
    35e8:	21000104 	addi	r4,r4,4
    35ec:	d9002d15 	stw	r4,180(sp)
    35f0:	1140000d 	sth	r5,0(r2)
    35f4:	003a1606 	br	1e50 <__reset+0xfbf01e50>
    35f8:	9080100c 	andi	r2,r18,64
    35fc:	10008026 	beq	r2,zero,3800 <___vfprintf_internal_r+0x1a90>
    3600:	d8c02d17 	ldw	r3,180(sp)
    3604:	1cc0000f 	ldh	r19,0(r3)
    3608:	18c00104 	addi	r3,r3,4
    360c:	d8c02d15 	stw	r3,180(sp)
    3610:	982dd7fa 	srai	r22,r19,31
    3614:	b005883a 	mov	r2,r22
    3618:	003b1f06 	br	2298 <__reset+0xfbf02298>
    361c:	9080100c 	andi	r2,r18,64
    3620:	d8002785 	stb	zero,158(sp)
    3624:	10008a1e 	bne	r2,zero,3850 <___vfprintf_internal_r+0x1ae0>
    3628:	d9402d17 	ldw	r5,180(sp)
    362c:	d8c02917 	ldw	r3,164(sp)
    3630:	002d883a 	mov	r22,zero
    3634:	28800104 	addi	r2,r5,4
    3638:	2cc00017 	ldw	r19,0(r5)
    363c:	183e4b0e 	bge	r3,zero,2f6c <__reset+0xfbf02f6c>
    3640:	9d86b03a 	or	r3,r19,r22
    3644:	d8802d15 	stw	r2,180(sp)
    3648:	183e4c1e 	bne	r3,zero,2f7c <__reset+0xfbf02f7c>
    364c:	0039883a 	mov	fp,zero
    3650:	0005883a 	mov	r2,zero
    3654:	003d4006 	br	2b58 <__reset+0xfbf02b58>
    3658:	01400074 	movhi	r5,1
    365c:	29414684 	addi	r5,r5,1306
    3660:	d9402b15 	stw	r5,172(sp)
    3664:	d9402b17 	ldw	r5,172(sp)
    3668:	1c47883a 	add	r3,r3,r17
    366c:	10800044 	addi	r2,r2,1
    3670:	41400015 	stw	r5,0(r8)
    3674:	44400115 	stw	r17,4(r8)
    3678:	d8c02015 	stw	r3,128(sp)
    367c:	d8801f15 	stw	r2,124(sp)
    3680:	010001c4 	movi	r4,7
    3684:	20bec816 	blt	r4,r2,31a8 <__reset+0xfbf031a8>
    3688:	42000204 	addi	r8,r8,8
    368c:	003ecd06 	br	31c4 <__reset+0xfbf031c4>
    3690:	d9002917 	ldw	r4,164(sp)
    3694:	d8002785 	stb	zero,158(sp)
    3698:	203d2d16 	blt	r4,zero,2b50 <__reset+0xfbf02b50>
    369c:	00bfdfc4 	movi	r2,-129
    36a0:	90a4703a 	and	r18,r18,r2
    36a4:	003a9106 	br	20ec <__reset+0xfbf020ec>
    36a8:	01000074 	movhi	r4,1
    36ac:	21014684 	addi	r4,r4,1306
    36b0:	d9002b15 	stw	r4,172(sp)
    36b4:	003c0c06 	br	26e8 <__reset+0xfbf026e8>
    36b8:	d9002c17 	ldw	r4,176(sp)
    36bc:	d9801e04 	addi	r6,sp,120
    36c0:	b80b883a 	mov	r5,r23
    36c4:	00092440 	call	9244 <__sprint_r>
    36c8:	103aab1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    36cc:	d8c02017 	ldw	r3,128(sp)
    36d0:	da000404 	addi	r8,sp,16
    36d4:	003d4106 	br	2bdc <__reset+0xfbf02bdc>
    36d8:	d8801f17 	ldw	r2,124(sp)
    36dc:	01400074 	movhi	r5,1
    36e0:	01000044 	movi	r4,1
    36e4:	18c00044 	addi	r3,r3,1
    36e8:	10800044 	addi	r2,r2,1
    36ec:	29414604 	addi	r5,r5,1304
    36f0:	41000115 	stw	r4,4(r8)
    36f4:	41400015 	stw	r5,0(r8)
    36f8:	d8c02015 	stw	r3,128(sp)
    36fc:	d8801f15 	stw	r2,124(sp)
    3700:	010001c4 	movi	r4,7
    3704:	20805c16 	blt	r4,r2,3878 <___vfprintf_internal_r+0x1b08>
    3708:	42000204 	addi	r8,r8,8
    370c:	8800041e 	bne	r17,zero,3720 <___vfprintf_internal_r+0x19b0>
    3710:	d8803317 	ldw	r2,204(sp)
    3714:	1000021e 	bne	r2,zero,3720 <___vfprintf_internal_r+0x19b0>
    3718:	9080004c 	andi	r2,r18,1
    371c:	103c0926 	beq	r2,zero,2744 <__reset+0xfbf02744>
    3720:	d9003717 	ldw	r4,220(sp)
    3724:	d8801f17 	ldw	r2,124(sp)
    3728:	d9403417 	ldw	r5,208(sp)
    372c:	20c7883a 	add	r3,r4,r3
    3730:	10800044 	addi	r2,r2,1
    3734:	41000115 	stw	r4,4(r8)
    3738:	41400015 	stw	r5,0(r8)
    373c:	d8c02015 	stw	r3,128(sp)
    3740:	d8801f15 	stw	r2,124(sp)
    3744:	010001c4 	movi	r4,7
    3748:	20812116 	blt	r4,r2,3bd0 <___vfprintf_internal_r+0x1e60>
    374c:	42000204 	addi	r8,r8,8
    3750:	0463c83a 	sub	r17,zero,r17
    3754:	0440730e 	bge	zero,r17,3924 <___vfprintf_internal_r+0x1bb4>
    3758:	05800404 	movi	r22,16
    375c:	b440860e 	bge	r22,r17,3978 <___vfprintf_internal_r+0x1c08>
    3760:	01400074 	movhi	r5,1
    3764:	29414684 	addi	r5,r5,1306
    3768:	d9402b15 	stw	r5,172(sp)
    376c:	070001c4 	movi	fp,7
    3770:	dcc02c17 	ldw	r19,176(sp)
    3774:	00000306 	br	3784 <___vfprintf_internal_r+0x1a14>
    3778:	42000204 	addi	r8,r8,8
    377c:	8c7ffc04 	addi	r17,r17,-16
    3780:	b440800e 	bge	r22,r17,3984 <___vfprintf_internal_r+0x1c14>
    3784:	18c00404 	addi	r3,r3,16
    3788:	10800044 	addi	r2,r2,1
    378c:	45000015 	stw	r20,0(r8)
    3790:	45800115 	stw	r22,4(r8)
    3794:	d8c02015 	stw	r3,128(sp)
    3798:	d8801f15 	stw	r2,124(sp)
    379c:	e0bff60e 	bge	fp,r2,3778 <__reset+0xfbf03778>
    37a0:	d9801e04 	addi	r6,sp,120
    37a4:	b80b883a 	mov	r5,r23
    37a8:	9809883a 	mov	r4,r19
    37ac:	00092440 	call	9244 <__sprint_r>
    37b0:	103a711e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    37b4:	d8c02017 	ldw	r3,128(sp)
    37b8:	d8801f17 	ldw	r2,124(sp)
    37bc:	da000404 	addi	r8,sp,16
    37c0:	003fee06 	br	377c <__reset+0xfbf0377c>
    37c4:	00bfffc4 	movi	r2,-1
    37c8:	003a6f06 	br	2188 <__reset+0xfbf02188>
    37cc:	008011c4 	movi	r2,71
    37d0:	1440b816 	blt	r2,r17,3ab4 <___vfprintf_internal_r+0x1d44>
    37d4:	04000074 	movhi	r16,1
    37d8:	84013804 	addi	r16,r16,1248
    37dc:	00c000c4 	movi	r3,3
    37e0:	00bfdfc4 	movi	r2,-129
    37e4:	d8c02a15 	stw	r3,168(sp)
    37e8:	90a4703a 	and	r18,r18,r2
    37ec:	df002783 	ldbu	fp,158(sp)
    37f0:	d8c02e15 	stw	r3,184(sp)
    37f4:	d8002915 	stw	zero,164(sp)
    37f8:	d8003215 	stw	zero,200(sp)
    37fc:	003b2906 	br	24a4 <__reset+0xfbf024a4>
    3800:	d9002d17 	ldw	r4,180(sp)
    3804:	24c00017 	ldw	r19,0(r4)
    3808:	21000104 	addi	r4,r4,4
    380c:	d9002d15 	stw	r4,180(sp)
    3810:	982dd7fa 	srai	r22,r19,31
    3814:	b005883a 	mov	r2,r22
    3818:	003a9f06 	br	2298 <__reset+0xfbf02298>
    381c:	d9402d17 	ldw	r5,180(sp)
    3820:	d8c02f17 	ldw	r3,188(sp)
    3824:	28800017 	ldw	r2,0(r5)
    3828:	29400104 	addi	r5,r5,4
    382c:	d9402d15 	stw	r5,180(sp)
    3830:	10c00015 	stw	r3,0(r2)
    3834:	00398606 	br	1e50 <__reset+0xfbf01e50>
    3838:	d9402d17 	ldw	r5,180(sp)
    383c:	002d883a 	mov	r22,zero
    3840:	2cc00017 	ldw	r19,0(r5)
    3844:	29400104 	addi	r5,r5,4
    3848:	d9402d15 	stw	r5,180(sp)
    384c:	003c2306 	br	28dc <__reset+0xfbf028dc>
    3850:	d8c02d17 	ldw	r3,180(sp)
    3854:	d9002917 	ldw	r4,164(sp)
    3858:	002d883a 	mov	r22,zero
    385c:	18800104 	addi	r2,r3,4
    3860:	1cc0000b 	ldhu	r19,0(r3)
    3864:	203dc10e 	bge	r4,zero,2f6c <__reset+0xfbf02f6c>
    3868:	003f7506 	br	3640 <__reset+0xfbf03640>
    386c:	04000074 	movhi	r16,1
    3870:	84013604 	addi	r16,r16,1240
    3874:	003acc06 	br	23a8 <__reset+0xfbf023a8>
    3878:	d9002c17 	ldw	r4,176(sp)
    387c:	d9801e04 	addi	r6,sp,120
    3880:	b80b883a 	mov	r5,r23
    3884:	00092440 	call	9244 <__sprint_r>
    3888:	103a3b1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    388c:	dc402617 	ldw	r17,152(sp)
    3890:	d8c02017 	ldw	r3,128(sp)
    3894:	da000404 	addi	r8,sp,16
    3898:	003f9c06 	br	370c <__reset+0xfbf0370c>
    389c:	ac400043 	ldbu	r17,1(r21)
    38a0:	94800814 	ori	r18,r18,32
    38a4:	ad400044 	addi	r21,r21,1
    38a8:	8c403fcc 	andi	r17,r17,255
    38ac:	8c40201c 	xori	r17,r17,128
    38b0:	8c7fe004 	addi	r17,r17,-128
    38b4:	00398f06 	br	1ef4 <__reset+0xfbf01ef4>
    38b8:	d8c02d15 	stw	r3,180(sp)
    38bc:	0039883a 	mov	fp,zero
    38c0:	003e3506 	br	3198 <__reset+0xfbf03198>
    38c4:	d9002c17 	ldw	r4,176(sp)
    38c8:	d9801e04 	addi	r6,sp,120
    38cc:	b80b883a 	mov	r5,r23
    38d0:	00092440 	call	9244 <__sprint_r>
    38d4:	103a281e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    38d8:	d8c02017 	ldw	r3,128(sp)
    38dc:	da000404 	addi	r8,sp,16
    38e0:	003cd006 	br	2c24 <__reset+0xfbf02c24>
    38e4:	8009883a 	mov	r4,r16
    38e8:	da003d15 	stw	r8,244(sp)
    38ec:	0001cd80 	call	1cd8 <strlen>
    38f0:	d8802e15 	stw	r2,184(sp)
    38f4:	da003d17 	ldw	r8,244(sp)
    38f8:	103c340e 	bge	r2,zero,29cc <__reset+0xfbf029cc>
    38fc:	0005883a 	mov	r2,zero
    3900:	003c3206 	br	29cc <__reset+0xfbf029cc>
    3904:	d9002c17 	ldw	r4,176(sp)
    3908:	d9801e04 	addi	r6,sp,120
    390c:	b80b883a 	mov	r5,r23
    3910:	00092440 	call	9244 <__sprint_r>
    3914:	103a181e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    3918:	d8c02017 	ldw	r3,128(sp)
    391c:	d8801f17 	ldw	r2,124(sp)
    3920:	da000404 	addi	r8,sp,16
    3924:	d9403317 	ldw	r5,204(sp)
    3928:	10800044 	addi	r2,r2,1
    392c:	44000015 	stw	r16,0(r8)
    3930:	28c7883a 	add	r3,r5,r3
    3934:	003b7d06 	br	272c <__reset+0xfbf0272c>
    3938:	01000074 	movhi	r4,1
    393c:	21014a84 	addi	r4,r4,1322
    3940:	d9003515 	stw	r4,212(sp)
    3944:	003b1406 	br	2598 <__reset+0xfbf02598>
    3948:	013fffc4 	movi	r4,-1
    394c:	003a3506 	br	2224 <__reset+0xfbf02224>
    3950:	0023883a 	mov	r17,zero
    3954:	003d9d06 	br	2fcc <__reset+0xfbf02fcc>
    3958:	d9002c17 	ldw	r4,176(sp)
    395c:	d9801e04 	addi	r6,sp,120
    3960:	b80b883a 	mov	r5,r23
    3964:	00092440 	call	9244 <__sprint_r>
    3968:	103a031e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    396c:	d8c02017 	ldw	r3,128(sp)
    3970:	da000404 	addi	r8,sp,16
    3974:	003d9406 	br	2fc8 <__reset+0xfbf02fc8>
    3978:	01000074 	movhi	r4,1
    397c:	21014684 	addi	r4,r4,1306
    3980:	d9002b15 	stw	r4,172(sp)
    3984:	d9002b17 	ldw	r4,172(sp)
    3988:	1c47883a 	add	r3,r3,r17
    398c:	10800044 	addi	r2,r2,1
    3990:	41000015 	stw	r4,0(r8)
    3994:	44400115 	stw	r17,4(r8)
    3998:	d8c02015 	stw	r3,128(sp)
    399c:	d8801f15 	stw	r2,124(sp)
    39a0:	010001c4 	movi	r4,7
    39a4:	20bfd716 	blt	r4,r2,3904 <__reset+0xfbf03904>
    39a8:	42000204 	addi	r8,r8,8
    39ac:	003fdd06 	br	3924 <__reset+0xfbf03924>
    39b0:	d9002c17 	ldw	r4,176(sp)
    39b4:	d9801e04 	addi	r6,sp,120
    39b8:	b80b883a 	mov	r5,r23
    39bc:	00092440 	call	9244 <__sprint_r>
    39c0:	1039ed1e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    39c4:	d8802617 	ldw	r2,152(sp)
    39c8:	d8c02017 	ldw	r3,128(sp)
    39cc:	da000404 	addi	r8,sp,16
    39d0:	003e1006 	br	3214 <__reset+0xfbf03214>
    39d4:	00800044 	movi	r2,1
    39d8:	10803fcc 	andi	r2,r2,255
    39dc:	00c00044 	movi	r3,1
    39e0:	10fa3526 	beq	r2,r3,22b8 <__reset+0xfbf022b8>
    39e4:	00c00084 	movi	r3,2
    39e8:	10fbcb26 	beq	r2,r3,2918 <__reset+0xfbf02918>
    39ec:	003a8f06 	br	242c <__reset+0xfbf0242c>
    39f0:	01000074 	movhi	r4,1
    39f4:	21014a84 	addi	r4,r4,1322
    39f8:	d9003515 	stw	r4,212(sp)
    39fc:	003b7606 	br	27d8 <__reset+0xfbf027d8>
    3a00:	d8802917 	ldw	r2,164(sp)
    3a04:	00c00184 	movi	r3,6
    3a08:	1880012e 	bgeu	r3,r2,3a10 <___vfprintf_internal_r+0x1ca0>
    3a0c:	1805883a 	mov	r2,r3
    3a10:	d8802e15 	stw	r2,184(sp)
    3a14:	1000ef16 	blt	r2,zero,3dd4 <___vfprintf_internal_r+0x2064>
    3a18:	04000074 	movhi	r16,1
    3a1c:	d8802a15 	stw	r2,168(sp)
    3a20:	dcc02d15 	stw	r19,180(sp)
    3a24:	d8002915 	stw	zero,164(sp)
    3a28:	d8003215 	stw	zero,200(sp)
    3a2c:	84014404 	addi	r16,r16,1296
    3a30:	0039883a 	mov	fp,zero
    3a34:	003aa206 	br	24c0 <__reset+0xfbf024c0>
    3a38:	0021883a 	mov	r16,zero
    3a3c:	003e0706 	br	325c <__reset+0xfbf0325c>
    3a40:	d9002c17 	ldw	r4,176(sp)
    3a44:	d9801e04 	addi	r6,sp,120
    3a48:	b80b883a 	mov	r5,r23
    3a4c:	00092440 	call	9244 <__sprint_r>
    3a50:	1039c91e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    3a54:	d8802617 	ldw	r2,152(sp)
    3a58:	d9403317 	ldw	r5,204(sp)
    3a5c:	d8c02017 	ldw	r3,128(sp)
    3a60:	da000404 	addi	r8,sp,16
    3a64:	2885c83a 	sub	r2,r5,r2
    3a68:	003dfb06 	br	3258 <__reset+0xfbf03258>
    3a6c:	9080004c 	andi	r2,r18,1
    3a70:	103e8f1e 	bne	r2,zero,34b0 <__reset+0xfbf034b0>
    3a74:	d8802117 	ldw	r2,132(sp)
    3a78:	003e9e06 	br	34f4 <__reset+0xfbf034f4>
    3a7c:	1025883a 	mov	r18,r2
    3a80:	0039883a 	mov	fp,zero
    3a84:	00800084 	movi	r2,2
    3a88:	003fd306 	br	39d8 <__reset+0xfbf039d8>
    3a8c:	07000b44 	movi	fp,45
    3a90:	df002785 	stb	fp,158(sp)
    3a94:	003a4006 	br	2398 <__reset+0xfbf02398>
    3a98:	00c00b44 	movi	r3,45
    3a9c:	d8c02785 	stb	r3,158(sp)
    3aa0:	d8802a15 	stw	r2,168(sp)
    3aa4:	dc802b17 	ldw	r18,172(sp)
    3aa8:	d8002915 	stw	zero,164(sp)
    3aac:	07000b44 	movi	fp,45
    3ab0:	003a8006 	br	24b4 <__reset+0xfbf024b4>
    3ab4:	04000074 	movhi	r16,1
    3ab8:	84013904 	addi	r16,r16,1252
    3abc:	003f4706 	br	37dc <__reset+0xfbf037dc>
    3ac0:	d8c02d17 	ldw	r3,180(sp)
    3ac4:	d9002f17 	ldw	r4,188(sp)
    3ac8:	18800017 	ldw	r2,0(r3)
    3acc:	18c00104 	addi	r3,r3,4
    3ad0:	d8c02d15 	stw	r3,180(sp)
    3ad4:	11000015 	stw	r4,0(r2)
    3ad8:	0038dd06 	br	1e50 <__reset+0xfbf01e50>
    3adc:	dd802617 	ldw	r22,152(sp)
    3ae0:	00bfff44 	movi	r2,-3
    3ae4:	b0801c16 	blt	r22,r2,3b58 <___vfprintf_internal_r+0x1de8>
    3ae8:	d9402917 	ldw	r5,164(sp)
    3aec:	2d801a16 	blt	r5,r22,3b58 <___vfprintf_internal_r+0x1de8>
    3af0:	dd803215 	stw	r22,200(sp)
    3af4:	003e8906 	br	351c <__reset+0xfbf0351c>
    3af8:	01000074 	movhi	r4,1
    3afc:	21014684 	addi	r4,r4,1306
    3b00:	d9002b15 	stw	r4,172(sp)
    3b04:	003c9106 	br	2d4c <__reset+0xfbf02d4c>
    3b08:	e005883a 	mov	r2,fp
    3b0c:	003e7906 	br	34f4 <__reset+0xfbf034f4>
    3b10:	d9402917 	ldw	r5,164(sp)
    3b14:	df002783 	ldbu	fp,158(sp)
    3b18:	dcc02d15 	stw	r19,180(sp)
    3b1c:	d9402a15 	stw	r5,168(sp)
    3b20:	d9402e15 	stw	r5,184(sp)
    3b24:	d8002915 	stw	zero,164(sp)
    3b28:	d8003215 	stw	zero,200(sp)
    3b2c:	003a5d06 	br	24a4 <__reset+0xfbf024a4>
    3b30:	9080004c 	andi	r2,r18,1
    3b34:	0039883a 	mov	fp,zero
    3b38:	10000426 	beq	r2,zero,3b4c <___vfprintf_internal_r+0x1ddc>
    3b3c:	00800c04 	movi	r2,48
    3b40:	dc001dc4 	addi	r16,sp,119
    3b44:	d8801dc5 	stb	r2,119(sp)
    3b48:	003b8006 	br	294c <__reset+0xfbf0294c>
    3b4c:	d8002e15 	stw	zero,184(sp)
    3b50:	dc001e04 	addi	r16,sp,120
    3b54:	003a4d06 	br	248c <__reset+0xfbf0248c>
    3b58:	8c7fff84 	addi	r17,r17,-2
    3b5c:	b5bfffc4 	addi	r22,r22,-1
    3b60:	dd802615 	stw	r22,152(sp)
    3b64:	dc4022c5 	stb	r17,139(sp)
    3b68:	b000bf16 	blt	r22,zero,3e68 <___vfprintf_internal_r+0x20f8>
    3b6c:	00800ac4 	movi	r2,43
    3b70:	d8802305 	stb	r2,140(sp)
    3b74:	00800244 	movi	r2,9
    3b78:	15807016 	blt	r2,r22,3d3c <___vfprintf_internal_r+0x1fcc>
    3b7c:	00800c04 	movi	r2,48
    3b80:	b5800c04 	addi	r22,r22,48
    3b84:	d8802345 	stb	r2,141(sp)
    3b88:	dd802385 	stb	r22,142(sp)
    3b8c:	d88023c4 	addi	r2,sp,143
    3b90:	df0022c4 	addi	fp,sp,139
    3b94:	d8c03317 	ldw	r3,204(sp)
    3b98:	1739c83a 	sub	fp,r2,fp
    3b9c:	d9003317 	ldw	r4,204(sp)
    3ba0:	e0c7883a 	add	r3,fp,r3
    3ba4:	df003a15 	stw	fp,232(sp)
    3ba8:	d8c02e15 	stw	r3,184(sp)
    3bac:	00800044 	movi	r2,1
    3bb0:	1100b30e 	bge	r2,r4,3e80 <___vfprintf_internal_r+0x2110>
    3bb4:	d8c02e17 	ldw	r3,184(sp)
    3bb8:	18c00044 	addi	r3,r3,1
    3bbc:	d8c02e15 	stw	r3,184(sp)
    3bc0:	1805883a 	mov	r2,r3
    3bc4:	1800ac16 	blt	r3,zero,3e78 <___vfprintf_internal_r+0x2108>
    3bc8:	d8003215 	stw	zero,200(sp)
    3bcc:	003e5d06 	br	3544 <__reset+0xfbf03544>
    3bd0:	d9002c17 	ldw	r4,176(sp)
    3bd4:	d9801e04 	addi	r6,sp,120
    3bd8:	b80b883a 	mov	r5,r23
    3bdc:	00092440 	call	9244 <__sprint_r>
    3be0:	1039651e 	bne	r2,zero,2178 <__reset+0xfbf02178>
    3be4:	dc402617 	ldw	r17,152(sp)
    3be8:	d8c02017 	ldw	r3,128(sp)
    3bec:	d8801f17 	ldw	r2,124(sp)
    3bf0:	da000404 	addi	r8,sp,16
    3bf4:	003ed606 	br	3750 <__reset+0xfbf03750>
    3bf8:	582b883a 	mov	r21,r11
    3bfc:	d8002915 	stw	zero,164(sp)
    3c00:	0038bd06 	br	1ef8 <__reset+0xfbf01ef8>
    3c04:	d8802917 	ldw	r2,164(sp)
    3c08:	103e071e 	bne	r2,zero,3428 <__reset+0xfbf03428>
    3c0c:	dc002915 	stw	r16,164(sp)
    3c10:	003e0506 	br	3428 <__reset+0xfbf03428>
    3c14:	d9002917 	ldw	r4,164(sp)
    3c18:	20c00044 	addi	r3,r4,1
    3c1c:	003e0f06 	br	345c <__reset+0xfbf0345c>
    3c20:	01400184 	movi	r5,6
    3c24:	d9402915 	stw	r5,164(sp)
    3c28:	003dff06 	br	3428 <__reset+0xfbf03428>
    3c2c:	d8802104 	addi	r2,sp,132
    3c30:	d8800315 	stw	r2,12(sp)
    3c34:	d8802504 	addi	r2,sp,148
    3c38:	d8800215 	stw	r2,8(sp)
    3c3c:	d8802604 	addi	r2,sp,152
    3c40:	d8800115 	stw	r2,4(sp)
    3c44:	d8802917 	ldw	r2,164(sp)
    3c48:	d9403617 	ldw	r5,216(sp)
    3c4c:	d9002c17 	ldw	r4,176(sp)
    3c50:	d8800015 	stw	r2,0(sp)
    3c54:	01c000c4 	movi	r7,3
    3c58:	980d883a 	mov	r6,r19
    3c5c:	da003d15 	stw	r8,244(sp)
    3c60:	00043940 	call	4394 <_dtoa_r>
    3c64:	d8c02917 	ldw	r3,164(sp)
    3c68:	da003d17 	ldw	r8,244(sp)
    3c6c:	1021883a 	mov	r16,r2
    3c70:	10f9883a 	add	fp,r2,r3
    3c74:	81000007 	ldb	r4,0(r16)
    3c78:	00800c04 	movi	r2,48
    3c7c:	20805e26 	beq	r4,r2,3df8 <___vfprintf_internal_r+0x2088>
    3c80:	d8c02617 	ldw	r3,152(sp)
    3c84:	e0f9883a 	add	fp,fp,r3
    3c88:	003e0a06 	br	34b4 <__reset+0xfbf034b4>
    3c8c:	00c00b44 	movi	r3,45
    3c90:	24e0003c 	xorhi	r19,r4,32768
    3c94:	d8c02a05 	stb	r3,168(sp)
    3c98:	003de906 	br	3440 <__reset+0xfbf03440>
    3c9c:	d8c03217 	ldw	r3,200(sp)
    3ca0:	00c07a0e 	bge	zero,r3,3e8c <___vfprintf_internal_r+0x211c>
    3ca4:	00800044 	movi	r2,1
    3ca8:	d9003317 	ldw	r4,204(sp)
    3cac:	1105883a 	add	r2,r2,r4
    3cb0:	d8802e15 	stw	r2,184(sp)
    3cb4:	10004e16 	blt	r2,zero,3df0 <___vfprintf_internal_r+0x2080>
    3cb8:	044019c4 	movi	r17,103
    3cbc:	003e2106 	br	3544 <__reset+0xfbf03544>
    3cc0:	d9002917 	ldw	r4,164(sp)
    3cc4:	d8802104 	addi	r2,sp,132
    3cc8:	d8800315 	stw	r2,12(sp)
    3ccc:	d9000015 	stw	r4,0(sp)
    3cd0:	d8802504 	addi	r2,sp,148
    3cd4:	d9403617 	ldw	r5,216(sp)
    3cd8:	d9002c17 	ldw	r4,176(sp)
    3cdc:	d8800215 	stw	r2,8(sp)
    3ce0:	d8802604 	addi	r2,sp,152
    3ce4:	d8800115 	stw	r2,4(sp)
    3ce8:	01c000c4 	movi	r7,3
    3cec:	980d883a 	mov	r6,r19
    3cf0:	da003d15 	stw	r8,244(sp)
    3cf4:	00043940 	call	4394 <_dtoa_r>
    3cf8:	d8c02917 	ldw	r3,164(sp)
    3cfc:	da003d17 	ldw	r8,244(sp)
    3d00:	1021883a 	mov	r16,r2
    3d04:	00801184 	movi	r2,70
    3d08:	80f9883a 	add	fp,r16,r3
    3d0c:	88bfd926 	beq	r17,r2,3c74 <__reset+0xfbf03c74>
    3d10:	003de806 	br	34b4 <__reset+0xfbf034b4>
    3d14:	d9002917 	ldw	r4,164(sp)
    3d18:	00c04d0e 	bge	zero,r3,3e50 <___vfprintf_internal_r+0x20e0>
    3d1c:	2000441e 	bne	r4,zero,3e30 <___vfprintf_internal_r+0x20c0>
    3d20:	9480004c 	andi	r18,r18,1
    3d24:	9000421e 	bne	r18,zero,3e30 <___vfprintf_internal_r+0x20c0>
    3d28:	1805883a 	mov	r2,r3
    3d2c:	18007016 	blt	r3,zero,3ef0 <___vfprintf_internal_r+0x2180>
    3d30:	d8c03217 	ldw	r3,200(sp)
    3d34:	d8c02e15 	stw	r3,184(sp)
    3d38:	003e0206 	br	3544 <__reset+0xfbf03544>
    3d3c:	df0022c4 	addi	fp,sp,139
    3d40:	dc002915 	stw	r16,164(sp)
    3d44:	4027883a 	mov	r19,r8
    3d48:	e021883a 	mov	r16,fp
    3d4c:	b009883a 	mov	r4,r22
    3d50:	01400284 	movi	r5,10
    3d54:	000bbf80 	call	bbf8 <__modsi3>
    3d58:	10800c04 	addi	r2,r2,48
    3d5c:	843fffc4 	addi	r16,r16,-1
    3d60:	b009883a 	mov	r4,r22
    3d64:	01400284 	movi	r5,10
    3d68:	80800005 	stb	r2,0(r16)
    3d6c:	000bb740 	call	bb74 <__divsi3>
    3d70:	102d883a 	mov	r22,r2
    3d74:	00800244 	movi	r2,9
    3d78:	15bff416 	blt	r2,r22,3d4c <__reset+0xfbf03d4c>
    3d7c:	9811883a 	mov	r8,r19
    3d80:	b0800c04 	addi	r2,r22,48
    3d84:	8027883a 	mov	r19,r16
    3d88:	997fffc4 	addi	r5,r19,-1
    3d8c:	98bfffc5 	stb	r2,-1(r19)
    3d90:	dc002917 	ldw	r16,164(sp)
    3d94:	2f006a2e 	bgeu	r5,fp,3f40 <___vfprintf_internal_r+0x21d0>
    3d98:	d9c02384 	addi	r7,sp,142
    3d9c:	3ccfc83a 	sub	r7,r7,r19
    3da0:	d9002344 	addi	r4,sp,141
    3da4:	e1cf883a 	add	r7,fp,r7
    3da8:	00000106 	br	3db0 <___vfprintf_internal_r+0x2040>
    3dac:	28800003 	ldbu	r2,0(r5)
    3db0:	20800005 	stb	r2,0(r4)
    3db4:	21000044 	addi	r4,r4,1
    3db8:	29400044 	addi	r5,r5,1
    3dbc:	393ffb1e 	bne	r7,r4,3dac <__reset+0xfbf03dac>
    3dc0:	d8802304 	addi	r2,sp,140
    3dc4:	14c5c83a 	sub	r2,r2,r19
    3dc8:	d8c02344 	addi	r3,sp,141
    3dcc:	1885883a 	add	r2,r3,r2
    3dd0:	003f7006 	br	3b94 <__reset+0xfbf03b94>
    3dd4:	0005883a 	mov	r2,zero
    3dd8:	003f0f06 	br	3a18 <__reset+0xfbf03a18>
    3ddc:	d8c03217 	ldw	r3,200(sp)
    3de0:	18c00044 	addi	r3,r3,1
    3de4:	d8c02e15 	stw	r3,184(sp)
    3de8:	1805883a 	mov	r2,r3
    3dec:	183fb20e 	bge	r3,zero,3cb8 <__reset+0xfbf03cb8>
    3df0:	0005883a 	mov	r2,zero
    3df4:	003fb006 	br	3cb8 <__reset+0xfbf03cb8>
    3df8:	d9003617 	ldw	r4,216(sp)
    3dfc:	000d883a 	mov	r6,zero
    3e00:	000f883a 	mov	r7,zero
    3e04:	980b883a 	mov	r5,r19
    3e08:	d8c03c15 	stw	r3,240(sp)
    3e0c:	da003d15 	stw	r8,244(sp)
    3e10:	000cebc0 	call	cebc <__eqdf2>
    3e14:	d8c03c17 	ldw	r3,240(sp)
    3e18:	da003d17 	ldw	r8,244(sp)
    3e1c:	103f9826 	beq	r2,zero,3c80 <__reset+0xfbf03c80>
    3e20:	00800044 	movi	r2,1
    3e24:	10c7c83a 	sub	r3,r2,r3
    3e28:	d8c02615 	stw	r3,152(sp)
    3e2c:	003f9506 	br	3c84 <__reset+0xfbf03c84>
    3e30:	d9002917 	ldw	r4,164(sp)
    3e34:	d8c03217 	ldw	r3,200(sp)
    3e38:	20800044 	addi	r2,r4,1
    3e3c:	1885883a 	add	r2,r3,r2
    3e40:	d8802e15 	stw	r2,184(sp)
    3e44:	103dbf0e 	bge	r2,zero,3544 <__reset+0xfbf03544>
    3e48:	0005883a 	mov	r2,zero
    3e4c:	003dbd06 	br	3544 <__reset+0xfbf03544>
    3e50:	2000211e 	bne	r4,zero,3ed8 <___vfprintf_internal_r+0x2168>
    3e54:	9480004c 	andi	r18,r18,1
    3e58:	90001f1e 	bne	r18,zero,3ed8 <___vfprintf_internal_r+0x2168>
    3e5c:	00800044 	movi	r2,1
    3e60:	d8802e15 	stw	r2,184(sp)
    3e64:	003db706 	br	3544 <__reset+0xfbf03544>
    3e68:	00800b44 	movi	r2,45
    3e6c:	05adc83a 	sub	r22,zero,r22
    3e70:	d8802305 	stb	r2,140(sp)
    3e74:	003f3f06 	br	3b74 <__reset+0xfbf03b74>
    3e78:	0005883a 	mov	r2,zero
    3e7c:	003f5206 	br	3bc8 <__reset+0xfbf03bc8>
    3e80:	90a4703a 	and	r18,r18,r2
    3e84:	903f4e26 	beq	r18,zero,3bc0 <__reset+0xfbf03bc0>
    3e88:	003f4a06 	br	3bb4 <__reset+0xfbf03bb4>
    3e8c:	00800084 	movi	r2,2
    3e90:	10c5c83a 	sub	r2,r2,r3
    3e94:	003f8406 	br	3ca8 <__reset+0xfbf03ca8>
    3e98:	d8802d17 	ldw	r2,180(sp)
    3e9c:	d9002d17 	ldw	r4,180(sp)
    3ea0:	ac400043 	ldbu	r17,1(r21)
    3ea4:	10800017 	ldw	r2,0(r2)
    3ea8:	582b883a 	mov	r21,r11
    3eac:	d8802915 	stw	r2,164(sp)
    3eb0:	20800104 	addi	r2,r4,4
    3eb4:	d9002917 	ldw	r4,164(sp)
    3eb8:	d8802d15 	stw	r2,180(sp)
    3ebc:	203e7a0e 	bge	r4,zero,38a8 <__reset+0xfbf038a8>
    3ec0:	8c403fcc 	andi	r17,r17,255
    3ec4:	00bfffc4 	movi	r2,-1
    3ec8:	8c40201c 	xori	r17,r17,128
    3ecc:	d8802915 	stw	r2,164(sp)
    3ed0:	8c7fe004 	addi	r17,r17,-128
    3ed4:	00380706 	br	1ef4 <__reset+0xfbf01ef4>
    3ed8:	d8c02917 	ldw	r3,164(sp)
    3edc:	18c00084 	addi	r3,r3,2
    3ee0:	d8c02e15 	stw	r3,184(sp)
    3ee4:	1805883a 	mov	r2,r3
    3ee8:	183d960e 	bge	r3,zero,3544 <__reset+0xfbf03544>
    3eec:	003fd606 	br	3e48 <__reset+0xfbf03e48>
    3ef0:	0005883a 	mov	r2,zero
    3ef4:	003f8e06 	br	3d30 <__reset+0xfbf03d30>
    3ef8:	9080004c 	andi	r2,r18,1
    3efc:	103f811e 	bne	r2,zero,3d04 <__reset+0xfbf03d04>
    3f00:	d8802117 	ldw	r2,132(sp)
    3f04:	1405c83a 	sub	r2,r2,r16
    3f08:	d8803315 	stw	r2,204(sp)
    3f0c:	b47ef326 	beq	r22,r17,3adc <__reset+0xfbf03adc>
    3f10:	dd802617 	ldw	r22,152(sp)
    3f14:	003f1106 	br	3b5c <__reset+0xfbf03b5c>
    3f18:	d9c02785 	stb	r7,158(sp)
    3f1c:	00390406 	br	2330 <__reset+0xfbf02330>
    3f20:	d9c02785 	stb	r7,158(sp)
    3f24:	0038d306 	br	2274 <__reset+0xfbf02274>
    3f28:	d9c02785 	stb	r7,158(sp)
    3f2c:	003a6106 	br	28b4 <__reset+0xfbf028b4>
    3f30:	d9c02785 	stb	r7,158(sp)
    3f34:	003af806 	br	2b18 <__reset+0xfbf02b18>
    3f38:	0005883a 	mov	r2,zero
    3f3c:	003d7e06 	br	3538 <__reset+0xfbf03538>
    3f40:	d8802344 	addi	r2,sp,141
    3f44:	003f1306 	br	3b94 <__reset+0xfbf03b94>
    3f48:	d9c02785 	stb	r7,158(sp)
    3f4c:	00392306 	br	23dc <__reset+0xfbf023dc>
    3f50:	d9c02785 	stb	r7,158(sp)
    3f54:	003aa906 	br	29fc <__reset+0xfbf029fc>
    3f58:	d9c02785 	stb	r7,158(sp)
    3f5c:	003a3d06 	br	2854 <__reset+0xfbf02854>
    3f60:	d9c02785 	stb	r7,158(sp)
    3f64:	003aca06 	br	2a90 <__reset+0xfbf02a90>

00003f68 <__vfprintf_internal>:
    3f68:	00800074 	movhi	r2,1
    3f6c:	1089e504 	addi	r2,r2,10132
    3f70:	300f883a 	mov	r7,r6
    3f74:	280d883a 	mov	r6,r5
    3f78:	200b883a 	mov	r5,r4
    3f7c:	11000017 	ldw	r4,0(r2)
    3f80:	0001d701 	jmpi	1d70 <___vfprintf_internal_r>

00003f84 <__sbprintf>:
    3f84:	2880030b 	ldhu	r2,12(r5)
    3f88:	2ac01917 	ldw	r11,100(r5)
    3f8c:	2a80038b 	ldhu	r10,14(r5)
    3f90:	2a400717 	ldw	r9,28(r5)
    3f94:	2a000917 	ldw	r8,36(r5)
    3f98:	defee204 	addi	sp,sp,-1144
    3f9c:	00c10004 	movi	r3,1024
    3fa0:	dc011a15 	stw	r16,1128(sp)
    3fa4:	10bfff4c 	andi	r2,r2,65533
    3fa8:	2821883a 	mov	r16,r5
    3fac:	d8cb883a 	add	r5,sp,r3
    3fb0:	dc811c15 	stw	r18,1136(sp)
    3fb4:	dc411b15 	stw	r17,1132(sp)
    3fb8:	dfc11d15 	stw	ra,1140(sp)
    3fbc:	2025883a 	mov	r18,r4
    3fc0:	d881030d 	sth	r2,1036(sp)
    3fc4:	dac11915 	stw	r11,1124(sp)
    3fc8:	da81038d 	sth	r10,1038(sp)
    3fcc:	da410715 	stw	r9,1052(sp)
    3fd0:	da010915 	stw	r8,1060(sp)
    3fd4:	dec10015 	stw	sp,1024(sp)
    3fd8:	dec10415 	stw	sp,1040(sp)
    3fdc:	d8c10215 	stw	r3,1032(sp)
    3fe0:	d8c10515 	stw	r3,1044(sp)
    3fe4:	d8010615 	stw	zero,1048(sp)
    3fe8:	0001d700 	call	1d70 <___vfprintf_internal_r>
    3fec:	1023883a 	mov	r17,r2
    3ff0:	10000416 	blt	r2,zero,4004 <__sbprintf+0x80>
    3ff4:	d9410004 	addi	r5,sp,1024
    3ff8:	9009883a 	mov	r4,r18
    3ffc:	0005c380 	call	5c38 <_fflush_r>
    4000:	10000d1e 	bne	r2,zero,4038 <__sbprintf+0xb4>
    4004:	d881030b 	ldhu	r2,1036(sp)
    4008:	1080100c 	andi	r2,r2,64
    400c:	10000326 	beq	r2,zero,401c <__sbprintf+0x98>
    4010:	8080030b 	ldhu	r2,12(r16)
    4014:	10801014 	ori	r2,r2,64
    4018:	8080030d 	sth	r2,12(r16)
    401c:	8805883a 	mov	r2,r17
    4020:	dfc11d17 	ldw	ra,1140(sp)
    4024:	dc811c17 	ldw	r18,1136(sp)
    4028:	dc411b17 	ldw	r17,1132(sp)
    402c:	dc011a17 	ldw	r16,1128(sp)
    4030:	dec11e04 	addi	sp,sp,1144
    4034:	f800283a 	ret
    4038:	047fffc4 	movi	r17,-1
    403c:	003ff106 	br	4004 <__reset+0xfbf04004>

00004040 <__swsetup_r>:
    4040:	00800074 	movhi	r2,1
    4044:	defffd04 	addi	sp,sp,-12
    4048:	1089e504 	addi	r2,r2,10132
    404c:	dc400115 	stw	r17,4(sp)
    4050:	2023883a 	mov	r17,r4
    4054:	11000017 	ldw	r4,0(r2)
    4058:	dc000015 	stw	r16,0(sp)
    405c:	dfc00215 	stw	ra,8(sp)
    4060:	2821883a 	mov	r16,r5
    4064:	20000226 	beq	r4,zero,4070 <__swsetup_r+0x30>
    4068:	20800e17 	ldw	r2,56(r4)
    406c:	10003126 	beq	r2,zero,4134 <__swsetup_r+0xf4>
    4070:	8080030b 	ldhu	r2,12(r16)
    4074:	10c0020c 	andi	r3,r2,8
    4078:	1009883a 	mov	r4,r2
    407c:	18000f26 	beq	r3,zero,40bc <__swsetup_r+0x7c>
    4080:	80c00417 	ldw	r3,16(r16)
    4084:	18001526 	beq	r3,zero,40dc <__swsetup_r+0x9c>
    4088:	1100004c 	andi	r4,r2,1
    408c:	20001c1e 	bne	r4,zero,4100 <__swsetup_r+0xc0>
    4090:	1080008c 	andi	r2,r2,2
    4094:	1000291e 	bne	r2,zero,413c <__swsetup_r+0xfc>
    4098:	80800517 	ldw	r2,20(r16)
    409c:	80800215 	stw	r2,8(r16)
    40a0:	18001c26 	beq	r3,zero,4114 <__swsetup_r+0xd4>
    40a4:	0005883a 	mov	r2,zero
    40a8:	dfc00217 	ldw	ra,8(sp)
    40ac:	dc400117 	ldw	r17,4(sp)
    40b0:	dc000017 	ldw	r16,0(sp)
    40b4:	dec00304 	addi	sp,sp,12
    40b8:	f800283a 	ret
    40bc:	2080040c 	andi	r2,r4,16
    40c0:	10002e26 	beq	r2,zero,417c <__swsetup_r+0x13c>
    40c4:	2080010c 	andi	r2,r4,4
    40c8:	10001e1e 	bne	r2,zero,4144 <__swsetup_r+0x104>
    40cc:	80c00417 	ldw	r3,16(r16)
    40d0:	20800214 	ori	r2,r4,8
    40d4:	8080030d 	sth	r2,12(r16)
    40d8:	183feb1e 	bne	r3,zero,4088 <__reset+0xfbf04088>
    40dc:	1100a00c 	andi	r4,r2,640
    40e0:	01408004 	movi	r5,512
    40e4:	217fe826 	beq	r4,r5,4088 <__reset+0xfbf04088>
    40e8:	800b883a 	mov	r5,r16
    40ec:	8809883a 	mov	r4,r17
    40f0:	0006bb80 	call	6bb8 <__smakebuf_r>
    40f4:	8080030b 	ldhu	r2,12(r16)
    40f8:	80c00417 	ldw	r3,16(r16)
    40fc:	003fe206 	br	4088 <__reset+0xfbf04088>
    4100:	80800517 	ldw	r2,20(r16)
    4104:	80000215 	stw	zero,8(r16)
    4108:	0085c83a 	sub	r2,zero,r2
    410c:	80800615 	stw	r2,24(r16)
    4110:	183fe41e 	bne	r3,zero,40a4 <__reset+0xfbf040a4>
    4114:	80c0030b 	ldhu	r3,12(r16)
    4118:	0005883a 	mov	r2,zero
    411c:	1900200c 	andi	r4,r3,128
    4120:	203fe126 	beq	r4,zero,40a8 <__reset+0xfbf040a8>
    4124:	18c01014 	ori	r3,r3,64
    4128:	80c0030d 	sth	r3,12(r16)
    412c:	00bfffc4 	movi	r2,-1
    4130:	003fdd06 	br	40a8 <__reset+0xfbf040a8>
    4134:	00060140 	call	6014 <__sinit>
    4138:	003fcd06 	br	4070 <__reset+0xfbf04070>
    413c:	0005883a 	mov	r2,zero
    4140:	003fd606 	br	409c <__reset+0xfbf0409c>
    4144:	81400c17 	ldw	r5,48(r16)
    4148:	28000626 	beq	r5,zero,4164 <__swsetup_r+0x124>
    414c:	80801004 	addi	r2,r16,64
    4150:	28800326 	beq	r5,r2,4160 <__swsetup_r+0x120>
    4154:	8809883a 	mov	r4,r17
    4158:	00061880 	call	6188 <_free_r>
    415c:	8100030b 	ldhu	r4,12(r16)
    4160:	80000c15 	stw	zero,48(r16)
    4164:	80c00417 	ldw	r3,16(r16)
    4168:	00bff6c4 	movi	r2,-37
    416c:	1108703a 	and	r4,r2,r4
    4170:	80000115 	stw	zero,4(r16)
    4174:	80c00015 	stw	r3,0(r16)
    4178:	003fd506 	br	40d0 <__reset+0xfbf040d0>
    417c:	00800244 	movi	r2,9
    4180:	88800015 	stw	r2,0(r17)
    4184:	20801014 	ori	r2,r4,64
    4188:	8080030d 	sth	r2,12(r16)
    418c:	00bfffc4 	movi	r2,-1
    4190:	003fc506 	br	40a8 <__reset+0xfbf040a8>

00004194 <quorem>:
    4194:	defff704 	addi	sp,sp,-36
    4198:	dc800215 	stw	r18,8(sp)
    419c:	20800417 	ldw	r2,16(r4)
    41a0:	2c800417 	ldw	r18,16(r5)
    41a4:	dfc00815 	stw	ra,32(sp)
    41a8:	ddc00715 	stw	r23,28(sp)
    41ac:	dd800615 	stw	r22,24(sp)
    41b0:	dd400515 	stw	r21,20(sp)
    41b4:	dd000415 	stw	r20,16(sp)
    41b8:	dcc00315 	stw	r19,12(sp)
    41bc:	dc400115 	stw	r17,4(sp)
    41c0:	dc000015 	stw	r16,0(sp)
    41c4:	14807116 	blt	r2,r18,438c <quorem+0x1f8>
    41c8:	94bfffc4 	addi	r18,r18,-1
    41cc:	94ad883a 	add	r22,r18,r18
    41d0:	b5ad883a 	add	r22,r22,r22
    41d4:	2c400504 	addi	r17,r5,20
    41d8:	8da9883a 	add	r20,r17,r22
    41dc:	25400504 	addi	r21,r4,20
    41e0:	282f883a 	mov	r23,r5
    41e4:	adad883a 	add	r22,r21,r22
    41e8:	a1400017 	ldw	r5,0(r20)
    41ec:	2021883a 	mov	r16,r4
    41f0:	b1000017 	ldw	r4,0(r22)
    41f4:	29400044 	addi	r5,r5,1
    41f8:	000bc6c0 	call	bc6c <__udivsi3>
    41fc:	1027883a 	mov	r19,r2
    4200:	10002c26 	beq	r2,zero,42b4 <quorem+0x120>
    4204:	a813883a 	mov	r9,r21
    4208:	880b883a 	mov	r5,r17
    420c:	0009883a 	mov	r4,zero
    4210:	000d883a 	mov	r6,zero
    4214:	2a000017 	ldw	r8,0(r5)
    4218:	49c00017 	ldw	r7,0(r9)
    421c:	29400104 	addi	r5,r5,4
    4220:	40bfffcc 	andi	r2,r8,65535
    4224:	14c5383a 	mul	r2,r2,r19
    4228:	4010d43a 	srli	r8,r8,16
    422c:	38ffffcc 	andi	r3,r7,65535
    4230:	1105883a 	add	r2,r2,r4
    4234:	1008d43a 	srli	r4,r2,16
    4238:	44d1383a 	mul	r8,r8,r19
    423c:	198d883a 	add	r6,r3,r6
    4240:	10ffffcc 	andi	r3,r2,65535
    4244:	30c7c83a 	sub	r3,r6,r3
    4248:	380ed43a 	srli	r7,r7,16
    424c:	4105883a 	add	r2,r8,r4
    4250:	180dd43a 	srai	r6,r3,16
    4254:	113fffcc 	andi	r4,r2,65535
    4258:	390fc83a 	sub	r7,r7,r4
    425c:	398d883a 	add	r6,r7,r6
    4260:	300e943a 	slli	r7,r6,16
    4264:	18ffffcc 	andi	r3,r3,65535
    4268:	1008d43a 	srli	r4,r2,16
    426c:	38ceb03a 	or	r7,r7,r3
    4270:	49c00015 	stw	r7,0(r9)
    4274:	300dd43a 	srai	r6,r6,16
    4278:	4a400104 	addi	r9,r9,4
    427c:	a17fe52e 	bgeu	r20,r5,4214 <__reset+0xfbf04214>
    4280:	b0800017 	ldw	r2,0(r22)
    4284:	10000b1e 	bne	r2,zero,42b4 <quorem+0x120>
    4288:	b0bfff04 	addi	r2,r22,-4
    428c:	a880082e 	bgeu	r21,r2,42b0 <quorem+0x11c>
    4290:	b0ffff17 	ldw	r3,-4(r22)
    4294:	18000326 	beq	r3,zero,42a4 <quorem+0x110>
    4298:	00000506 	br	42b0 <quorem+0x11c>
    429c:	10c00017 	ldw	r3,0(r2)
    42a0:	1800031e 	bne	r3,zero,42b0 <quorem+0x11c>
    42a4:	10bfff04 	addi	r2,r2,-4
    42a8:	94bfffc4 	addi	r18,r18,-1
    42ac:	a8bffb36 	bltu	r21,r2,429c <__reset+0xfbf0429c>
    42b0:	84800415 	stw	r18,16(r16)
    42b4:	b80b883a 	mov	r5,r23
    42b8:	8009883a 	mov	r4,r16
    42bc:	00081d00 	call	81d0 <__mcmp>
    42c0:	10002616 	blt	r2,zero,435c <quorem+0x1c8>
    42c4:	9cc00044 	addi	r19,r19,1
    42c8:	a805883a 	mov	r2,r21
    42cc:	000b883a 	mov	r5,zero
    42d0:	11000017 	ldw	r4,0(r2)
    42d4:	89800017 	ldw	r6,0(r17)
    42d8:	10800104 	addi	r2,r2,4
    42dc:	20ffffcc 	andi	r3,r4,65535
    42e0:	194b883a 	add	r5,r3,r5
    42e4:	30ffffcc 	andi	r3,r6,65535
    42e8:	28c7c83a 	sub	r3,r5,r3
    42ec:	300cd43a 	srli	r6,r6,16
    42f0:	2008d43a 	srli	r4,r4,16
    42f4:	180bd43a 	srai	r5,r3,16
    42f8:	18ffffcc 	andi	r3,r3,65535
    42fc:	2189c83a 	sub	r4,r4,r6
    4300:	2149883a 	add	r4,r4,r5
    4304:	200c943a 	slli	r6,r4,16
    4308:	8c400104 	addi	r17,r17,4
    430c:	200bd43a 	srai	r5,r4,16
    4310:	30c6b03a 	or	r3,r6,r3
    4314:	10ffff15 	stw	r3,-4(r2)
    4318:	a47fed2e 	bgeu	r20,r17,42d0 <__reset+0xfbf042d0>
    431c:	9485883a 	add	r2,r18,r18
    4320:	1085883a 	add	r2,r2,r2
    4324:	a887883a 	add	r3,r21,r2
    4328:	18800017 	ldw	r2,0(r3)
    432c:	10000b1e 	bne	r2,zero,435c <quorem+0x1c8>
    4330:	18bfff04 	addi	r2,r3,-4
    4334:	a880082e 	bgeu	r21,r2,4358 <quorem+0x1c4>
    4338:	18ffff17 	ldw	r3,-4(r3)
    433c:	18000326 	beq	r3,zero,434c <quorem+0x1b8>
    4340:	00000506 	br	4358 <quorem+0x1c4>
    4344:	10c00017 	ldw	r3,0(r2)
    4348:	1800031e 	bne	r3,zero,4358 <quorem+0x1c4>
    434c:	10bfff04 	addi	r2,r2,-4
    4350:	94bfffc4 	addi	r18,r18,-1
    4354:	a8bffb36 	bltu	r21,r2,4344 <__reset+0xfbf04344>
    4358:	84800415 	stw	r18,16(r16)
    435c:	9805883a 	mov	r2,r19
    4360:	dfc00817 	ldw	ra,32(sp)
    4364:	ddc00717 	ldw	r23,28(sp)
    4368:	dd800617 	ldw	r22,24(sp)
    436c:	dd400517 	ldw	r21,20(sp)
    4370:	dd000417 	ldw	r20,16(sp)
    4374:	dcc00317 	ldw	r19,12(sp)
    4378:	dc800217 	ldw	r18,8(sp)
    437c:	dc400117 	ldw	r17,4(sp)
    4380:	dc000017 	ldw	r16,0(sp)
    4384:	dec00904 	addi	sp,sp,36
    4388:	f800283a 	ret
    438c:	0005883a 	mov	r2,zero
    4390:	003ff306 	br	4360 <__reset+0xfbf04360>

00004394 <_dtoa_r>:
    4394:	20801017 	ldw	r2,64(r4)
    4398:	deffde04 	addi	sp,sp,-136
    439c:	df002015 	stw	fp,128(sp)
    43a0:	dcc01b15 	stw	r19,108(sp)
    43a4:	dc801a15 	stw	r18,104(sp)
    43a8:	dc401915 	stw	r17,100(sp)
    43ac:	dc001815 	stw	r16,96(sp)
    43b0:	dfc02115 	stw	ra,132(sp)
    43b4:	ddc01f15 	stw	r23,124(sp)
    43b8:	dd801e15 	stw	r22,120(sp)
    43bc:	dd401d15 	stw	r21,116(sp)
    43c0:	dd001c15 	stw	r20,112(sp)
    43c4:	d9c00315 	stw	r7,12(sp)
    43c8:	2039883a 	mov	fp,r4
    43cc:	3023883a 	mov	r17,r6
    43d0:	2825883a 	mov	r18,r5
    43d4:	dc002417 	ldw	r16,144(sp)
    43d8:	3027883a 	mov	r19,r6
    43dc:	10000826 	beq	r2,zero,4400 <_dtoa_r+0x6c>
    43e0:	21801117 	ldw	r6,68(r4)
    43e4:	00c00044 	movi	r3,1
    43e8:	100b883a 	mov	r5,r2
    43ec:	1986983a 	sll	r3,r3,r6
    43f0:	11800115 	stw	r6,4(r2)
    43f4:	10c00215 	stw	r3,8(r2)
    43f8:	00079b00 	call	79b0 <_Bfree>
    43fc:	e0001015 	stw	zero,64(fp)
    4400:	88002e16 	blt	r17,zero,44bc <_dtoa_r+0x128>
    4404:	80000015 	stw	zero,0(r16)
    4408:	889ffc2c 	andhi	r2,r17,32752
    440c:	00dffc34 	movhi	r3,32752
    4410:	10c01c26 	beq	r2,r3,4484 <_dtoa_r+0xf0>
    4414:	000d883a 	mov	r6,zero
    4418:	000f883a 	mov	r7,zero
    441c:	9009883a 	mov	r4,r18
    4420:	980b883a 	mov	r5,r19
    4424:	000cebc0 	call	cebc <__eqdf2>
    4428:	10002b1e 	bne	r2,zero,44d8 <_dtoa_r+0x144>
    442c:	d9c02317 	ldw	r7,140(sp)
    4430:	00800044 	movi	r2,1
    4434:	38800015 	stw	r2,0(r7)
    4438:	d8802517 	ldw	r2,148(sp)
    443c:	10019e26 	beq	r2,zero,4ab8 <_dtoa_r+0x724>
    4440:	d8c02517 	ldw	r3,148(sp)
    4444:	00800074 	movhi	r2,1
    4448:	10814644 	addi	r2,r2,1305
    444c:	18800015 	stw	r2,0(r3)
    4450:	10bfffc4 	addi	r2,r2,-1
    4454:	dfc02117 	ldw	ra,132(sp)
    4458:	df002017 	ldw	fp,128(sp)
    445c:	ddc01f17 	ldw	r23,124(sp)
    4460:	dd801e17 	ldw	r22,120(sp)
    4464:	dd401d17 	ldw	r21,116(sp)
    4468:	dd001c17 	ldw	r20,112(sp)
    446c:	dcc01b17 	ldw	r19,108(sp)
    4470:	dc801a17 	ldw	r18,104(sp)
    4474:	dc401917 	ldw	r17,100(sp)
    4478:	dc001817 	ldw	r16,96(sp)
    447c:	dec02204 	addi	sp,sp,136
    4480:	f800283a 	ret
    4484:	d8c02317 	ldw	r3,140(sp)
    4488:	0089c3c4 	movi	r2,9999
    448c:	18800015 	stw	r2,0(r3)
    4490:	90017726 	beq	r18,zero,4a70 <_dtoa_r+0x6dc>
    4494:	00800074 	movhi	r2,1
    4498:	10815204 	addi	r2,r2,1352
    449c:	d9002517 	ldw	r4,148(sp)
    44a0:	203fec26 	beq	r4,zero,4454 <__reset+0xfbf04454>
    44a4:	10c000c7 	ldb	r3,3(r2)
    44a8:	1801781e 	bne	r3,zero,4a8c <_dtoa_r+0x6f8>
    44ac:	10c000c4 	addi	r3,r2,3
    44b0:	d9802517 	ldw	r6,148(sp)
    44b4:	30c00015 	stw	r3,0(r6)
    44b8:	003fe606 	br	4454 <__reset+0xfbf04454>
    44bc:	04e00034 	movhi	r19,32768
    44c0:	9cffffc4 	addi	r19,r19,-1
    44c4:	00800044 	movi	r2,1
    44c8:	8ce6703a 	and	r19,r17,r19
    44cc:	80800015 	stw	r2,0(r16)
    44d0:	9823883a 	mov	r17,r19
    44d4:	003fcc06 	br	4408 <__reset+0xfbf04408>
    44d8:	d8800204 	addi	r2,sp,8
    44dc:	d8800015 	stw	r2,0(sp)
    44e0:	d9c00104 	addi	r7,sp,4
    44e4:	900b883a 	mov	r5,r18
    44e8:	980d883a 	mov	r6,r19
    44ec:	e009883a 	mov	r4,fp
    44f0:	8820d53a 	srli	r16,r17,20
    44f4:	000859c0 	call	859c <__d2b>
    44f8:	d8800915 	stw	r2,36(sp)
    44fc:	8001651e 	bne	r16,zero,4a94 <_dtoa_r+0x700>
    4500:	dd800217 	ldw	r22,8(sp)
    4504:	dc000117 	ldw	r16,4(sp)
    4508:	00800804 	movi	r2,32
    450c:	b421883a 	add	r16,r22,r16
    4510:	80c10c84 	addi	r3,r16,1074
    4514:	10c2d10e 	bge	r2,r3,505c <_dtoa_r+0xcc8>
    4518:	00801004 	movi	r2,64
    451c:	81010484 	addi	r4,r16,1042
    4520:	10c7c83a 	sub	r3,r2,r3
    4524:	9108d83a 	srl	r4,r18,r4
    4528:	88e2983a 	sll	r17,r17,r3
    452c:	2448b03a 	or	r4,r4,r17
    4530:	000e2840 	call	e284 <__floatunsidf>
    4534:	017f8434 	movhi	r5,65040
    4538:	01800044 	movi	r6,1
    453c:	1009883a 	mov	r4,r2
    4540:	194b883a 	add	r5,r3,r5
    4544:	843fffc4 	addi	r16,r16,-1
    4548:	d9801115 	stw	r6,68(sp)
    454c:	000d883a 	mov	r6,zero
    4550:	01cffe34 	movhi	r7,16376
    4554:	000d82c0 	call	d82c <__subdf3>
    4558:	0198dbf4 	movhi	r6,25455
    455c:	01cff4f4 	movhi	r7,16339
    4560:	3190d844 	addi	r6,r6,17249
    4564:	39e1e9c4 	addi	r7,r7,-30809
    4568:	1009883a 	mov	r4,r2
    456c:	180b883a 	mov	r5,r3
    4570:	000d1140 	call	d114 <__muldf3>
    4574:	01a2d874 	movhi	r6,35681
    4578:	01cff1f4 	movhi	r7,16327
    457c:	31b22cc4 	addi	r6,r6,-14157
    4580:	39e28a04 	addi	r7,r7,-30168
    4584:	180b883a 	mov	r5,r3
    4588:	1009883a 	mov	r4,r2
    458c:	000bd280 	call	bd28 <__adddf3>
    4590:	8009883a 	mov	r4,r16
    4594:	1029883a 	mov	r20,r2
    4598:	1823883a 	mov	r17,r3
    459c:	000e1a80 	call	e1a8 <__floatsidf>
    45a0:	019427f4 	movhi	r6,20639
    45a4:	01cff4f4 	movhi	r7,16339
    45a8:	319e7ec4 	addi	r6,r6,31227
    45ac:	39d104c4 	addi	r7,r7,17427
    45b0:	1009883a 	mov	r4,r2
    45b4:	180b883a 	mov	r5,r3
    45b8:	000d1140 	call	d114 <__muldf3>
    45bc:	100d883a 	mov	r6,r2
    45c0:	180f883a 	mov	r7,r3
    45c4:	a009883a 	mov	r4,r20
    45c8:	880b883a 	mov	r5,r17
    45cc:	000bd280 	call	bd28 <__adddf3>
    45d0:	1009883a 	mov	r4,r2
    45d4:	180b883a 	mov	r5,r3
    45d8:	1029883a 	mov	r20,r2
    45dc:	1823883a 	mov	r17,r3
    45e0:	000e1280 	call	e128 <__fixdfsi>
    45e4:	000d883a 	mov	r6,zero
    45e8:	000f883a 	mov	r7,zero
    45ec:	a009883a 	mov	r4,r20
    45f0:	880b883a 	mov	r5,r17
    45f4:	d8800515 	stw	r2,20(sp)
    45f8:	000d0200 	call	d020 <__ledf2>
    45fc:	10028716 	blt	r2,zero,501c <_dtoa_r+0xc88>
    4600:	d8c00517 	ldw	r3,20(sp)
    4604:	00800584 	movi	r2,22
    4608:	10c27536 	bltu	r2,r3,4fe0 <_dtoa_r+0xc4c>
    460c:	180490fa 	slli	r2,r3,3
    4610:	00c00074 	movhi	r3,1
    4614:	18c16e04 	addi	r3,r3,1464
    4618:	1885883a 	add	r2,r3,r2
    461c:	11000017 	ldw	r4,0(r2)
    4620:	11400117 	ldw	r5,4(r2)
    4624:	900d883a 	mov	r6,r18
    4628:	980f883a 	mov	r7,r19
    462c:	000cf440 	call	cf44 <__gedf2>
    4630:	00828d0e 	bge	zero,r2,5068 <_dtoa_r+0xcd4>
    4634:	d9000517 	ldw	r4,20(sp)
    4638:	d8000e15 	stw	zero,56(sp)
    463c:	213fffc4 	addi	r4,r4,-1
    4640:	d9000515 	stw	r4,20(sp)
    4644:	b42dc83a 	sub	r22,r22,r16
    4648:	b5bfffc4 	addi	r22,r22,-1
    464c:	b0026f16 	blt	r22,zero,500c <_dtoa_r+0xc78>
    4650:	d8000815 	stw	zero,32(sp)
    4654:	d9c00517 	ldw	r7,20(sp)
    4658:	38026416 	blt	r7,zero,4fec <_dtoa_r+0xc58>
    465c:	b1ed883a 	add	r22,r22,r7
    4660:	d9c00d15 	stw	r7,52(sp)
    4664:	d8000a15 	stw	zero,40(sp)
    4668:	d9800317 	ldw	r6,12(sp)
    466c:	00800244 	movi	r2,9
    4670:	11811436 	bltu	r2,r6,4ac4 <_dtoa_r+0x730>
    4674:	00800144 	movi	r2,5
    4678:	1184e10e 	bge	r2,r6,5a00 <_dtoa_r+0x166c>
    467c:	31bfff04 	addi	r6,r6,-4
    4680:	d9800315 	stw	r6,12(sp)
    4684:	0023883a 	mov	r17,zero
    4688:	d9800317 	ldw	r6,12(sp)
    468c:	008000c4 	movi	r2,3
    4690:	30836726 	beq	r6,r2,5430 <_dtoa_r+0x109c>
    4694:	1183410e 	bge	r2,r6,539c <_dtoa_r+0x1008>
    4698:	d9c00317 	ldw	r7,12(sp)
    469c:	00800104 	movi	r2,4
    46a0:	38827c26 	beq	r7,r2,5094 <_dtoa_r+0xd00>
    46a4:	00800144 	movi	r2,5
    46a8:	3884c41e 	bne	r7,r2,59bc <_dtoa_r+0x1628>
    46ac:	00800044 	movi	r2,1
    46b0:	d8800b15 	stw	r2,44(sp)
    46b4:	d8c00517 	ldw	r3,20(sp)
    46b8:	d9002217 	ldw	r4,136(sp)
    46bc:	1907883a 	add	r3,r3,r4
    46c0:	19800044 	addi	r6,r3,1
    46c4:	d8c00c15 	stw	r3,48(sp)
    46c8:	d9800615 	stw	r6,24(sp)
    46cc:	0183a40e 	bge	zero,r6,5560 <_dtoa_r+0x11cc>
    46d0:	d9800617 	ldw	r6,24(sp)
    46d4:	3021883a 	mov	r16,r6
    46d8:	e0001115 	stw	zero,68(fp)
    46dc:	008005c4 	movi	r2,23
    46e0:	1184c92e 	bgeu	r2,r6,5a08 <_dtoa_r+0x1674>
    46e4:	00c00044 	movi	r3,1
    46e8:	00800104 	movi	r2,4
    46ec:	1085883a 	add	r2,r2,r2
    46f0:	11000504 	addi	r4,r2,20
    46f4:	180b883a 	mov	r5,r3
    46f8:	18c00044 	addi	r3,r3,1
    46fc:	313ffb2e 	bgeu	r6,r4,46ec <__reset+0xfbf046ec>
    4700:	e1401115 	stw	r5,68(fp)
    4704:	e009883a 	mov	r4,fp
    4708:	00079080 	call	7908 <_Balloc>
    470c:	d8800715 	stw	r2,28(sp)
    4710:	e0801015 	stw	r2,64(fp)
    4714:	00800384 	movi	r2,14
    4718:	1400f736 	bltu	r2,r16,4af8 <_dtoa_r+0x764>
    471c:	8800f626 	beq	r17,zero,4af8 <_dtoa_r+0x764>
    4720:	d9c00517 	ldw	r7,20(sp)
    4724:	01c39a0e 	bge	zero,r7,5590 <_dtoa_r+0x11fc>
    4728:	388003cc 	andi	r2,r7,15
    472c:	100490fa 	slli	r2,r2,3
    4730:	382bd13a 	srai	r21,r7,4
    4734:	00c00074 	movhi	r3,1
    4738:	18c16e04 	addi	r3,r3,1464
    473c:	1885883a 	add	r2,r3,r2
    4740:	a8c0040c 	andi	r3,r21,16
    4744:	12400017 	ldw	r9,0(r2)
    4748:	12000117 	ldw	r8,4(r2)
    474c:	18037926 	beq	r3,zero,5534 <_dtoa_r+0x11a0>
    4750:	00800074 	movhi	r2,1
    4754:	10816404 	addi	r2,r2,1424
    4758:	11800817 	ldw	r6,32(r2)
    475c:	11c00917 	ldw	r7,36(r2)
    4760:	9009883a 	mov	r4,r18
    4764:	980b883a 	mov	r5,r19
    4768:	da001715 	stw	r8,92(sp)
    476c:	da401615 	stw	r9,88(sp)
    4770:	000c5d40 	call	c5d4 <__divdf3>
    4774:	da001717 	ldw	r8,92(sp)
    4778:	da401617 	ldw	r9,88(sp)
    477c:	ad4003cc 	andi	r21,r21,15
    4780:	040000c4 	movi	r16,3
    4784:	1023883a 	mov	r17,r2
    4788:	1829883a 	mov	r20,r3
    478c:	a8001126 	beq	r21,zero,47d4 <_dtoa_r+0x440>
    4790:	05c00074 	movhi	r23,1
    4794:	bdc16404 	addi	r23,r23,1424
    4798:	4805883a 	mov	r2,r9
    479c:	4007883a 	mov	r3,r8
    47a0:	a980004c 	andi	r6,r21,1
    47a4:	1009883a 	mov	r4,r2
    47a8:	a82bd07a 	srai	r21,r21,1
    47ac:	180b883a 	mov	r5,r3
    47b0:	30000426 	beq	r6,zero,47c4 <_dtoa_r+0x430>
    47b4:	b9800017 	ldw	r6,0(r23)
    47b8:	b9c00117 	ldw	r7,4(r23)
    47bc:	84000044 	addi	r16,r16,1
    47c0:	000d1140 	call	d114 <__muldf3>
    47c4:	bdc00204 	addi	r23,r23,8
    47c8:	a83ff51e 	bne	r21,zero,47a0 <__reset+0xfbf047a0>
    47cc:	1013883a 	mov	r9,r2
    47d0:	1811883a 	mov	r8,r3
    47d4:	480d883a 	mov	r6,r9
    47d8:	400f883a 	mov	r7,r8
    47dc:	8809883a 	mov	r4,r17
    47e0:	a00b883a 	mov	r5,r20
    47e4:	000c5d40 	call	c5d4 <__divdf3>
    47e8:	d8800f15 	stw	r2,60(sp)
    47ec:	d8c01015 	stw	r3,64(sp)
    47f0:	d8c00e17 	ldw	r3,56(sp)
    47f4:	18000626 	beq	r3,zero,4810 <_dtoa_r+0x47c>
    47f8:	d9000f17 	ldw	r4,60(sp)
    47fc:	d9401017 	ldw	r5,64(sp)
    4800:	000d883a 	mov	r6,zero
    4804:	01cffc34 	movhi	r7,16368
    4808:	000d0200 	call	d020 <__ledf2>
    480c:	10040b16 	blt	r2,zero,583c <_dtoa_r+0x14a8>
    4810:	8009883a 	mov	r4,r16
    4814:	000e1a80 	call	e1a8 <__floatsidf>
    4818:	d9800f17 	ldw	r6,60(sp)
    481c:	d9c01017 	ldw	r7,64(sp)
    4820:	1009883a 	mov	r4,r2
    4824:	180b883a 	mov	r5,r3
    4828:	000d1140 	call	d114 <__muldf3>
    482c:	000d883a 	mov	r6,zero
    4830:	01d00734 	movhi	r7,16412
    4834:	1009883a 	mov	r4,r2
    4838:	180b883a 	mov	r5,r3
    483c:	000bd280 	call	bd28 <__adddf3>
    4840:	1021883a 	mov	r16,r2
    4844:	d8800617 	ldw	r2,24(sp)
    4848:	047f3034 	movhi	r17,64704
    484c:	1c63883a 	add	r17,r3,r17
    4850:	10031826 	beq	r2,zero,54b4 <_dtoa_r+0x1120>
    4854:	d8c00517 	ldw	r3,20(sp)
    4858:	db000617 	ldw	r12,24(sp)
    485c:	d8c01315 	stw	r3,76(sp)
    4860:	d9000b17 	ldw	r4,44(sp)
    4864:	20038f26 	beq	r4,zero,56a4 <_dtoa_r+0x1310>
    4868:	60bfffc4 	addi	r2,r12,-1
    486c:	100490fa 	slli	r2,r2,3
    4870:	00c00074 	movhi	r3,1
    4874:	18c16e04 	addi	r3,r3,1464
    4878:	1885883a 	add	r2,r3,r2
    487c:	11800017 	ldw	r6,0(r2)
    4880:	11c00117 	ldw	r7,4(r2)
    4884:	d8800717 	ldw	r2,28(sp)
    4888:	0009883a 	mov	r4,zero
    488c:	014ff834 	movhi	r5,16352
    4890:	db001615 	stw	r12,88(sp)
    4894:	15c00044 	addi	r23,r2,1
    4898:	000c5d40 	call	c5d4 <__divdf3>
    489c:	800d883a 	mov	r6,r16
    48a0:	880f883a 	mov	r7,r17
    48a4:	1009883a 	mov	r4,r2
    48a8:	180b883a 	mov	r5,r3
    48ac:	000d82c0 	call	d82c <__subdf3>
    48b0:	d9401017 	ldw	r5,64(sp)
    48b4:	d9000f17 	ldw	r4,60(sp)
    48b8:	102b883a 	mov	r21,r2
    48bc:	d8c01215 	stw	r3,72(sp)
    48c0:	000e1280 	call	e128 <__fixdfsi>
    48c4:	1009883a 	mov	r4,r2
    48c8:	1029883a 	mov	r20,r2
    48cc:	000e1a80 	call	e1a8 <__floatsidf>
    48d0:	d9000f17 	ldw	r4,60(sp)
    48d4:	d9401017 	ldw	r5,64(sp)
    48d8:	100d883a 	mov	r6,r2
    48dc:	180f883a 	mov	r7,r3
    48e0:	000d82c0 	call	d82c <__subdf3>
    48e4:	1823883a 	mov	r17,r3
    48e8:	d8c00717 	ldw	r3,28(sp)
    48ec:	d9401217 	ldw	r5,72(sp)
    48f0:	a2000c04 	addi	r8,r20,48
    48f4:	1021883a 	mov	r16,r2
    48f8:	1a000005 	stb	r8,0(r3)
    48fc:	800d883a 	mov	r6,r16
    4900:	880f883a 	mov	r7,r17
    4904:	a809883a 	mov	r4,r21
    4908:	4029883a 	mov	r20,r8
    490c:	000cf440 	call	cf44 <__gedf2>
    4910:	00841d16 	blt	zero,r2,5988 <_dtoa_r+0x15f4>
    4914:	800d883a 	mov	r6,r16
    4918:	880f883a 	mov	r7,r17
    491c:	0009883a 	mov	r4,zero
    4920:	014ffc34 	movhi	r5,16368
    4924:	000d82c0 	call	d82c <__subdf3>
    4928:	d9401217 	ldw	r5,72(sp)
    492c:	100d883a 	mov	r6,r2
    4930:	180f883a 	mov	r7,r3
    4934:	a809883a 	mov	r4,r21
    4938:	000cf440 	call	cf44 <__gedf2>
    493c:	db001617 	ldw	r12,88(sp)
    4940:	00840e16 	blt	zero,r2,597c <_dtoa_r+0x15e8>
    4944:	00800044 	movi	r2,1
    4948:	13006b0e 	bge	r2,r12,4af8 <_dtoa_r+0x764>
    494c:	d9000717 	ldw	r4,28(sp)
    4950:	dd800f15 	stw	r22,60(sp)
    4954:	dcc01015 	stw	r19,64(sp)
    4958:	2319883a 	add	r12,r4,r12
    495c:	dcc01217 	ldw	r19,72(sp)
    4960:	602d883a 	mov	r22,r12
    4964:	dc801215 	stw	r18,72(sp)
    4968:	b825883a 	mov	r18,r23
    496c:	00000906 	br	4994 <_dtoa_r+0x600>
    4970:	000d82c0 	call	d82c <__subdf3>
    4974:	a80d883a 	mov	r6,r21
    4978:	980f883a 	mov	r7,r19
    497c:	1009883a 	mov	r4,r2
    4980:	180b883a 	mov	r5,r3
    4984:	000d0200 	call	d020 <__ledf2>
    4988:	1003e816 	blt	r2,zero,592c <_dtoa_r+0x1598>
    498c:	b825883a 	mov	r18,r23
    4990:	bd83e926 	beq	r23,r22,5938 <_dtoa_r+0x15a4>
    4994:	a809883a 	mov	r4,r21
    4998:	980b883a 	mov	r5,r19
    499c:	000d883a 	mov	r6,zero
    49a0:	01d00934 	movhi	r7,16420
    49a4:	000d1140 	call	d114 <__muldf3>
    49a8:	000d883a 	mov	r6,zero
    49ac:	01d00934 	movhi	r7,16420
    49b0:	8009883a 	mov	r4,r16
    49b4:	880b883a 	mov	r5,r17
    49b8:	102b883a 	mov	r21,r2
    49bc:	1827883a 	mov	r19,r3
    49c0:	000d1140 	call	d114 <__muldf3>
    49c4:	180b883a 	mov	r5,r3
    49c8:	1009883a 	mov	r4,r2
    49cc:	1821883a 	mov	r16,r3
    49d0:	1023883a 	mov	r17,r2
    49d4:	000e1280 	call	e128 <__fixdfsi>
    49d8:	1009883a 	mov	r4,r2
    49dc:	1029883a 	mov	r20,r2
    49e0:	000e1a80 	call	e1a8 <__floatsidf>
    49e4:	8809883a 	mov	r4,r17
    49e8:	800b883a 	mov	r5,r16
    49ec:	100d883a 	mov	r6,r2
    49f0:	180f883a 	mov	r7,r3
    49f4:	000d82c0 	call	d82c <__subdf3>
    49f8:	a5000c04 	addi	r20,r20,48
    49fc:	a80d883a 	mov	r6,r21
    4a00:	980f883a 	mov	r7,r19
    4a04:	1009883a 	mov	r4,r2
    4a08:	180b883a 	mov	r5,r3
    4a0c:	95000005 	stb	r20,0(r18)
    4a10:	1021883a 	mov	r16,r2
    4a14:	1823883a 	mov	r17,r3
    4a18:	000d0200 	call	d020 <__ledf2>
    4a1c:	bdc00044 	addi	r23,r23,1
    4a20:	800d883a 	mov	r6,r16
    4a24:	880f883a 	mov	r7,r17
    4a28:	0009883a 	mov	r4,zero
    4a2c:	014ffc34 	movhi	r5,16368
    4a30:	103fcf0e 	bge	r2,zero,4970 <__reset+0xfbf04970>
    4a34:	d8c01317 	ldw	r3,76(sp)
    4a38:	d8c00515 	stw	r3,20(sp)
    4a3c:	d9400917 	ldw	r5,36(sp)
    4a40:	e009883a 	mov	r4,fp
    4a44:	00079b00 	call	79b0 <_Bfree>
    4a48:	d9000517 	ldw	r4,20(sp)
    4a4c:	d9802317 	ldw	r6,140(sp)
    4a50:	d9c02517 	ldw	r7,148(sp)
    4a54:	b8000005 	stb	zero,0(r23)
    4a58:	20800044 	addi	r2,r4,1
    4a5c:	30800015 	stw	r2,0(r6)
    4a60:	3802aa26 	beq	r7,zero,550c <_dtoa_r+0x1178>
    4a64:	3dc00015 	stw	r23,0(r7)
    4a68:	d8800717 	ldw	r2,28(sp)
    4a6c:	003e7906 	br	4454 <__reset+0xfbf04454>
    4a70:	00800434 	movhi	r2,16
    4a74:	10bfffc4 	addi	r2,r2,-1
    4a78:	88a2703a 	and	r17,r17,r2
    4a7c:	883e851e 	bne	r17,zero,4494 <__reset+0xfbf04494>
    4a80:	00800074 	movhi	r2,1
    4a84:	10814f04 	addi	r2,r2,1340
    4a88:	003e8406 	br	449c <__reset+0xfbf0449c>
    4a8c:	10c00204 	addi	r3,r2,8
    4a90:	003e8706 	br	44b0 <__reset+0xfbf044b0>
    4a94:	01400434 	movhi	r5,16
    4a98:	297fffc4 	addi	r5,r5,-1
    4a9c:	994a703a 	and	r5,r19,r5
    4aa0:	9009883a 	mov	r4,r18
    4aa4:	843f0044 	addi	r16,r16,-1023
    4aa8:	294ffc34 	orhi	r5,r5,16368
    4aac:	dd800217 	ldw	r22,8(sp)
    4ab0:	d8001115 	stw	zero,68(sp)
    4ab4:	003ea506 	br	454c <__reset+0xfbf0454c>
    4ab8:	00800074 	movhi	r2,1
    4abc:	10814604 	addi	r2,r2,1304
    4ac0:	003e6406 	br	4454 <__reset+0xfbf04454>
    4ac4:	e0001115 	stw	zero,68(fp)
    4ac8:	000b883a 	mov	r5,zero
    4acc:	e009883a 	mov	r4,fp
    4ad0:	00079080 	call	7908 <_Balloc>
    4ad4:	01bfffc4 	movi	r6,-1
    4ad8:	01c00044 	movi	r7,1
    4adc:	d8800715 	stw	r2,28(sp)
    4ae0:	d9800c15 	stw	r6,48(sp)
    4ae4:	e0801015 	stw	r2,64(fp)
    4ae8:	d8000315 	stw	zero,12(sp)
    4aec:	d9c00b15 	stw	r7,44(sp)
    4af0:	d9800615 	stw	r6,24(sp)
    4af4:	d8002215 	stw	zero,136(sp)
    4af8:	d8800117 	ldw	r2,4(sp)
    4afc:	10008916 	blt	r2,zero,4d24 <_dtoa_r+0x990>
    4b00:	d9000517 	ldw	r4,20(sp)
    4b04:	00c00384 	movi	r3,14
    4b08:	19008616 	blt	r3,r4,4d24 <_dtoa_r+0x990>
    4b0c:	200490fa 	slli	r2,r4,3
    4b10:	00c00074 	movhi	r3,1
    4b14:	d9802217 	ldw	r6,136(sp)
    4b18:	18c16e04 	addi	r3,r3,1464
    4b1c:	1885883a 	add	r2,r3,r2
    4b20:	14000017 	ldw	r16,0(r2)
    4b24:	14400117 	ldw	r17,4(r2)
    4b28:	30016316 	blt	r6,zero,50b8 <_dtoa_r+0xd24>
    4b2c:	800d883a 	mov	r6,r16
    4b30:	880f883a 	mov	r7,r17
    4b34:	9009883a 	mov	r4,r18
    4b38:	980b883a 	mov	r5,r19
    4b3c:	000c5d40 	call	c5d4 <__divdf3>
    4b40:	180b883a 	mov	r5,r3
    4b44:	1009883a 	mov	r4,r2
    4b48:	000e1280 	call	e128 <__fixdfsi>
    4b4c:	1009883a 	mov	r4,r2
    4b50:	102b883a 	mov	r21,r2
    4b54:	000e1a80 	call	e1a8 <__floatsidf>
    4b58:	800d883a 	mov	r6,r16
    4b5c:	880f883a 	mov	r7,r17
    4b60:	1009883a 	mov	r4,r2
    4b64:	180b883a 	mov	r5,r3
    4b68:	000d1140 	call	d114 <__muldf3>
    4b6c:	100d883a 	mov	r6,r2
    4b70:	180f883a 	mov	r7,r3
    4b74:	9009883a 	mov	r4,r18
    4b78:	980b883a 	mov	r5,r19
    4b7c:	000d82c0 	call	d82c <__subdf3>
    4b80:	d9c00717 	ldw	r7,28(sp)
    4b84:	1009883a 	mov	r4,r2
    4b88:	a8800c04 	addi	r2,r21,48
    4b8c:	38800005 	stb	r2,0(r7)
    4b90:	3dc00044 	addi	r23,r7,1
    4b94:	d9c00617 	ldw	r7,24(sp)
    4b98:	01800044 	movi	r6,1
    4b9c:	180b883a 	mov	r5,r3
    4ba0:	2005883a 	mov	r2,r4
    4ba4:	39803826 	beq	r7,r6,4c88 <_dtoa_r+0x8f4>
    4ba8:	000d883a 	mov	r6,zero
    4bac:	01d00934 	movhi	r7,16420
    4bb0:	000d1140 	call	d114 <__muldf3>
    4bb4:	000d883a 	mov	r6,zero
    4bb8:	000f883a 	mov	r7,zero
    4bbc:	1009883a 	mov	r4,r2
    4bc0:	180b883a 	mov	r5,r3
    4bc4:	1025883a 	mov	r18,r2
    4bc8:	1827883a 	mov	r19,r3
    4bcc:	000cebc0 	call	cebc <__eqdf2>
    4bd0:	103f9a26 	beq	r2,zero,4a3c <__reset+0xfbf04a3c>
    4bd4:	d9c00617 	ldw	r7,24(sp)
    4bd8:	d8c00717 	ldw	r3,28(sp)
    4bdc:	b829883a 	mov	r20,r23
    4be0:	38bfffc4 	addi	r2,r7,-1
    4be4:	18ad883a 	add	r22,r3,r2
    4be8:	00000a06 	br	4c14 <_dtoa_r+0x880>
    4bec:	000d1140 	call	d114 <__muldf3>
    4bf0:	000d883a 	mov	r6,zero
    4bf4:	000f883a 	mov	r7,zero
    4bf8:	1009883a 	mov	r4,r2
    4bfc:	180b883a 	mov	r5,r3
    4c00:	1025883a 	mov	r18,r2
    4c04:	1827883a 	mov	r19,r3
    4c08:	b829883a 	mov	r20,r23
    4c0c:	000cebc0 	call	cebc <__eqdf2>
    4c10:	103f8a26 	beq	r2,zero,4a3c <__reset+0xfbf04a3c>
    4c14:	800d883a 	mov	r6,r16
    4c18:	880f883a 	mov	r7,r17
    4c1c:	9009883a 	mov	r4,r18
    4c20:	980b883a 	mov	r5,r19
    4c24:	000c5d40 	call	c5d4 <__divdf3>
    4c28:	180b883a 	mov	r5,r3
    4c2c:	1009883a 	mov	r4,r2
    4c30:	000e1280 	call	e128 <__fixdfsi>
    4c34:	1009883a 	mov	r4,r2
    4c38:	102b883a 	mov	r21,r2
    4c3c:	000e1a80 	call	e1a8 <__floatsidf>
    4c40:	800d883a 	mov	r6,r16
    4c44:	880f883a 	mov	r7,r17
    4c48:	1009883a 	mov	r4,r2
    4c4c:	180b883a 	mov	r5,r3
    4c50:	000d1140 	call	d114 <__muldf3>
    4c54:	100d883a 	mov	r6,r2
    4c58:	180f883a 	mov	r7,r3
    4c5c:	9009883a 	mov	r4,r18
    4c60:	980b883a 	mov	r5,r19
    4c64:	000d82c0 	call	d82c <__subdf3>
    4c68:	aa000c04 	addi	r8,r21,48
    4c6c:	a2000005 	stb	r8,0(r20)
    4c70:	000d883a 	mov	r6,zero
    4c74:	01d00934 	movhi	r7,16420
    4c78:	1009883a 	mov	r4,r2
    4c7c:	180b883a 	mov	r5,r3
    4c80:	a5c00044 	addi	r23,r20,1
    4c84:	b53fd91e 	bne	r22,r20,4bec <__reset+0xfbf04bec>
    4c88:	100d883a 	mov	r6,r2
    4c8c:	180f883a 	mov	r7,r3
    4c90:	1009883a 	mov	r4,r2
    4c94:	180b883a 	mov	r5,r3
    4c98:	000bd280 	call	bd28 <__adddf3>
    4c9c:	100d883a 	mov	r6,r2
    4ca0:	180f883a 	mov	r7,r3
    4ca4:	8009883a 	mov	r4,r16
    4ca8:	880b883a 	mov	r5,r17
    4cac:	1027883a 	mov	r19,r2
    4cb0:	1825883a 	mov	r18,r3
    4cb4:	000d0200 	call	d020 <__ledf2>
    4cb8:	10000816 	blt	r2,zero,4cdc <_dtoa_r+0x948>
    4cbc:	980d883a 	mov	r6,r19
    4cc0:	900f883a 	mov	r7,r18
    4cc4:	8009883a 	mov	r4,r16
    4cc8:	880b883a 	mov	r5,r17
    4ccc:	000cebc0 	call	cebc <__eqdf2>
    4cd0:	103f5a1e 	bne	r2,zero,4a3c <__reset+0xfbf04a3c>
    4cd4:	ad40004c 	andi	r21,r21,1
    4cd8:	a83f5826 	beq	r21,zero,4a3c <__reset+0xfbf04a3c>
    4cdc:	bd3fffc3 	ldbu	r20,-1(r23)
    4ce0:	b8bfffc4 	addi	r2,r23,-1
    4ce4:	1007883a 	mov	r3,r2
    4ce8:	01400e44 	movi	r5,57
    4cec:	d9800717 	ldw	r6,28(sp)
    4cf0:	00000506 	br	4d08 <_dtoa_r+0x974>
    4cf4:	18ffffc4 	addi	r3,r3,-1
    4cf8:	11824726 	beq	r2,r6,5618 <_dtoa_r+0x1284>
    4cfc:	1d000003 	ldbu	r20,0(r3)
    4d00:	102f883a 	mov	r23,r2
    4d04:	10bfffc4 	addi	r2,r2,-1
    4d08:	a1003fcc 	andi	r4,r20,255
    4d0c:	2100201c 	xori	r4,r4,128
    4d10:	213fe004 	addi	r4,r4,-128
    4d14:	217ff726 	beq	r4,r5,4cf4 <__reset+0xfbf04cf4>
    4d18:	a2000044 	addi	r8,r20,1
    4d1c:	12000005 	stb	r8,0(r2)
    4d20:	003f4606 	br	4a3c <__reset+0xfbf04a3c>
    4d24:	d9000b17 	ldw	r4,44(sp)
    4d28:	2000c826 	beq	r4,zero,504c <_dtoa_r+0xcb8>
    4d2c:	d9800317 	ldw	r6,12(sp)
    4d30:	00c00044 	movi	r3,1
    4d34:	1980f90e 	bge	r3,r6,511c <_dtoa_r+0xd88>
    4d38:	d8800617 	ldw	r2,24(sp)
    4d3c:	d8c00a17 	ldw	r3,40(sp)
    4d40:	157fffc4 	addi	r21,r2,-1
    4d44:	1d41f316 	blt	r3,r21,5514 <_dtoa_r+0x1180>
    4d48:	1d6bc83a 	sub	r21,r3,r21
    4d4c:	d9c00617 	ldw	r7,24(sp)
    4d50:	3802aa16 	blt	r7,zero,57fc <_dtoa_r+0x1468>
    4d54:	dd000817 	ldw	r20,32(sp)
    4d58:	d8800617 	ldw	r2,24(sp)
    4d5c:	d8c00817 	ldw	r3,32(sp)
    4d60:	01400044 	movi	r5,1
    4d64:	e009883a 	mov	r4,fp
    4d68:	1887883a 	add	r3,r3,r2
    4d6c:	d8c00815 	stw	r3,32(sp)
    4d70:	b0ad883a 	add	r22,r22,r2
    4d74:	0007d140 	call	7d14 <__i2b>
    4d78:	1023883a 	mov	r17,r2
    4d7c:	a0000826 	beq	r20,zero,4da0 <_dtoa_r+0xa0c>
    4d80:	0580070e 	bge	zero,r22,4da0 <_dtoa_r+0xa0c>
    4d84:	a005883a 	mov	r2,r20
    4d88:	b500b916 	blt	r22,r20,5070 <_dtoa_r+0xcdc>
    4d8c:	d9000817 	ldw	r4,32(sp)
    4d90:	a0a9c83a 	sub	r20,r20,r2
    4d94:	b0adc83a 	sub	r22,r22,r2
    4d98:	2089c83a 	sub	r4,r4,r2
    4d9c:	d9000815 	stw	r4,32(sp)
    4da0:	d9800a17 	ldw	r6,40(sp)
    4da4:	0181810e 	bge	zero,r6,53ac <_dtoa_r+0x1018>
    4da8:	d9c00b17 	ldw	r7,44(sp)
    4dac:	3800b326 	beq	r7,zero,507c <_dtoa_r+0xce8>
    4db0:	a800b226 	beq	r21,zero,507c <_dtoa_r+0xce8>
    4db4:	880b883a 	mov	r5,r17
    4db8:	a80d883a 	mov	r6,r21
    4dbc:	e009883a 	mov	r4,fp
    4dc0:	0007f480 	call	7f48 <__pow5mult>
    4dc4:	d9800917 	ldw	r6,36(sp)
    4dc8:	100b883a 	mov	r5,r2
    4dcc:	e009883a 	mov	r4,fp
    4dd0:	1023883a 	mov	r17,r2
    4dd4:	0007d500 	call	7d50 <__multiply>
    4dd8:	1021883a 	mov	r16,r2
    4ddc:	d8800a17 	ldw	r2,40(sp)
    4de0:	d9400917 	ldw	r5,36(sp)
    4de4:	e009883a 	mov	r4,fp
    4de8:	1545c83a 	sub	r2,r2,r21
    4dec:	d8800a15 	stw	r2,40(sp)
    4df0:	00079b00 	call	79b0 <_Bfree>
    4df4:	d8c00a17 	ldw	r3,40(sp)
    4df8:	18009f1e 	bne	r3,zero,5078 <_dtoa_r+0xce4>
    4dfc:	05c00044 	movi	r23,1
    4e00:	e009883a 	mov	r4,fp
    4e04:	b80b883a 	mov	r5,r23
    4e08:	0007d140 	call	7d14 <__i2b>
    4e0c:	d9000d17 	ldw	r4,52(sp)
    4e10:	102b883a 	mov	r21,r2
    4e14:	2000ce26 	beq	r4,zero,5150 <_dtoa_r+0xdbc>
    4e18:	200d883a 	mov	r6,r4
    4e1c:	100b883a 	mov	r5,r2
    4e20:	e009883a 	mov	r4,fp
    4e24:	0007f480 	call	7f48 <__pow5mult>
    4e28:	d9800317 	ldw	r6,12(sp)
    4e2c:	102b883a 	mov	r21,r2
    4e30:	b981810e 	bge	r23,r6,5438 <_dtoa_r+0x10a4>
    4e34:	0027883a 	mov	r19,zero
    4e38:	a8800417 	ldw	r2,16(r21)
    4e3c:	05c00804 	movi	r23,32
    4e40:	10800104 	addi	r2,r2,4
    4e44:	1085883a 	add	r2,r2,r2
    4e48:	1085883a 	add	r2,r2,r2
    4e4c:	a885883a 	add	r2,r21,r2
    4e50:	11000017 	ldw	r4,0(r2)
    4e54:	0007bfc0 	call	7bfc <__hi0bits>
    4e58:	b885c83a 	sub	r2,r23,r2
    4e5c:	1585883a 	add	r2,r2,r22
    4e60:	108007cc 	andi	r2,r2,31
    4e64:	1000b326 	beq	r2,zero,5134 <_dtoa_r+0xda0>
    4e68:	00c00804 	movi	r3,32
    4e6c:	1887c83a 	sub	r3,r3,r2
    4e70:	01000104 	movi	r4,4
    4e74:	20c2cd0e 	bge	r4,r3,59ac <_dtoa_r+0x1618>
    4e78:	00c00704 	movi	r3,28
    4e7c:	1885c83a 	sub	r2,r3,r2
    4e80:	d8c00817 	ldw	r3,32(sp)
    4e84:	a0a9883a 	add	r20,r20,r2
    4e88:	b0ad883a 	add	r22,r22,r2
    4e8c:	1887883a 	add	r3,r3,r2
    4e90:	d8c00815 	stw	r3,32(sp)
    4e94:	d9800817 	ldw	r6,32(sp)
    4e98:	0180040e 	bge	zero,r6,4eac <_dtoa_r+0xb18>
    4e9c:	800b883a 	mov	r5,r16
    4ea0:	e009883a 	mov	r4,fp
    4ea4:	00080880 	call	8088 <__lshift>
    4ea8:	1021883a 	mov	r16,r2
    4eac:	0580050e 	bge	zero,r22,4ec4 <_dtoa_r+0xb30>
    4eb0:	a80b883a 	mov	r5,r21
    4eb4:	b00d883a 	mov	r6,r22
    4eb8:	e009883a 	mov	r4,fp
    4ebc:	00080880 	call	8088 <__lshift>
    4ec0:	102b883a 	mov	r21,r2
    4ec4:	d9c00e17 	ldw	r7,56(sp)
    4ec8:	3801211e 	bne	r7,zero,5350 <_dtoa_r+0xfbc>
    4ecc:	d9800617 	ldw	r6,24(sp)
    4ed0:	0181380e 	bge	zero,r6,53b4 <_dtoa_r+0x1020>
    4ed4:	d8c00b17 	ldw	r3,44(sp)
    4ed8:	1800ab1e 	bne	r3,zero,5188 <_dtoa_r+0xdf4>
    4edc:	dc800717 	ldw	r18,28(sp)
    4ee0:	dcc00617 	ldw	r19,24(sp)
    4ee4:	9029883a 	mov	r20,r18
    4ee8:	00000206 	br	4ef4 <_dtoa_r+0xb60>
    4eec:	00079d80 	call	79d8 <__multadd>
    4ef0:	1021883a 	mov	r16,r2
    4ef4:	a80b883a 	mov	r5,r21
    4ef8:	8009883a 	mov	r4,r16
    4efc:	00041940 	call	4194 <quorem>
    4f00:	10800c04 	addi	r2,r2,48
    4f04:	90800005 	stb	r2,0(r18)
    4f08:	94800044 	addi	r18,r18,1
    4f0c:	9507c83a 	sub	r3,r18,r20
    4f10:	000f883a 	mov	r7,zero
    4f14:	01800284 	movi	r6,10
    4f18:	800b883a 	mov	r5,r16
    4f1c:	e009883a 	mov	r4,fp
    4f20:	1cfff216 	blt	r3,r19,4eec <__reset+0xfbf04eec>
    4f24:	1011883a 	mov	r8,r2
    4f28:	d8800617 	ldw	r2,24(sp)
    4f2c:	0082370e 	bge	zero,r2,580c <_dtoa_r+0x1478>
    4f30:	d9000717 	ldw	r4,28(sp)
    4f34:	0025883a 	mov	r18,zero
    4f38:	20af883a 	add	r23,r4,r2
    4f3c:	01800044 	movi	r6,1
    4f40:	800b883a 	mov	r5,r16
    4f44:	e009883a 	mov	r4,fp
    4f48:	da001715 	stw	r8,92(sp)
    4f4c:	00080880 	call	8088 <__lshift>
    4f50:	a80b883a 	mov	r5,r21
    4f54:	1009883a 	mov	r4,r2
    4f58:	d8800915 	stw	r2,36(sp)
    4f5c:	00081d00 	call	81d0 <__mcmp>
    4f60:	da001717 	ldw	r8,92(sp)
    4f64:	0081800e 	bge	zero,r2,5568 <_dtoa_r+0x11d4>
    4f68:	b93fffc3 	ldbu	r4,-1(r23)
    4f6c:	b8bfffc4 	addi	r2,r23,-1
    4f70:	1007883a 	mov	r3,r2
    4f74:	01800e44 	movi	r6,57
    4f78:	d9c00717 	ldw	r7,28(sp)
    4f7c:	00000506 	br	4f94 <_dtoa_r+0xc00>
    4f80:	18ffffc4 	addi	r3,r3,-1
    4f84:	11c12326 	beq	r2,r7,5414 <_dtoa_r+0x1080>
    4f88:	19000003 	ldbu	r4,0(r3)
    4f8c:	102f883a 	mov	r23,r2
    4f90:	10bfffc4 	addi	r2,r2,-1
    4f94:	21403fcc 	andi	r5,r4,255
    4f98:	2940201c 	xori	r5,r5,128
    4f9c:	297fe004 	addi	r5,r5,-128
    4fa0:	29bff726 	beq	r5,r6,4f80 <__reset+0xfbf04f80>
    4fa4:	21000044 	addi	r4,r4,1
    4fa8:	11000005 	stb	r4,0(r2)
    4fac:	a80b883a 	mov	r5,r21
    4fb0:	e009883a 	mov	r4,fp
    4fb4:	00079b00 	call	79b0 <_Bfree>
    4fb8:	883ea026 	beq	r17,zero,4a3c <__reset+0xfbf04a3c>
    4fbc:	90000426 	beq	r18,zero,4fd0 <_dtoa_r+0xc3c>
    4fc0:	94400326 	beq	r18,r17,4fd0 <_dtoa_r+0xc3c>
    4fc4:	900b883a 	mov	r5,r18
    4fc8:	e009883a 	mov	r4,fp
    4fcc:	00079b00 	call	79b0 <_Bfree>
    4fd0:	880b883a 	mov	r5,r17
    4fd4:	e009883a 	mov	r4,fp
    4fd8:	00079b00 	call	79b0 <_Bfree>
    4fdc:	003e9706 	br	4a3c <__reset+0xfbf04a3c>
    4fe0:	01800044 	movi	r6,1
    4fe4:	d9800e15 	stw	r6,56(sp)
    4fe8:	003d9606 	br	4644 <__reset+0xfbf04644>
    4fec:	d8800817 	ldw	r2,32(sp)
    4ff0:	d8c00517 	ldw	r3,20(sp)
    4ff4:	d8000d15 	stw	zero,52(sp)
    4ff8:	10c5c83a 	sub	r2,r2,r3
    4ffc:	00c9c83a 	sub	r4,zero,r3
    5000:	d8800815 	stw	r2,32(sp)
    5004:	d9000a15 	stw	r4,40(sp)
    5008:	003d9706 	br	4668 <__reset+0xfbf04668>
    500c:	05adc83a 	sub	r22,zero,r22
    5010:	dd800815 	stw	r22,32(sp)
    5014:	002d883a 	mov	r22,zero
    5018:	003d8e06 	br	4654 <__reset+0xfbf04654>
    501c:	d9000517 	ldw	r4,20(sp)
    5020:	000e1a80 	call	e1a8 <__floatsidf>
    5024:	100d883a 	mov	r6,r2
    5028:	180f883a 	mov	r7,r3
    502c:	a009883a 	mov	r4,r20
    5030:	880b883a 	mov	r5,r17
    5034:	000cebc0 	call	cebc <__eqdf2>
    5038:	103d7126 	beq	r2,zero,4600 <__reset+0xfbf04600>
    503c:	d9c00517 	ldw	r7,20(sp)
    5040:	39ffffc4 	addi	r7,r7,-1
    5044:	d9c00515 	stw	r7,20(sp)
    5048:	003d6d06 	br	4600 <__reset+0xfbf04600>
    504c:	dd400a17 	ldw	r21,40(sp)
    5050:	dd000817 	ldw	r20,32(sp)
    5054:	0023883a 	mov	r17,zero
    5058:	003f4806 	br	4d7c <__reset+0xfbf04d7c>
    505c:	10e3c83a 	sub	r17,r2,r3
    5060:	9448983a 	sll	r4,r18,r17
    5064:	003d3206 	br	4530 <__reset+0xfbf04530>
    5068:	d8000e15 	stw	zero,56(sp)
    506c:	003d7506 	br	4644 <__reset+0xfbf04644>
    5070:	b005883a 	mov	r2,r22
    5074:	003f4506 	br	4d8c <__reset+0xfbf04d8c>
    5078:	dc000915 	stw	r16,36(sp)
    507c:	d9800a17 	ldw	r6,40(sp)
    5080:	d9400917 	ldw	r5,36(sp)
    5084:	e009883a 	mov	r4,fp
    5088:	0007f480 	call	7f48 <__pow5mult>
    508c:	1021883a 	mov	r16,r2
    5090:	003f5a06 	br	4dfc <__reset+0xfbf04dfc>
    5094:	01c00044 	movi	r7,1
    5098:	d9c00b15 	stw	r7,44(sp)
    509c:	d8802217 	ldw	r2,136(sp)
    50a0:	0081280e 	bge	zero,r2,5544 <_dtoa_r+0x11b0>
    50a4:	100d883a 	mov	r6,r2
    50a8:	1021883a 	mov	r16,r2
    50ac:	d8800c15 	stw	r2,48(sp)
    50b0:	d8800615 	stw	r2,24(sp)
    50b4:	003d8806 	br	46d8 <__reset+0xfbf046d8>
    50b8:	d8800617 	ldw	r2,24(sp)
    50bc:	00be9b16 	blt	zero,r2,4b2c <__reset+0xfbf04b2c>
    50c0:	10010f1e 	bne	r2,zero,5500 <_dtoa_r+0x116c>
    50c4:	880b883a 	mov	r5,r17
    50c8:	000d883a 	mov	r6,zero
    50cc:	01d00534 	movhi	r7,16404
    50d0:	8009883a 	mov	r4,r16
    50d4:	000d1140 	call	d114 <__muldf3>
    50d8:	900d883a 	mov	r6,r18
    50dc:	980f883a 	mov	r7,r19
    50e0:	1009883a 	mov	r4,r2
    50e4:	180b883a 	mov	r5,r3
    50e8:	000cf440 	call	cf44 <__gedf2>
    50ec:	002b883a 	mov	r21,zero
    50f0:	0023883a 	mov	r17,zero
    50f4:	1000bf16 	blt	r2,zero,53f4 <_dtoa_r+0x1060>
    50f8:	d9802217 	ldw	r6,136(sp)
    50fc:	ddc00717 	ldw	r23,28(sp)
    5100:	018c303a 	nor	r6,zero,r6
    5104:	d9800515 	stw	r6,20(sp)
    5108:	a80b883a 	mov	r5,r21
    510c:	e009883a 	mov	r4,fp
    5110:	00079b00 	call	79b0 <_Bfree>
    5114:	883e4926 	beq	r17,zero,4a3c <__reset+0xfbf04a3c>
    5118:	003fad06 	br	4fd0 <__reset+0xfbf04fd0>
    511c:	d9c01117 	ldw	r7,68(sp)
    5120:	3801bc26 	beq	r7,zero,5814 <_dtoa_r+0x1480>
    5124:	10810cc4 	addi	r2,r2,1075
    5128:	dd400a17 	ldw	r21,40(sp)
    512c:	dd000817 	ldw	r20,32(sp)
    5130:	003f0a06 	br	4d5c <__reset+0xfbf04d5c>
    5134:	00800704 	movi	r2,28
    5138:	d9000817 	ldw	r4,32(sp)
    513c:	a0a9883a 	add	r20,r20,r2
    5140:	b0ad883a 	add	r22,r22,r2
    5144:	2089883a 	add	r4,r4,r2
    5148:	d9000815 	stw	r4,32(sp)
    514c:	003f5106 	br	4e94 <__reset+0xfbf04e94>
    5150:	d8c00317 	ldw	r3,12(sp)
    5154:	b8c1fc0e 	bge	r23,r3,5948 <_dtoa_r+0x15b4>
    5158:	0027883a 	mov	r19,zero
    515c:	b805883a 	mov	r2,r23
    5160:	003f3e06 	br	4e5c <__reset+0xfbf04e5c>
    5164:	880b883a 	mov	r5,r17
    5168:	e009883a 	mov	r4,fp
    516c:	000f883a 	mov	r7,zero
    5170:	01800284 	movi	r6,10
    5174:	00079d80 	call	79d8 <__multadd>
    5178:	d9000c17 	ldw	r4,48(sp)
    517c:	1023883a 	mov	r17,r2
    5180:	0102040e 	bge	zero,r4,5994 <_dtoa_r+0x1600>
    5184:	d9000615 	stw	r4,24(sp)
    5188:	0500050e 	bge	zero,r20,51a0 <_dtoa_r+0xe0c>
    518c:	880b883a 	mov	r5,r17
    5190:	a00d883a 	mov	r6,r20
    5194:	e009883a 	mov	r4,fp
    5198:	00080880 	call	8088 <__lshift>
    519c:	1023883a 	mov	r17,r2
    51a0:	9801241e 	bne	r19,zero,5634 <_dtoa_r+0x12a0>
    51a4:	8829883a 	mov	r20,r17
    51a8:	d9000617 	ldw	r4,24(sp)
    51ac:	dcc00717 	ldw	r19,28(sp)
    51b0:	9480004c 	andi	r18,r18,1
    51b4:	20bfffc4 	addi	r2,r4,-1
    51b8:	9885883a 	add	r2,r19,r2
    51bc:	d8800415 	stw	r2,16(sp)
    51c0:	dc800615 	stw	r18,24(sp)
    51c4:	a80b883a 	mov	r5,r21
    51c8:	8009883a 	mov	r4,r16
    51cc:	00041940 	call	4194 <quorem>
    51d0:	880b883a 	mov	r5,r17
    51d4:	8009883a 	mov	r4,r16
    51d8:	102f883a 	mov	r23,r2
    51dc:	00081d00 	call	81d0 <__mcmp>
    51e0:	a80b883a 	mov	r5,r21
    51e4:	a00d883a 	mov	r6,r20
    51e8:	e009883a 	mov	r4,fp
    51ec:	102d883a 	mov	r22,r2
    51f0:	00082300 	call	8230 <__mdiff>
    51f4:	1007883a 	mov	r3,r2
    51f8:	10800317 	ldw	r2,12(r2)
    51fc:	bc800c04 	addi	r18,r23,48
    5200:	180b883a 	mov	r5,r3
    5204:	10004e1e 	bne	r2,zero,5340 <_dtoa_r+0xfac>
    5208:	8009883a 	mov	r4,r16
    520c:	d8c01615 	stw	r3,88(sp)
    5210:	00081d00 	call	81d0 <__mcmp>
    5214:	d8c01617 	ldw	r3,88(sp)
    5218:	e009883a 	mov	r4,fp
    521c:	d8801615 	stw	r2,88(sp)
    5220:	180b883a 	mov	r5,r3
    5224:	00079b00 	call	79b0 <_Bfree>
    5228:	d8801617 	ldw	r2,88(sp)
    522c:	1000041e 	bne	r2,zero,5240 <_dtoa_r+0xeac>
    5230:	d9800317 	ldw	r6,12(sp)
    5234:	3000021e 	bne	r6,zero,5240 <_dtoa_r+0xeac>
    5238:	d8c00617 	ldw	r3,24(sp)
    523c:	18003726 	beq	r3,zero,531c <_dtoa_r+0xf88>
    5240:	b0002016 	blt	r22,zero,52c4 <_dtoa_r+0xf30>
    5244:	b000041e 	bne	r22,zero,5258 <_dtoa_r+0xec4>
    5248:	d9000317 	ldw	r4,12(sp)
    524c:	2000021e 	bne	r4,zero,5258 <_dtoa_r+0xec4>
    5250:	d8c00617 	ldw	r3,24(sp)
    5254:	18001b26 	beq	r3,zero,52c4 <_dtoa_r+0xf30>
    5258:	00810716 	blt	zero,r2,5678 <_dtoa_r+0x12e4>
    525c:	d8c00417 	ldw	r3,16(sp)
    5260:	9d800044 	addi	r22,r19,1
    5264:	9c800005 	stb	r18,0(r19)
    5268:	b02f883a 	mov	r23,r22
    526c:	98c10626 	beq	r19,r3,5688 <_dtoa_r+0x12f4>
    5270:	800b883a 	mov	r5,r16
    5274:	000f883a 	mov	r7,zero
    5278:	01800284 	movi	r6,10
    527c:	e009883a 	mov	r4,fp
    5280:	00079d80 	call	79d8 <__multadd>
    5284:	1021883a 	mov	r16,r2
    5288:	000f883a 	mov	r7,zero
    528c:	01800284 	movi	r6,10
    5290:	880b883a 	mov	r5,r17
    5294:	e009883a 	mov	r4,fp
    5298:	8d002526 	beq	r17,r20,5330 <_dtoa_r+0xf9c>
    529c:	00079d80 	call	79d8 <__multadd>
    52a0:	a00b883a 	mov	r5,r20
    52a4:	000f883a 	mov	r7,zero
    52a8:	01800284 	movi	r6,10
    52ac:	e009883a 	mov	r4,fp
    52b0:	1023883a 	mov	r17,r2
    52b4:	00079d80 	call	79d8 <__multadd>
    52b8:	1029883a 	mov	r20,r2
    52bc:	b027883a 	mov	r19,r22
    52c0:	003fc006 	br	51c4 <__reset+0xfbf051c4>
    52c4:	9011883a 	mov	r8,r18
    52c8:	00800e0e 	bge	zero,r2,5304 <_dtoa_r+0xf70>
    52cc:	800b883a 	mov	r5,r16
    52d0:	01800044 	movi	r6,1
    52d4:	e009883a 	mov	r4,fp
    52d8:	da001715 	stw	r8,92(sp)
    52dc:	00080880 	call	8088 <__lshift>
    52e0:	a80b883a 	mov	r5,r21
    52e4:	1009883a 	mov	r4,r2
    52e8:	1021883a 	mov	r16,r2
    52ec:	00081d00 	call	81d0 <__mcmp>
    52f0:	da001717 	ldw	r8,92(sp)
    52f4:	0081960e 	bge	zero,r2,5950 <_dtoa_r+0x15bc>
    52f8:	00800e44 	movi	r2,57
    52fc:	40817026 	beq	r8,r2,58c0 <_dtoa_r+0x152c>
    5300:	ba000c44 	addi	r8,r23,49
    5304:	8825883a 	mov	r18,r17
    5308:	9dc00044 	addi	r23,r19,1
    530c:	9a000005 	stb	r8,0(r19)
    5310:	a023883a 	mov	r17,r20
    5314:	dc000915 	stw	r16,36(sp)
    5318:	003f2406 	br	4fac <__reset+0xfbf04fac>
    531c:	00800e44 	movi	r2,57
    5320:	9011883a 	mov	r8,r18
    5324:	90816626 	beq	r18,r2,58c0 <_dtoa_r+0x152c>
    5328:	05bff516 	blt	zero,r22,5300 <__reset+0xfbf05300>
    532c:	003ff506 	br	5304 <__reset+0xfbf05304>
    5330:	00079d80 	call	79d8 <__multadd>
    5334:	1023883a 	mov	r17,r2
    5338:	1029883a 	mov	r20,r2
    533c:	003fdf06 	br	52bc <__reset+0xfbf052bc>
    5340:	e009883a 	mov	r4,fp
    5344:	00079b00 	call	79b0 <_Bfree>
    5348:	00800044 	movi	r2,1
    534c:	003fbc06 	br	5240 <__reset+0xfbf05240>
    5350:	a80b883a 	mov	r5,r21
    5354:	8009883a 	mov	r4,r16
    5358:	00081d00 	call	81d0 <__mcmp>
    535c:	103edb0e 	bge	r2,zero,4ecc <__reset+0xfbf04ecc>
    5360:	800b883a 	mov	r5,r16
    5364:	000f883a 	mov	r7,zero
    5368:	01800284 	movi	r6,10
    536c:	e009883a 	mov	r4,fp
    5370:	00079d80 	call	79d8 <__multadd>
    5374:	1021883a 	mov	r16,r2
    5378:	d8800517 	ldw	r2,20(sp)
    537c:	d8c00b17 	ldw	r3,44(sp)
    5380:	10bfffc4 	addi	r2,r2,-1
    5384:	d8800515 	stw	r2,20(sp)
    5388:	183f761e 	bne	r3,zero,5164 <__reset+0xfbf05164>
    538c:	d9000c17 	ldw	r4,48(sp)
    5390:	0101730e 	bge	zero,r4,5960 <_dtoa_r+0x15cc>
    5394:	d9000615 	stw	r4,24(sp)
    5398:	003ed006 	br	4edc <__reset+0xfbf04edc>
    539c:	00800084 	movi	r2,2
    53a0:	3081861e 	bne	r6,r2,59bc <_dtoa_r+0x1628>
    53a4:	d8000b15 	stw	zero,44(sp)
    53a8:	003f3c06 	br	509c <__reset+0xfbf0509c>
    53ac:	dc000917 	ldw	r16,36(sp)
    53b0:	003e9206 	br	4dfc <__reset+0xfbf04dfc>
    53b4:	d9c00317 	ldw	r7,12(sp)
    53b8:	00800084 	movi	r2,2
    53bc:	11fec50e 	bge	r2,r7,4ed4 <__reset+0xfbf04ed4>
    53c0:	d9000617 	ldw	r4,24(sp)
    53c4:	20013c1e 	bne	r4,zero,58b8 <_dtoa_r+0x1524>
    53c8:	a80b883a 	mov	r5,r21
    53cc:	000f883a 	mov	r7,zero
    53d0:	01800144 	movi	r6,5
    53d4:	e009883a 	mov	r4,fp
    53d8:	00079d80 	call	79d8 <__multadd>
    53dc:	100b883a 	mov	r5,r2
    53e0:	8009883a 	mov	r4,r16
    53e4:	102b883a 	mov	r21,r2
    53e8:	00081d00 	call	81d0 <__mcmp>
    53ec:	dc000915 	stw	r16,36(sp)
    53f0:	00bf410e 	bge	zero,r2,50f8 <__reset+0xfbf050f8>
    53f4:	d9c00717 	ldw	r7,28(sp)
    53f8:	00800c44 	movi	r2,49
    53fc:	38800005 	stb	r2,0(r7)
    5400:	d8800517 	ldw	r2,20(sp)
    5404:	3dc00044 	addi	r23,r7,1
    5408:	10800044 	addi	r2,r2,1
    540c:	d8800515 	stw	r2,20(sp)
    5410:	003f3d06 	br	5108 <__reset+0xfbf05108>
    5414:	d9800517 	ldw	r6,20(sp)
    5418:	d9c00717 	ldw	r7,28(sp)
    541c:	00800c44 	movi	r2,49
    5420:	31800044 	addi	r6,r6,1
    5424:	d9800515 	stw	r6,20(sp)
    5428:	38800005 	stb	r2,0(r7)
    542c:	003edf06 	br	4fac <__reset+0xfbf04fac>
    5430:	d8000b15 	stw	zero,44(sp)
    5434:	003c9f06 	br	46b4 <__reset+0xfbf046b4>
    5438:	903e7e1e 	bne	r18,zero,4e34 <__reset+0xfbf04e34>
    543c:	00800434 	movhi	r2,16
    5440:	10bfffc4 	addi	r2,r2,-1
    5444:	9884703a 	and	r2,r19,r2
    5448:	1000ea1e 	bne	r2,zero,57f4 <_dtoa_r+0x1460>
    544c:	9cdffc2c 	andhi	r19,r19,32752
    5450:	9800e826 	beq	r19,zero,57f4 <_dtoa_r+0x1460>
    5454:	d9c00817 	ldw	r7,32(sp)
    5458:	b5800044 	addi	r22,r22,1
    545c:	04c00044 	movi	r19,1
    5460:	39c00044 	addi	r7,r7,1
    5464:	d9c00815 	stw	r7,32(sp)
    5468:	d8800d17 	ldw	r2,52(sp)
    546c:	103e721e 	bne	r2,zero,4e38 <__reset+0xfbf04e38>
    5470:	00800044 	movi	r2,1
    5474:	003e7906 	br	4e5c <__reset+0xfbf04e5c>
    5478:	8009883a 	mov	r4,r16
    547c:	000e1a80 	call	e1a8 <__floatsidf>
    5480:	d9800f17 	ldw	r6,60(sp)
    5484:	d9c01017 	ldw	r7,64(sp)
    5488:	1009883a 	mov	r4,r2
    548c:	180b883a 	mov	r5,r3
    5490:	000d1140 	call	d114 <__muldf3>
    5494:	000d883a 	mov	r6,zero
    5498:	01d00734 	movhi	r7,16412
    549c:	1009883a 	mov	r4,r2
    54a0:	180b883a 	mov	r5,r3
    54a4:	000bd280 	call	bd28 <__adddf3>
    54a8:	047f3034 	movhi	r17,64704
    54ac:	1021883a 	mov	r16,r2
    54b0:	1c63883a 	add	r17,r3,r17
    54b4:	d9000f17 	ldw	r4,60(sp)
    54b8:	d9401017 	ldw	r5,64(sp)
    54bc:	000d883a 	mov	r6,zero
    54c0:	01d00534 	movhi	r7,16404
    54c4:	000d82c0 	call	d82c <__subdf3>
    54c8:	800d883a 	mov	r6,r16
    54cc:	880f883a 	mov	r7,r17
    54d0:	1009883a 	mov	r4,r2
    54d4:	180b883a 	mov	r5,r3
    54d8:	102b883a 	mov	r21,r2
    54dc:	1829883a 	mov	r20,r3
    54e0:	000cf440 	call	cf44 <__gedf2>
    54e4:	00806c16 	blt	zero,r2,5698 <_dtoa_r+0x1304>
    54e8:	89e0003c 	xorhi	r7,r17,32768
    54ec:	800d883a 	mov	r6,r16
    54f0:	a809883a 	mov	r4,r21
    54f4:	a00b883a 	mov	r5,r20
    54f8:	000d0200 	call	d020 <__ledf2>
    54fc:	103d7e0e 	bge	r2,zero,4af8 <__reset+0xfbf04af8>
    5500:	002b883a 	mov	r21,zero
    5504:	0023883a 	mov	r17,zero
    5508:	003efb06 	br	50f8 <__reset+0xfbf050f8>
    550c:	d8800717 	ldw	r2,28(sp)
    5510:	003bd006 	br	4454 <__reset+0xfbf04454>
    5514:	d9000a17 	ldw	r4,40(sp)
    5518:	d9800d17 	ldw	r6,52(sp)
    551c:	dd400a15 	stw	r21,40(sp)
    5520:	a905c83a 	sub	r2,r21,r4
    5524:	308d883a 	add	r6,r6,r2
    5528:	d9800d15 	stw	r6,52(sp)
    552c:	002b883a 	mov	r21,zero
    5530:	003e0606 	br	4d4c <__reset+0xfbf04d4c>
    5534:	9023883a 	mov	r17,r18
    5538:	9829883a 	mov	r20,r19
    553c:	04000084 	movi	r16,2
    5540:	003c9206 	br	478c <__reset+0xfbf0478c>
    5544:	04000044 	movi	r16,1
    5548:	dc000c15 	stw	r16,48(sp)
    554c:	dc000615 	stw	r16,24(sp)
    5550:	dc002215 	stw	r16,136(sp)
    5554:	e0001115 	stw	zero,68(fp)
    5558:	000b883a 	mov	r5,zero
    555c:	003c6906 	br	4704 <__reset+0xfbf04704>
    5560:	3021883a 	mov	r16,r6
    5564:	003ffb06 	br	5554 <__reset+0xfbf05554>
    5568:	1000021e 	bne	r2,zero,5574 <_dtoa_r+0x11e0>
    556c:	4200004c 	andi	r8,r8,1
    5570:	403e7d1e 	bne	r8,zero,4f68 <__reset+0xfbf04f68>
    5574:	01000c04 	movi	r4,48
    5578:	00000106 	br	5580 <_dtoa_r+0x11ec>
    557c:	102f883a 	mov	r23,r2
    5580:	b8bfffc4 	addi	r2,r23,-1
    5584:	10c00007 	ldb	r3,0(r2)
    5588:	193ffc26 	beq	r3,r4,557c <__reset+0xfbf0557c>
    558c:	003e8706 	br	4fac <__reset+0xfbf04fac>
    5590:	d8800517 	ldw	r2,20(sp)
    5594:	00a3c83a 	sub	r17,zero,r2
    5598:	8800a426 	beq	r17,zero,582c <_dtoa_r+0x1498>
    559c:	888003cc 	andi	r2,r17,15
    55a0:	100490fa 	slli	r2,r2,3
    55a4:	00c00074 	movhi	r3,1
    55a8:	18c16e04 	addi	r3,r3,1464
    55ac:	1885883a 	add	r2,r3,r2
    55b0:	11800017 	ldw	r6,0(r2)
    55b4:	11c00117 	ldw	r7,4(r2)
    55b8:	9009883a 	mov	r4,r18
    55bc:	980b883a 	mov	r5,r19
    55c0:	8823d13a 	srai	r17,r17,4
    55c4:	000d1140 	call	d114 <__muldf3>
    55c8:	d8800f15 	stw	r2,60(sp)
    55cc:	d8c01015 	stw	r3,64(sp)
    55d0:	8800e826 	beq	r17,zero,5974 <_dtoa_r+0x15e0>
    55d4:	05000074 	movhi	r20,1
    55d8:	a5016404 	addi	r20,r20,1424
    55dc:	04000084 	movi	r16,2
    55e0:	8980004c 	andi	r6,r17,1
    55e4:	1009883a 	mov	r4,r2
    55e8:	8823d07a 	srai	r17,r17,1
    55ec:	180b883a 	mov	r5,r3
    55f0:	30000426 	beq	r6,zero,5604 <_dtoa_r+0x1270>
    55f4:	a1800017 	ldw	r6,0(r20)
    55f8:	a1c00117 	ldw	r7,4(r20)
    55fc:	84000044 	addi	r16,r16,1
    5600:	000d1140 	call	d114 <__muldf3>
    5604:	a5000204 	addi	r20,r20,8
    5608:	883ff51e 	bne	r17,zero,55e0 <__reset+0xfbf055e0>
    560c:	d8800f15 	stw	r2,60(sp)
    5610:	d8c01015 	stw	r3,64(sp)
    5614:	003c7606 	br	47f0 <__reset+0xfbf047f0>
    5618:	00c00c04 	movi	r3,48
    561c:	10c00005 	stb	r3,0(r2)
    5620:	d8c00517 	ldw	r3,20(sp)
    5624:	bd3fffc3 	ldbu	r20,-1(r23)
    5628:	18c00044 	addi	r3,r3,1
    562c:	d8c00515 	stw	r3,20(sp)
    5630:	003db906 	br	4d18 <__reset+0xfbf04d18>
    5634:	89400117 	ldw	r5,4(r17)
    5638:	e009883a 	mov	r4,fp
    563c:	00079080 	call	7908 <_Balloc>
    5640:	89800417 	ldw	r6,16(r17)
    5644:	89400304 	addi	r5,r17,12
    5648:	11000304 	addi	r4,r2,12
    564c:	31800084 	addi	r6,r6,2
    5650:	318d883a 	add	r6,r6,r6
    5654:	318d883a 	add	r6,r6,r6
    5658:	1027883a 	mov	r19,r2
    565c:	00076640 	call	7664 <memcpy>
    5660:	01800044 	movi	r6,1
    5664:	980b883a 	mov	r5,r19
    5668:	e009883a 	mov	r4,fp
    566c:	00080880 	call	8088 <__lshift>
    5670:	1029883a 	mov	r20,r2
    5674:	003ecc06 	br	51a8 <__reset+0xfbf051a8>
    5678:	00800e44 	movi	r2,57
    567c:	90809026 	beq	r18,r2,58c0 <_dtoa_r+0x152c>
    5680:	92000044 	addi	r8,r18,1
    5684:	003f1f06 	br	5304 <__reset+0xfbf05304>
    5688:	9011883a 	mov	r8,r18
    568c:	8825883a 	mov	r18,r17
    5690:	a023883a 	mov	r17,r20
    5694:	003e2906 	br	4f3c <__reset+0xfbf04f3c>
    5698:	002b883a 	mov	r21,zero
    569c:	0023883a 	mov	r17,zero
    56a0:	003f5406 	br	53f4 <__reset+0xfbf053f4>
    56a4:	61bfffc4 	addi	r6,r12,-1
    56a8:	300490fa 	slli	r2,r6,3
    56ac:	00c00074 	movhi	r3,1
    56b0:	18c16e04 	addi	r3,r3,1464
    56b4:	1885883a 	add	r2,r3,r2
    56b8:	11000017 	ldw	r4,0(r2)
    56bc:	11400117 	ldw	r5,4(r2)
    56c0:	d8800717 	ldw	r2,28(sp)
    56c4:	880f883a 	mov	r7,r17
    56c8:	d9801215 	stw	r6,72(sp)
    56cc:	800d883a 	mov	r6,r16
    56d0:	db001615 	stw	r12,88(sp)
    56d4:	15c00044 	addi	r23,r2,1
    56d8:	000d1140 	call	d114 <__muldf3>
    56dc:	d9401017 	ldw	r5,64(sp)
    56e0:	d9000f17 	ldw	r4,60(sp)
    56e4:	d8c01515 	stw	r3,84(sp)
    56e8:	d8801415 	stw	r2,80(sp)
    56ec:	000e1280 	call	e128 <__fixdfsi>
    56f0:	1009883a 	mov	r4,r2
    56f4:	1021883a 	mov	r16,r2
    56f8:	000e1a80 	call	e1a8 <__floatsidf>
    56fc:	d9000f17 	ldw	r4,60(sp)
    5700:	d9401017 	ldw	r5,64(sp)
    5704:	100d883a 	mov	r6,r2
    5708:	180f883a 	mov	r7,r3
    570c:	000d82c0 	call	d82c <__subdf3>
    5710:	1829883a 	mov	r20,r3
    5714:	d8c00717 	ldw	r3,28(sp)
    5718:	84000c04 	addi	r16,r16,48
    571c:	1023883a 	mov	r17,r2
    5720:	1c000005 	stb	r16,0(r3)
    5724:	db001617 	ldw	r12,88(sp)
    5728:	00800044 	movi	r2,1
    572c:	60802226 	beq	r12,r2,57b8 <_dtoa_r+0x1424>
    5730:	d9c00717 	ldw	r7,28(sp)
    5734:	8805883a 	mov	r2,r17
    5738:	b82b883a 	mov	r21,r23
    573c:	3b19883a 	add	r12,r7,r12
    5740:	6023883a 	mov	r17,r12
    5744:	a007883a 	mov	r3,r20
    5748:	dc800f15 	stw	r18,60(sp)
    574c:	000d883a 	mov	r6,zero
    5750:	01d00934 	movhi	r7,16420
    5754:	1009883a 	mov	r4,r2
    5758:	180b883a 	mov	r5,r3
    575c:	000d1140 	call	d114 <__muldf3>
    5760:	180b883a 	mov	r5,r3
    5764:	1009883a 	mov	r4,r2
    5768:	1829883a 	mov	r20,r3
    576c:	1025883a 	mov	r18,r2
    5770:	000e1280 	call	e128 <__fixdfsi>
    5774:	1009883a 	mov	r4,r2
    5778:	1021883a 	mov	r16,r2
    577c:	000e1a80 	call	e1a8 <__floatsidf>
    5780:	100d883a 	mov	r6,r2
    5784:	180f883a 	mov	r7,r3
    5788:	9009883a 	mov	r4,r18
    578c:	a00b883a 	mov	r5,r20
    5790:	84000c04 	addi	r16,r16,48
    5794:	000d82c0 	call	d82c <__subdf3>
    5798:	ad400044 	addi	r21,r21,1
    579c:	ac3fffc5 	stb	r16,-1(r21)
    57a0:	ac7fea1e 	bne	r21,r17,574c <__reset+0xfbf0574c>
    57a4:	1023883a 	mov	r17,r2
    57a8:	d8801217 	ldw	r2,72(sp)
    57ac:	dc800f17 	ldw	r18,60(sp)
    57b0:	1829883a 	mov	r20,r3
    57b4:	b8af883a 	add	r23,r23,r2
    57b8:	d9001417 	ldw	r4,80(sp)
    57bc:	d9401517 	ldw	r5,84(sp)
    57c0:	000d883a 	mov	r6,zero
    57c4:	01cff834 	movhi	r7,16352
    57c8:	000bd280 	call	bd28 <__adddf3>
    57cc:	880d883a 	mov	r6,r17
    57d0:	a00f883a 	mov	r7,r20
    57d4:	1009883a 	mov	r4,r2
    57d8:	180b883a 	mov	r5,r3
    57dc:	000d0200 	call	d020 <__ledf2>
    57e0:	10003e0e 	bge	r2,zero,58dc <_dtoa_r+0x1548>
    57e4:	d9001317 	ldw	r4,76(sp)
    57e8:	bd3fffc3 	ldbu	r20,-1(r23)
    57ec:	d9000515 	stw	r4,20(sp)
    57f0:	003d3b06 	br	4ce0 <__reset+0xfbf04ce0>
    57f4:	0027883a 	mov	r19,zero
    57f8:	003f1b06 	br	5468 <__reset+0xfbf05468>
    57fc:	d8800817 	ldw	r2,32(sp)
    5800:	11e9c83a 	sub	r20,r2,r7
    5804:	0005883a 	mov	r2,zero
    5808:	003d5406 	br	4d5c <__reset+0xfbf04d5c>
    580c:	00800044 	movi	r2,1
    5810:	003dc706 	br	4f30 <__reset+0xfbf04f30>
    5814:	d8c00217 	ldw	r3,8(sp)
    5818:	00800d84 	movi	r2,54
    581c:	dd400a17 	ldw	r21,40(sp)
    5820:	10c5c83a 	sub	r2,r2,r3
    5824:	dd000817 	ldw	r20,32(sp)
    5828:	003d4c06 	br	4d5c <__reset+0xfbf04d5c>
    582c:	dc800f15 	stw	r18,60(sp)
    5830:	dcc01015 	stw	r19,64(sp)
    5834:	04000084 	movi	r16,2
    5838:	003bed06 	br	47f0 <__reset+0xfbf047f0>
    583c:	d9000617 	ldw	r4,24(sp)
    5840:	203f0d26 	beq	r4,zero,5478 <__reset+0xfbf05478>
    5844:	d9800c17 	ldw	r6,48(sp)
    5848:	01bcab0e 	bge	zero,r6,4af8 <__reset+0xfbf04af8>
    584c:	d9401017 	ldw	r5,64(sp)
    5850:	d9000f17 	ldw	r4,60(sp)
    5854:	000d883a 	mov	r6,zero
    5858:	01d00934 	movhi	r7,16420
    585c:	000d1140 	call	d114 <__muldf3>
    5860:	81000044 	addi	r4,r16,1
    5864:	d8800f15 	stw	r2,60(sp)
    5868:	d8c01015 	stw	r3,64(sp)
    586c:	000e1a80 	call	e1a8 <__floatsidf>
    5870:	d9800f17 	ldw	r6,60(sp)
    5874:	d9c01017 	ldw	r7,64(sp)
    5878:	1009883a 	mov	r4,r2
    587c:	180b883a 	mov	r5,r3
    5880:	000d1140 	call	d114 <__muldf3>
    5884:	01d00734 	movhi	r7,16412
    5888:	000d883a 	mov	r6,zero
    588c:	1009883a 	mov	r4,r2
    5890:	180b883a 	mov	r5,r3
    5894:	000bd280 	call	bd28 <__adddf3>
    5898:	d9c00517 	ldw	r7,20(sp)
    589c:	047f3034 	movhi	r17,64704
    58a0:	1021883a 	mov	r16,r2
    58a4:	39ffffc4 	addi	r7,r7,-1
    58a8:	d9c01315 	stw	r7,76(sp)
    58ac:	1c63883a 	add	r17,r3,r17
    58b0:	db000c17 	ldw	r12,48(sp)
    58b4:	003bea06 	br	4860 <__reset+0xfbf04860>
    58b8:	dc000915 	stw	r16,36(sp)
    58bc:	003e0e06 	br	50f8 <__reset+0xfbf050f8>
    58c0:	01000e44 	movi	r4,57
    58c4:	8825883a 	mov	r18,r17
    58c8:	9dc00044 	addi	r23,r19,1
    58cc:	99000005 	stb	r4,0(r19)
    58d0:	a023883a 	mov	r17,r20
    58d4:	dc000915 	stw	r16,36(sp)
    58d8:	003da406 	br	4f6c <__reset+0xfbf04f6c>
    58dc:	d9801417 	ldw	r6,80(sp)
    58e0:	d9c01517 	ldw	r7,84(sp)
    58e4:	0009883a 	mov	r4,zero
    58e8:	014ff834 	movhi	r5,16352
    58ec:	000d82c0 	call	d82c <__subdf3>
    58f0:	880d883a 	mov	r6,r17
    58f4:	a00f883a 	mov	r7,r20
    58f8:	1009883a 	mov	r4,r2
    58fc:	180b883a 	mov	r5,r3
    5900:	000cf440 	call	cf44 <__gedf2>
    5904:	00bc7c0e 	bge	zero,r2,4af8 <__reset+0xfbf04af8>
    5908:	01000c04 	movi	r4,48
    590c:	00000106 	br	5914 <_dtoa_r+0x1580>
    5910:	102f883a 	mov	r23,r2
    5914:	b8bfffc4 	addi	r2,r23,-1
    5918:	10c00007 	ldb	r3,0(r2)
    591c:	193ffc26 	beq	r3,r4,5910 <__reset+0xfbf05910>
    5920:	d9801317 	ldw	r6,76(sp)
    5924:	d9800515 	stw	r6,20(sp)
    5928:	003c4406 	br	4a3c <__reset+0xfbf04a3c>
    592c:	d9801317 	ldw	r6,76(sp)
    5930:	d9800515 	stw	r6,20(sp)
    5934:	003cea06 	br	4ce0 <__reset+0xfbf04ce0>
    5938:	dd800f17 	ldw	r22,60(sp)
    593c:	dcc01017 	ldw	r19,64(sp)
    5940:	dc801217 	ldw	r18,72(sp)
    5944:	003c6c06 	br	4af8 <__reset+0xfbf04af8>
    5948:	903e031e 	bne	r18,zero,5158 <__reset+0xfbf05158>
    594c:	003ebb06 	br	543c <__reset+0xfbf0543c>
    5950:	103e6c1e 	bne	r2,zero,5304 <__reset+0xfbf05304>
    5954:	4080004c 	andi	r2,r8,1
    5958:	103e6a26 	beq	r2,zero,5304 <__reset+0xfbf05304>
    595c:	003e6606 	br	52f8 <__reset+0xfbf052f8>
    5960:	d8c00317 	ldw	r3,12(sp)
    5964:	00800084 	movi	r2,2
    5968:	10c02916 	blt	r2,r3,5a10 <_dtoa_r+0x167c>
    596c:	d9000c17 	ldw	r4,48(sp)
    5970:	003e8806 	br	5394 <__reset+0xfbf05394>
    5974:	04000084 	movi	r16,2
    5978:	003b9d06 	br	47f0 <__reset+0xfbf047f0>
    597c:	d9001317 	ldw	r4,76(sp)
    5980:	d9000515 	stw	r4,20(sp)
    5984:	003cd606 	br	4ce0 <__reset+0xfbf04ce0>
    5988:	d8801317 	ldw	r2,76(sp)
    598c:	d8800515 	stw	r2,20(sp)
    5990:	003c2a06 	br	4a3c <__reset+0xfbf04a3c>
    5994:	d9800317 	ldw	r6,12(sp)
    5998:	00800084 	movi	r2,2
    599c:	11801516 	blt	r2,r6,59f4 <_dtoa_r+0x1660>
    59a0:	d9c00c17 	ldw	r7,48(sp)
    59a4:	d9c00615 	stw	r7,24(sp)
    59a8:	003df706 	br	5188 <__reset+0xfbf05188>
    59ac:	193d3926 	beq	r3,r4,4e94 <__reset+0xfbf04e94>
    59b0:	00c00f04 	movi	r3,60
    59b4:	1885c83a 	sub	r2,r3,r2
    59b8:	003ddf06 	br	5138 <__reset+0xfbf05138>
    59bc:	e009883a 	mov	r4,fp
    59c0:	e0001115 	stw	zero,68(fp)
    59c4:	000b883a 	mov	r5,zero
    59c8:	00079080 	call	7908 <_Balloc>
    59cc:	d8800715 	stw	r2,28(sp)
    59d0:	d8c00717 	ldw	r3,28(sp)
    59d4:	00bfffc4 	movi	r2,-1
    59d8:	01000044 	movi	r4,1
    59dc:	d8800c15 	stw	r2,48(sp)
    59e0:	e0c01015 	stw	r3,64(fp)
    59e4:	d9000b15 	stw	r4,44(sp)
    59e8:	d8800615 	stw	r2,24(sp)
    59ec:	d8002215 	stw	zero,136(sp)
    59f0:	003c4106 	br	4af8 <__reset+0xfbf04af8>
    59f4:	d8c00c17 	ldw	r3,48(sp)
    59f8:	d8c00615 	stw	r3,24(sp)
    59fc:	003e7006 	br	53c0 <__reset+0xfbf053c0>
    5a00:	04400044 	movi	r17,1
    5a04:	003b2006 	br	4688 <__reset+0xfbf04688>
    5a08:	000b883a 	mov	r5,zero
    5a0c:	003b3d06 	br	4704 <__reset+0xfbf04704>
    5a10:	d8800c17 	ldw	r2,48(sp)
    5a14:	d8800615 	stw	r2,24(sp)
    5a18:	003e6906 	br	53c0 <__reset+0xfbf053c0>

00005a1c <__sflush_r>:
    5a1c:	2880030b 	ldhu	r2,12(r5)
    5a20:	defffb04 	addi	sp,sp,-20
    5a24:	dcc00315 	stw	r19,12(sp)
    5a28:	dc400115 	stw	r17,4(sp)
    5a2c:	dfc00415 	stw	ra,16(sp)
    5a30:	dc800215 	stw	r18,8(sp)
    5a34:	dc000015 	stw	r16,0(sp)
    5a38:	10c0020c 	andi	r3,r2,8
    5a3c:	2823883a 	mov	r17,r5
    5a40:	2027883a 	mov	r19,r4
    5a44:	1800311e 	bne	r3,zero,5b0c <__sflush_r+0xf0>
    5a48:	28c00117 	ldw	r3,4(r5)
    5a4c:	10820014 	ori	r2,r2,2048
    5a50:	2880030d 	sth	r2,12(r5)
    5a54:	00c04b0e 	bge	zero,r3,5b84 <__sflush_r+0x168>
    5a58:	8a000a17 	ldw	r8,40(r17)
    5a5c:	40002326 	beq	r8,zero,5aec <__sflush_r+0xd0>
    5a60:	9c000017 	ldw	r16,0(r19)
    5a64:	10c4000c 	andi	r3,r2,4096
    5a68:	98000015 	stw	zero,0(r19)
    5a6c:	18004826 	beq	r3,zero,5b90 <__sflush_r+0x174>
    5a70:	89801417 	ldw	r6,80(r17)
    5a74:	10c0010c 	andi	r3,r2,4
    5a78:	18000626 	beq	r3,zero,5a94 <__sflush_r+0x78>
    5a7c:	88c00117 	ldw	r3,4(r17)
    5a80:	88800c17 	ldw	r2,48(r17)
    5a84:	30cdc83a 	sub	r6,r6,r3
    5a88:	10000226 	beq	r2,zero,5a94 <__sflush_r+0x78>
    5a8c:	88800f17 	ldw	r2,60(r17)
    5a90:	308dc83a 	sub	r6,r6,r2
    5a94:	89400717 	ldw	r5,28(r17)
    5a98:	000f883a 	mov	r7,zero
    5a9c:	9809883a 	mov	r4,r19
    5aa0:	403ee83a 	callr	r8
    5aa4:	00ffffc4 	movi	r3,-1
    5aa8:	10c04426 	beq	r2,r3,5bbc <__sflush_r+0x1a0>
    5aac:	88c0030b 	ldhu	r3,12(r17)
    5ab0:	89000417 	ldw	r4,16(r17)
    5ab4:	88000115 	stw	zero,4(r17)
    5ab8:	197dffcc 	andi	r5,r3,63487
    5abc:	8940030d 	sth	r5,12(r17)
    5ac0:	89000015 	stw	r4,0(r17)
    5ac4:	18c4000c 	andi	r3,r3,4096
    5ac8:	18002c1e 	bne	r3,zero,5b7c <__sflush_r+0x160>
    5acc:	89400c17 	ldw	r5,48(r17)
    5ad0:	9c000015 	stw	r16,0(r19)
    5ad4:	28000526 	beq	r5,zero,5aec <__sflush_r+0xd0>
    5ad8:	88801004 	addi	r2,r17,64
    5adc:	28800226 	beq	r5,r2,5ae8 <__sflush_r+0xcc>
    5ae0:	9809883a 	mov	r4,r19
    5ae4:	00061880 	call	6188 <_free_r>
    5ae8:	88000c15 	stw	zero,48(r17)
    5aec:	0005883a 	mov	r2,zero
    5af0:	dfc00417 	ldw	ra,16(sp)
    5af4:	dcc00317 	ldw	r19,12(sp)
    5af8:	dc800217 	ldw	r18,8(sp)
    5afc:	dc400117 	ldw	r17,4(sp)
    5b00:	dc000017 	ldw	r16,0(sp)
    5b04:	dec00504 	addi	sp,sp,20
    5b08:	f800283a 	ret
    5b0c:	2c800417 	ldw	r18,16(r5)
    5b10:	903ff626 	beq	r18,zero,5aec <__reset+0xfbf05aec>
    5b14:	2c000017 	ldw	r16,0(r5)
    5b18:	108000cc 	andi	r2,r2,3
    5b1c:	2c800015 	stw	r18,0(r5)
    5b20:	84a1c83a 	sub	r16,r16,r18
    5b24:	1000131e 	bne	r2,zero,5b74 <__sflush_r+0x158>
    5b28:	28800517 	ldw	r2,20(r5)
    5b2c:	88800215 	stw	r2,8(r17)
    5b30:	04000316 	blt	zero,r16,5b40 <__sflush_r+0x124>
    5b34:	003fed06 	br	5aec <__reset+0xfbf05aec>
    5b38:	90a5883a 	add	r18,r18,r2
    5b3c:	043feb0e 	bge	zero,r16,5aec <__reset+0xfbf05aec>
    5b40:	88800917 	ldw	r2,36(r17)
    5b44:	89400717 	ldw	r5,28(r17)
    5b48:	800f883a 	mov	r7,r16
    5b4c:	900d883a 	mov	r6,r18
    5b50:	9809883a 	mov	r4,r19
    5b54:	103ee83a 	callr	r2
    5b58:	80a1c83a 	sub	r16,r16,r2
    5b5c:	00bff616 	blt	zero,r2,5b38 <__reset+0xfbf05b38>
    5b60:	88c0030b 	ldhu	r3,12(r17)
    5b64:	00bfffc4 	movi	r2,-1
    5b68:	18c01014 	ori	r3,r3,64
    5b6c:	88c0030d 	sth	r3,12(r17)
    5b70:	003fdf06 	br	5af0 <__reset+0xfbf05af0>
    5b74:	0005883a 	mov	r2,zero
    5b78:	003fec06 	br	5b2c <__reset+0xfbf05b2c>
    5b7c:	88801415 	stw	r2,80(r17)
    5b80:	003fd206 	br	5acc <__reset+0xfbf05acc>
    5b84:	28c00f17 	ldw	r3,60(r5)
    5b88:	00ffb316 	blt	zero,r3,5a58 <__reset+0xfbf05a58>
    5b8c:	003fd706 	br	5aec <__reset+0xfbf05aec>
    5b90:	89400717 	ldw	r5,28(r17)
    5b94:	000d883a 	mov	r6,zero
    5b98:	01c00044 	movi	r7,1
    5b9c:	9809883a 	mov	r4,r19
    5ba0:	403ee83a 	callr	r8
    5ba4:	100d883a 	mov	r6,r2
    5ba8:	00bfffc4 	movi	r2,-1
    5bac:	30801426 	beq	r6,r2,5c00 <__sflush_r+0x1e4>
    5bb0:	8880030b 	ldhu	r2,12(r17)
    5bb4:	8a000a17 	ldw	r8,40(r17)
    5bb8:	003fae06 	br	5a74 <__reset+0xfbf05a74>
    5bbc:	98c00017 	ldw	r3,0(r19)
    5bc0:	183fba26 	beq	r3,zero,5aac <__reset+0xfbf05aac>
    5bc4:	01000744 	movi	r4,29
    5bc8:	19000626 	beq	r3,r4,5be4 <__sflush_r+0x1c8>
    5bcc:	01000584 	movi	r4,22
    5bd0:	19000426 	beq	r3,r4,5be4 <__sflush_r+0x1c8>
    5bd4:	88c0030b 	ldhu	r3,12(r17)
    5bd8:	18c01014 	ori	r3,r3,64
    5bdc:	88c0030d 	sth	r3,12(r17)
    5be0:	003fc306 	br	5af0 <__reset+0xfbf05af0>
    5be4:	8880030b 	ldhu	r2,12(r17)
    5be8:	88c00417 	ldw	r3,16(r17)
    5bec:	88000115 	stw	zero,4(r17)
    5bf0:	10bdffcc 	andi	r2,r2,63487
    5bf4:	8880030d 	sth	r2,12(r17)
    5bf8:	88c00015 	stw	r3,0(r17)
    5bfc:	003fb306 	br	5acc <__reset+0xfbf05acc>
    5c00:	98800017 	ldw	r2,0(r19)
    5c04:	103fea26 	beq	r2,zero,5bb0 <__reset+0xfbf05bb0>
    5c08:	00c00744 	movi	r3,29
    5c0c:	10c00226 	beq	r2,r3,5c18 <__sflush_r+0x1fc>
    5c10:	00c00584 	movi	r3,22
    5c14:	10c0031e 	bne	r2,r3,5c24 <__sflush_r+0x208>
    5c18:	9c000015 	stw	r16,0(r19)
    5c1c:	0005883a 	mov	r2,zero
    5c20:	003fb306 	br	5af0 <__reset+0xfbf05af0>
    5c24:	88c0030b 	ldhu	r3,12(r17)
    5c28:	3005883a 	mov	r2,r6
    5c2c:	18c01014 	ori	r3,r3,64
    5c30:	88c0030d 	sth	r3,12(r17)
    5c34:	003fae06 	br	5af0 <__reset+0xfbf05af0>

00005c38 <_fflush_r>:
    5c38:	defffd04 	addi	sp,sp,-12
    5c3c:	dc000115 	stw	r16,4(sp)
    5c40:	dfc00215 	stw	ra,8(sp)
    5c44:	2021883a 	mov	r16,r4
    5c48:	20000226 	beq	r4,zero,5c54 <_fflush_r+0x1c>
    5c4c:	20800e17 	ldw	r2,56(r4)
    5c50:	10000c26 	beq	r2,zero,5c84 <_fflush_r+0x4c>
    5c54:	2880030f 	ldh	r2,12(r5)
    5c58:	1000051e 	bne	r2,zero,5c70 <_fflush_r+0x38>
    5c5c:	0005883a 	mov	r2,zero
    5c60:	dfc00217 	ldw	ra,8(sp)
    5c64:	dc000117 	ldw	r16,4(sp)
    5c68:	dec00304 	addi	sp,sp,12
    5c6c:	f800283a 	ret
    5c70:	8009883a 	mov	r4,r16
    5c74:	dfc00217 	ldw	ra,8(sp)
    5c78:	dc000117 	ldw	r16,4(sp)
    5c7c:	dec00304 	addi	sp,sp,12
    5c80:	0005a1c1 	jmpi	5a1c <__sflush_r>
    5c84:	d9400015 	stw	r5,0(sp)
    5c88:	00060140 	call	6014 <__sinit>
    5c8c:	d9400017 	ldw	r5,0(sp)
    5c90:	003ff006 	br	5c54 <__reset+0xfbf05c54>

00005c94 <fflush>:
    5c94:	20000526 	beq	r4,zero,5cac <fflush+0x18>
    5c98:	00800074 	movhi	r2,1
    5c9c:	1089e504 	addi	r2,r2,10132
    5ca0:	200b883a 	mov	r5,r4
    5ca4:	11000017 	ldw	r4,0(r2)
    5ca8:	0005c381 	jmpi	5c38 <_fflush_r>
    5cac:	00800074 	movhi	r2,1
    5cb0:	1089e404 	addi	r2,r2,10128
    5cb4:	11000017 	ldw	r4,0(r2)
    5cb8:	01400034 	movhi	r5,0
    5cbc:	29570e04 	addi	r5,r5,23608
    5cc0:	0006a181 	jmpi	6a18 <_fwalk_reent>

00005cc4 <__fp_unlock>:
    5cc4:	0005883a 	mov	r2,zero
    5cc8:	f800283a 	ret

00005ccc <_cleanup_r>:
    5ccc:	01400074 	movhi	r5,1
    5cd0:	296a4204 	addi	r5,r5,-22264
    5cd4:	0006a181 	jmpi	6a18 <_fwalk_reent>

00005cd8 <__sinit.part.1>:
    5cd8:	defff704 	addi	sp,sp,-36
    5cdc:	00c00034 	movhi	r3,0
    5ce0:	dfc00815 	stw	ra,32(sp)
    5ce4:	ddc00715 	stw	r23,28(sp)
    5ce8:	dd800615 	stw	r22,24(sp)
    5cec:	dd400515 	stw	r21,20(sp)
    5cf0:	dd000415 	stw	r20,16(sp)
    5cf4:	dcc00315 	stw	r19,12(sp)
    5cf8:	dc800215 	stw	r18,8(sp)
    5cfc:	dc400115 	stw	r17,4(sp)
    5d00:	dc000015 	stw	r16,0(sp)
    5d04:	18d73304 	addi	r3,r3,23756
    5d08:	24000117 	ldw	r16,4(r4)
    5d0c:	20c00f15 	stw	r3,60(r4)
    5d10:	2080bb04 	addi	r2,r4,748
    5d14:	00c000c4 	movi	r3,3
    5d18:	20c0b915 	stw	r3,740(r4)
    5d1c:	2080ba15 	stw	r2,744(r4)
    5d20:	2000b815 	stw	zero,736(r4)
    5d24:	05c00204 	movi	r23,8
    5d28:	00800104 	movi	r2,4
    5d2c:	2025883a 	mov	r18,r4
    5d30:	b80d883a 	mov	r6,r23
    5d34:	81001704 	addi	r4,r16,92
    5d38:	000b883a 	mov	r5,zero
    5d3c:	80000015 	stw	zero,0(r16)
    5d40:	80000115 	stw	zero,4(r16)
    5d44:	80000215 	stw	zero,8(r16)
    5d48:	8080030d 	sth	r2,12(r16)
    5d4c:	80001915 	stw	zero,100(r16)
    5d50:	8000038d 	sth	zero,14(r16)
    5d54:	80000415 	stw	zero,16(r16)
    5d58:	80000515 	stw	zero,20(r16)
    5d5c:	80000615 	stw	zero,24(r16)
    5d60:	0001a700 	call	1a70 <memset>
    5d64:	05800074 	movhi	r22,1
    5d68:	94400217 	ldw	r17,8(r18)
    5d6c:	05400074 	movhi	r21,1
    5d70:	05000074 	movhi	r20,1
    5d74:	04c00074 	movhi	r19,1
    5d78:	b5a3cc04 	addi	r22,r22,-28880
    5d7c:	ad63e304 	addi	r21,r21,-28788
    5d80:	a5240204 	addi	r20,r20,-28664
    5d84:	9ce41904 	addi	r19,r19,-28572
    5d88:	85800815 	stw	r22,32(r16)
    5d8c:	85400915 	stw	r21,36(r16)
    5d90:	85000a15 	stw	r20,40(r16)
    5d94:	84c00b15 	stw	r19,44(r16)
    5d98:	84000715 	stw	r16,28(r16)
    5d9c:	00800284 	movi	r2,10
    5da0:	8880030d 	sth	r2,12(r17)
    5da4:	00800044 	movi	r2,1
    5da8:	b80d883a 	mov	r6,r23
    5dac:	89001704 	addi	r4,r17,92
    5db0:	000b883a 	mov	r5,zero
    5db4:	88000015 	stw	zero,0(r17)
    5db8:	88000115 	stw	zero,4(r17)
    5dbc:	88000215 	stw	zero,8(r17)
    5dc0:	88001915 	stw	zero,100(r17)
    5dc4:	8880038d 	sth	r2,14(r17)
    5dc8:	88000415 	stw	zero,16(r17)
    5dcc:	88000515 	stw	zero,20(r17)
    5dd0:	88000615 	stw	zero,24(r17)
    5dd4:	0001a700 	call	1a70 <memset>
    5dd8:	94000317 	ldw	r16,12(r18)
    5ddc:	00800484 	movi	r2,18
    5de0:	8c400715 	stw	r17,28(r17)
    5de4:	8d800815 	stw	r22,32(r17)
    5de8:	8d400915 	stw	r21,36(r17)
    5dec:	8d000a15 	stw	r20,40(r17)
    5df0:	8cc00b15 	stw	r19,44(r17)
    5df4:	8080030d 	sth	r2,12(r16)
    5df8:	00800084 	movi	r2,2
    5dfc:	80000015 	stw	zero,0(r16)
    5e00:	80000115 	stw	zero,4(r16)
    5e04:	80000215 	stw	zero,8(r16)
    5e08:	80001915 	stw	zero,100(r16)
    5e0c:	8080038d 	sth	r2,14(r16)
    5e10:	80000415 	stw	zero,16(r16)
    5e14:	80000515 	stw	zero,20(r16)
    5e18:	80000615 	stw	zero,24(r16)
    5e1c:	b80d883a 	mov	r6,r23
    5e20:	000b883a 	mov	r5,zero
    5e24:	81001704 	addi	r4,r16,92
    5e28:	0001a700 	call	1a70 <memset>
    5e2c:	00800044 	movi	r2,1
    5e30:	84000715 	stw	r16,28(r16)
    5e34:	85800815 	stw	r22,32(r16)
    5e38:	85400915 	stw	r21,36(r16)
    5e3c:	85000a15 	stw	r20,40(r16)
    5e40:	84c00b15 	stw	r19,44(r16)
    5e44:	90800e15 	stw	r2,56(r18)
    5e48:	dfc00817 	ldw	ra,32(sp)
    5e4c:	ddc00717 	ldw	r23,28(sp)
    5e50:	dd800617 	ldw	r22,24(sp)
    5e54:	dd400517 	ldw	r21,20(sp)
    5e58:	dd000417 	ldw	r20,16(sp)
    5e5c:	dcc00317 	ldw	r19,12(sp)
    5e60:	dc800217 	ldw	r18,8(sp)
    5e64:	dc400117 	ldw	r17,4(sp)
    5e68:	dc000017 	ldw	r16,0(sp)
    5e6c:	dec00904 	addi	sp,sp,36
    5e70:	f800283a 	ret

00005e74 <__fp_lock>:
    5e74:	0005883a 	mov	r2,zero
    5e78:	f800283a 	ret

00005e7c <__sfmoreglue>:
    5e7c:	defffc04 	addi	sp,sp,-16
    5e80:	dc400115 	stw	r17,4(sp)
    5e84:	2c7fffc4 	addi	r17,r5,-1
    5e88:	8c401a24 	muli	r17,r17,104
    5e8c:	dc800215 	stw	r18,8(sp)
    5e90:	2825883a 	mov	r18,r5
    5e94:	89401d04 	addi	r5,r17,116
    5e98:	dc000015 	stw	r16,0(sp)
    5e9c:	dfc00315 	stw	ra,12(sp)
    5ea0:	0006d740 	call	6d74 <_malloc_r>
    5ea4:	1021883a 	mov	r16,r2
    5ea8:	10000726 	beq	r2,zero,5ec8 <__sfmoreglue+0x4c>
    5eac:	11000304 	addi	r4,r2,12
    5eb0:	10000015 	stw	zero,0(r2)
    5eb4:	14800115 	stw	r18,4(r2)
    5eb8:	11000215 	stw	r4,8(r2)
    5ebc:	89801a04 	addi	r6,r17,104
    5ec0:	000b883a 	mov	r5,zero
    5ec4:	0001a700 	call	1a70 <memset>
    5ec8:	8005883a 	mov	r2,r16
    5ecc:	dfc00317 	ldw	ra,12(sp)
    5ed0:	dc800217 	ldw	r18,8(sp)
    5ed4:	dc400117 	ldw	r17,4(sp)
    5ed8:	dc000017 	ldw	r16,0(sp)
    5edc:	dec00404 	addi	sp,sp,16
    5ee0:	f800283a 	ret

00005ee4 <__sfp>:
    5ee4:	defffb04 	addi	sp,sp,-20
    5ee8:	dc000015 	stw	r16,0(sp)
    5eec:	04000074 	movhi	r16,1
    5ef0:	8409e404 	addi	r16,r16,10128
    5ef4:	dcc00315 	stw	r19,12(sp)
    5ef8:	2027883a 	mov	r19,r4
    5efc:	81000017 	ldw	r4,0(r16)
    5f00:	dfc00415 	stw	ra,16(sp)
    5f04:	dc800215 	stw	r18,8(sp)
    5f08:	20800e17 	ldw	r2,56(r4)
    5f0c:	dc400115 	stw	r17,4(sp)
    5f10:	1000021e 	bne	r2,zero,5f1c <__sfp+0x38>
    5f14:	0005cd80 	call	5cd8 <__sinit.part.1>
    5f18:	81000017 	ldw	r4,0(r16)
    5f1c:	2480b804 	addi	r18,r4,736
    5f20:	047fffc4 	movi	r17,-1
    5f24:	91000117 	ldw	r4,4(r18)
    5f28:	94000217 	ldw	r16,8(r18)
    5f2c:	213fffc4 	addi	r4,r4,-1
    5f30:	20000a16 	blt	r4,zero,5f5c <__sfp+0x78>
    5f34:	8080030f 	ldh	r2,12(r16)
    5f38:	10000c26 	beq	r2,zero,5f6c <__sfp+0x88>
    5f3c:	80c01d04 	addi	r3,r16,116
    5f40:	00000206 	br	5f4c <__sfp+0x68>
    5f44:	18bfe60f 	ldh	r2,-104(r3)
    5f48:	10000826 	beq	r2,zero,5f6c <__sfp+0x88>
    5f4c:	213fffc4 	addi	r4,r4,-1
    5f50:	1c3ffd04 	addi	r16,r3,-12
    5f54:	18c01a04 	addi	r3,r3,104
    5f58:	247ffa1e 	bne	r4,r17,5f44 <__reset+0xfbf05f44>
    5f5c:	90800017 	ldw	r2,0(r18)
    5f60:	10001d26 	beq	r2,zero,5fd8 <__sfp+0xf4>
    5f64:	1025883a 	mov	r18,r2
    5f68:	003fee06 	br	5f24 <__reset+0xfbf05f24>
    5f6c:	00bfffc4 	movi	r2,-1
    5f70:	8080038d 	sth	r2,14(r16)
    5f74:	00800044 	movi	r2,1
    5f78:	8080030d 	sth	r2,12(r16)
    5f7c:	80001915 	stw	zero,100(r16)
    5f80:	80000015 	stw	zero,0(r16)
    5f84:	80000215 	stw	zero,8(r16)
    5f88:	80000115 	stw	zero,4(r16)
    5f8c:	80000415 	stw	zero,16(r16)
    5f90:	80000515 	stw	zero,20(r16)
    5f94:	80000615 	stw	zero,24(r16)
    5f98:	01800204 	movi	r6,8
    5f9c:	000b883a 	mov	r5,zero
    5fa0:	81001704 	addi	r4,r16,92
    5fa4:	0001a700 	call	1a70 <memset>
    5fa8:	8005883a 	mov	r2,r16
    5fac:	80000c15 	stw	zero,48(r16)
    5fb0:	80000d15 	stw	zero,52(r16)
    5fb4:	80001115 	stw	zero,68(r16)
    5fb8:	80001215 	stw	zero,72(r16)
    5fbc:	dfc00417 	ldw	ra,16(sp)
    5fc0:	dcc00317 	ldw	r19,12(sp)
    5fc4:	dc800217 	ldw	r18,8(sp)
    5fc8:	dc400117 	ldw	r17,4(sp)
    5fcc:	dc000017 	ldw	r16,0(sp)
    5fd0:	dec00504 	addi	sp,sp,20
    5fd4:	f800283a 	ret
    5fd8:	01400104 	movi	r5,4
    5fdc:	9809883a 	mov	r4,r19
    5fe0:	0005e7c0 	call	5e7c <__sfmoreglue>
    5fe4:	90800015 	stw	r2,0(r18)
    5fe8:	103fde1e 	bne	r2,zero,5f64 <__reset+0xfbf05f64>
    5fec:	00800304 	movi	r2,12
    5ff0:	98800015 	stw	r2,0(r19)
    5ff4:	0005883a 	mov	r2,zero
    5ff8:	003ff006 	br	5fbc <__reset+0xfbf05fbc>

00005ffc <_cleanup>:
    5ffc:	00800074 	movhi	r2,1
    6000:	1089e404 	addi	r2,r2,10128
    6004:	11000017 	ldw	r4,0(r2)
    6008:	01400074 	movhi	r5,1
    600c:	296a4204 	addi	r5,r5,-22264
    6010:	0006a181 	jmpi	6a18 <_fwalk_reent>

00006014 <__sinit>:
    6014:	20800e17 	ldw	r2,56(r4)
    6018:	10000126 	beq	r2,zero,6020 <__sinit+0xc>
    601c:	f800283a 	ret
    6020:	0005cd81 	jmpi	5cd8 <__sinit.part.1>

00006024 <__sfp_lock_acquire>:
    6024:	f800283a 	ret

00006028 <__sfp_lock_release>:
    6028:	f800283a 	ret

0000602c <__sinit_lock_acquire>:
    602c:	f800283a 	ret

00006030 <__sinit_lock_release>:
    6030:	f800283a 	ret

00006034 <__fp_lock_all>:
    6034:	00800074 	movhi	r2,1
    6038:	1089e504 	addi	r2,r2,10132
    603c:	11000017 	ldw	r4,0(r2)
    6040:	01400034 	movhi	r5,0
    6044:	29579d04 	addi	r5,r5,24180
    6048:	00069541 	jmpi	6954 <_fwalk>

0000604c <__fp_unlock_all>:
    604c:	00800074 	movhi	r2,1
    6050:	1089e504 	addi	r2,r2,10132
    6054:	11000017 	ldw	r4,0(r2)
    6058:	01400034 	movhi	r5,0
    605c:	29573104 	addi	r5,r5,23748
    6060:	00069541 	jmpi	6954 <_fwalk>

00006064 <_malloc_trim_r>:
    6064:	defffb04 	addi	sp,sp,-20
    6068:	dcc00315 	stw	r19,12(sp)
    606c:	04c00074 	movhi	r19,1
    6070:	dc800215 	stw	r18,8(sp)
    6074:	dc400115 	stw	r17,4(sp)
    6078:	dc000015 	stw	r16,0(sp)
    607c:	dfc00415 	stw	ra,16(sp)
    6080:	2821883a 	mov	r16,r5
    6084:	9cc3ca04 	addi	r19,r19,3880
    6088:	2025883a 	mov	r18,r4
    608c:	000e5740 	call	e574 <__malloc_lock>
    6090:	98800217 	ldw	r2,8(r19)
    6094:	14400117 	ldw	r17,4(r2)
    6098:	00bfff04 	movi	r2,-4
    609c:	88a2703a 	and	r17,r17,r2
    60a0:	8c21c83a 	sub	r16,r17,r16
    60a4:	8403fbc4 	addi	r16,r16,4079
    60a8:	8020d33a 	srli	r16,r16,12
    60ac:	0083ffc4 	movi	r2,4095
    60b0:	843fffc4 	addi	r16,r16,-1
    60b4:	8020933a 	slli	r16,r16,12
    60b8:	1400060e 	bge	r2,r16,60d4 <_malloc_trim_r+0x70>
    60bc:	000b883a 	mov	r5,zero
    60c0:	9009883a 	mov	r4,r18
    60c4:	0008edc0 	call	8edc <_sbrk_r>
    60c8:	98c00217 	ldw	r3,8(r19)
    60cc:	1c47883a 	add	r3,r3,r17
    60d0:	10c00a26 	beq	r2,r3,60fc <_malloc_trim_r+0x98>
    60d4:	9009883a 	mov	r4,r18
    60d8:	000e5780 	call	e578 <__malloc_unlock>
    60dc:	0005883a 	mov	r2,zero
    60e0:	dfc00417 	ldw	ra,16(sp)
    60e4:	dcc00317 	ldw	r19,12(sp)
    60e8:	dc800217 	ldw	r18,8(sp)
    60ec:	dc400117 	ldw	r17,4(sp)
    60f0:	dc000017 	ldw	r16,0(sp)
    60f4:	dec00504 	addi	sp,sp,20
    60f8:	f800283a 	ret
    60fc:	040bc83a 	sub	r5,zero,r16
    6100:	9009883a 	mov	r4,r18
    6104:	0008edc0 	call	8edc <_sbrk_r>
    6108:	00ffffc4 	movi	r3,-1
    610c:	10c00d26 	beq	r2,r3,6144 <_malloc_trim_r+0xe0>
    6110:	00c00074 	movhi	r3,1
    6114:	18d71404 	addi	r3,r3,23632
    6118:	18800017 	ldw	r2,0(r3)
    611c:	99000217 	ldw	r4,8(r19)
    6120:	8c23c83a 	sub	r17,r17,r16
    6124:	8c400054 	ori	r17,r17,1
    6128:	1421c83a 	sub	r16,r2,r16
    612c:	24400115 	stw	r17,4(r4)
    6130:	9009883a 	mov	r4,r18
    6134:	1c000015 	stw	r16,0(r3)
    6138:	000e5780 	call	e578 <__malloc_unlock>
    613c:	00800044 	movi	r2,1
    6140:	003fe706 	br	60e0 <__reset+0xfbf060e0>
    6144:	000b883a 	mov	r5,zero
    6148:	9009883a 	mov	r4,r18
    614c:	0008edc0 	call	8edc <_sbrk_r>
    6150:	99000217 	ldw	r4,8(r19)
    6154:	014003c4 	movi	r5,15
    6158:	1107c83a 	sub	r3,r2,r4
    615c:	28ffdd0e 	bge	r5,r3,60d4 <__reset+0xfbf060d4>
    6160:	01400074 	movhi	r5,1
    6164:	2949e704 	addi	r5,r5,10140
    6168:	29400017 	ldw	r5,0(r5)
    616c:	18c00054 	ori	r3,r3,1
    6170:	20c00115 	stw	r3,4(r4)
    6174:	00c00074 	movhi	r3,1
    6178:	1145c83a 	sub	r2,r2,r5
    617c:	18d71404 	addi	r3,r3,23632
    6180:	18800015 	stw	r2,0(r3)
    6184:	003fd306 	br	60d4 <__reset+0xfbf060d4>

00006188 <_free_r>:
    6188:	28004126 	beq	r5,zero,6290 <_free_r+0x108>
    618c:	defffd04 	addi	sp,sp,-12
    6190:	dc400115 	stw	r17,4(sp)
    6194:	dc000015 	stw	r16,0(sp)
    6198:	2023883a 	mov	r17,r4
    619c:	2821883a 	mov	r16,r5
    61a0:	dfc00215 	stw	ra,8(sp)
    61a4:	000e5740 	call	e574 <__malloc_lock>
    61a8:	81ffff17 	ldw	r7,-4(r16)
    61ac:	00bfff84 	movi	r2,-2
    61b0:	01000074 	movhi	r4,1
    61b4:	81bffe04 	addi	r6,r16,-8
    61b8:	3884703a 	and	r2,r7,r2
    61bc:	2103ca04 	addi	r4,r4,3880
    61c0:	308b883a 	add	r5,r6,r2
    61c4:	2a400117 	ldw	r9,4(r5)
    61c8:	22000217 	ldw	r8,8(r4)
    61cc:	00ffff04 	movi	r3,-4
    61d0:	48c6703a 	and	r3,r9,r3
    61d4:	2a005726 	beq	r5,r8,6334 <_free_r+0x1ac>
    61d8:	28c00115 	stw	r3,4(r5)
    61dc:	39c0004c 	andi	r7,r7,1
    61e0:	3800091e 	bne	r7,zero,6208 <_free_r+0x80>
    61e4:	823ffe17 	ldw	r8,-8(r16)
    61e8:	22400204 	addi	r9,r4,8
    61ec:	320dc83a 	sub	r6,r6,r8
    61f0:	31c00217 	ldw	r7,8(r6)
    61f4:	1205883a 	add	r2,r2,r8
    61f8:	3a406526 	beq	r7,r9,6390 <_free_r+0x208>
    61fc:	32000317 	ldw	r8,12(r6)
    6200:	3a000315 	stw	r8,12(r7)
    6204:	41c00215 	stw	r7,8(r8)
    6208:	28cf883a 	add	r7,r5,r3
    620c:	39c00117 	ldw	r7,4(r7)
    6210:	39c0004c 	andi	r7,r7,1
    6214:	38003a26 	beq	r7,zero,6300 <_free_r+0x178>
    6218:	10c00054 	ori	r3,r2,1
    621c:	30c00115 	stw	r3,4(r6)
    6220:	3087883a 	add	r3,r6,r2
    6224:	18800015 	stw	r2,0(r3)
    6228:	00c07fc4 	movi	r3,511
    622c:	18801936 	bltu	r3,r2,6294 <_free_r+0x10c>
    6230:	1004d0fa 	srli	r2,r2,3
    6234:	01c00044 	movi	r7,1
    6238:	21400117 	ldw	r5,4(r4)
    623c:	10c00044 	addi	r3,r2,1
    6240:	18c7883a 	add	r3,r3,r3
    6244:	1005d0ba 	srai	r2,r2,2
    6248:	18c7883a 	add	r3,r3,r3
    624c:	18c7883a 	add	r3,r3,r3
    6250:	1907883a 	add	r3,r3,r4
    6254:	3884983a 	sll	r2,r7,r2
    6258:	19c00017 	ldw	r7,0(r3)
    625c:	1a3ffe04 	addi	r8,r3,-8
    6260:	1144b03a 	or	r2,r2,r5
    6264:	32000315 	stw	r8,12(r6)
    6268:	31c00215 	stw	r7,8(r6)
    626c:	20800115 	stw	r2,4(r4)
    6270:	19800015 	stw	r6,0(r3)
    6274:	39800315 	stw	r6,12(r7)
    6278:	8809883a 	mov	r4,r17
    627c:	dfc00217 	ldw	ra,8(sp)
    6280:	dc400117 	ldw	r17,4(sp)
    6284:	dc000017 	ldw	r16,0(sp)
    6288:	dec00304 	addi	sp,sp,12
    628c:	000e5781 	jmpi	e578 <__malloc_unlock>
    6290:	f800283a 	ret
    6294:	100ad27a 	srli	r5,r2,9
    6298:	00c00104 	movi	r3,4
    629c:	19404a36 	bltu	r3,r5,63c8 <_free_r+0x240>
    62a0:	100ad1ba 	srli	r5,r2,6
    62a4:	28c00e44 	addi	r3,r5,57
    62a8:	18c7883a 	add	r3,r3,r3
    62ac:	29400e04 	addi	r5,r5,56
    62b0:	18c7883a 	add	r3,r3,r3
    62b4:	18c7883a 	add	r3,r3,r3
    62b8:	1909883a 	add	r4,r3,r4
    62bc:	20c00017 	ldw	r3,0(r4)
    62c0:	01c00074 	movhi	r7,1
    62c4:	213ffe04 	addi	r4,r4,-8
    62c8:	39c3ca04 	addi	r7,r7,3880
    62cc:	20c04426 	beq	r4,r3,63e0 <_free_r+0x258>
    62d0:	01ffff04 	movi	r7,-4
    62d4:	19400117 	ldw	r5,4(r3)
    62d8:	29ca703a 	and	r5,r5,r7
    62dc:	1140022e 	bgeu	r2,r5,62e8 <_free_r+0x160>
    62e0:	18c00217 	ldw	r3,8(r3)
    62e4:	20fffb1e 	bne	r4,r3,62d4 <__reset+0xfbf062d4>
    62e8:	19000317 	ldw	r4,12(r3)
    62ec:	31000315 	stw	r4,12(r6)
    62f0:	30c00215 	stw	r3,8(r6)
    62f4:	21800215 	stw	r6,8(r4)
    62f8:	19800315 	stw	r6,12(r3)
    62fc:	003fde06 	br	6278 <__reset+0xfbf06278>
    6300:	29c00217 	ldw	r7,8(r5)
    6304:	10c5883a 	add	r2,r2,r3
    6308:	00c00074 	movhi	r3,1
    630c:	18c3cc04 	addi	r3,r3,3888
    6310:	38c03b26 	beq	r7,r3,6400 <_free_r+0x278>
    6314:	2a000317 	ldw	r8,12(r5)
    6318:	11400054 	ori	r5,r2,1
    631c:	3087883a 	add	r3,r6,r2
    6320:	3a000315 	stw	r8,12(r7)
    6324:	41c00215 	stw	r7,8(r8)
    6328:	31400115 	stw	r5,4(r6)
    632c:	18800015 	stw	r2,0(r3)
    6330:	003fbd06 	br	6228 <__reset+0xfbf06228>
    6334:	39c0004c 	andi	r7,r7,1
    6338:	10c5883a 	add	r2,r2,r3
    633c:	3800071e 	bne	r7,zero,635c <_free_r+0x1d4>
    6340:	81fffe17 	ldw	r7,-8(r16)
    6344:	31cdc83a 	sub	r6,r6,r7
    6348:	30c00317 	ldw	r3,12(r6)
    634c:	31400217 	ldw	r5,8(r6)
    6350:	11c5883a 	add	r2,r2,r7
    6354:	28c00315 	stw	r3,12(r5)
    6358:	19400215 	stw	r5,8(r3)
    635c:	10c00054 	ori	r3,r2,1
    6360:	30c00115 	stw	r3,4(r6)
    6364:	00c00074 	movhi	r3,1
    6368:	18c9e804 	addi	r3,r3,10144
    636c:	18c00017 	ldw	r3,0(r3)
    6370:	21800215 	stw	r6,8(r4)
    6374:	10ffc036 	bltu	r2,r3,6278 <__reset+0xfbf06278>
    6378:	00800074 	movhi	r2,1
    637c:	108a0b04 	addi	r2,r2,10284
    6380:	11400017 	ldw	r5,0(r2)
    6384:	8809883a 	mov	r4,r17
    6388:	00060640 	call	6064 <_malloc_trim_r>
    638c:	003fba06 	br	6278 <__reset+0xfbf06278>
    6390:	28c9883a 	add	r4,r5,r3
    6394:	21000117 	ldw	r4,4(r4)
    6398:	2100004c 	andi	r4,r4,1
    639c:	2000391e 	bne	r4,zero,6484 <_free_r+0x2fc>
    63a0:	29c00217 	ldw	r7,8(r5)
    63a4:	29000317 	ldw	r4,12(r5)
    63a8:	1885883a 	add	r2,r3,r2
    63ac:	10c00054 	ori	r3,r2,1
    63b0:	39000315 	stw	r4,12(r7)
    63b4:	21c00215 	stw	r7,8(r4)
    63b8:	30c00115 	stw	r3,4(r6)
    63bc:	308d883a 	add	r6,r6,r2
    63c0:	30800015 	stw	r2,0(r6)
    63c4:	003fac06 	br	6278 <__reset+0xfbf06278>
    63c8:	00c00504 	movi	r3,20
    63cc:	19401536 	bltu	r3,r5,6424 <_free_r+0x29c>
    63d0:	28c01704 	addi	r3,r5,92
    63d4:	18c7883a 	add	r3,r3,r3
    63d8:	294016c4 	addi	r5,r5,91
    63dc:	003fb406 	br	62b0 <__reset+0xfbf062b0>
    63e0:	280bd0ba 	srai	r5,r5,2
    63e4:	00c00044 	movi	r3,1
    63e8:	38800117 	ldw	r2,4(r7)
    63ec:	194a983a 	sll	r5,r3,r5
    63f0:	2007883a 	mov	r3,r4
    63f4:	2884b03a 	or	r2,r5,r2
    63f8:	38800115 	stw	r2,4(r7)
    63fc:	003fbb06 	br	62ec <__reset+0xfbf062ec>
    6400:	21800515 	stw	r6,20(r4)
    6404:	21800415 	stw	r6,16(r4)
    6408:	10c00054 	ori	r3,r2,1
    640c:	31c00315 	stw	r7,12(r6)
    6410:	31c00215 	stw	r7,8(r6)
    6414:	30c00115 	stw	r3,4(r6)
    6418:	308d883a 	add	r6,r6,r2
    641c:	30800015 	stw	r2,0(r6)
    6420:	003f9506 	br	6278 <__reset+0xfbf06278>
    6424:	00c01504 	movi	r3,84
    6428:	19400536 	bltu	r3,r5,6440 <_free_r+0x2b8>
    642c:	100ad33a 	srli	r5,r2,12
    6430:	28c01bc4 	addi	r3,r5,111
    6434:	18c7883a 	add	r3,r3,r3
    6438:	29401b84 	addi	r5,r5,110
    643c:	003f9c06 	br	62b0 <__reset+0xfbf062b0>
    6440:	00c05504 	movi	r3,340
    6444:	19400536 	bltu	r3,r5,645c <_free_r+0x2d4>
    6448:	100ad3fa 	srli	r5,r2,15
    644c:	28c01e04 	addi	r3,r5,120
    6450:	18c7883a 	add	r3,r3,r3
    6454:	29401dc4 	addi	r5,r5,119
    6458:	003f9506 	br	62b0 <__reset+0xfbf062b0>
    645c:	00c15504 	movi	r3,1364
    6460:	19400536 	bltu	r3,r5,6478 <_free_r+0x2f0>
    6464:	100ad4ba 	srli	r5,r2,18
    6468:	28c01f44 	addi	r3,r5,125
    646c:	18c7883a 	add	r3,r3,r3
    6470:	29401f04 	addi	r5,r5,124
    6474:	003f8e06 	br	62b0 <__reset+0xfbf062b0>
    6478:	00c03f84 	movi	r3,254
    647c:	01401f84 	movi	r5,126
    6480:	003f8b06 	br	62b0 <__reset+0xfbf062b0>
    6484:	10c00054 	ori	r3,r2,1
    6488:	30c00115 	stw	r3,4(r6)
    648c:	308d883a 	add	r6,r6,r2
    6490:	30800015 	stw	r2,0(r6)
    6494:	003f7806 	br	6278 <__reset+0xfbf06278>

00006498 <__sfvwrite_r>:
    6498:	30800217 	ldw	r2,8(r6)
    649c:	10006726 	beq	r2,zero,663c <__sfvwrite_r+0x1a4>
    64a0:	28c0030b 	ldhu	r3,12(r5)
    64a4:	defff404 	addi	sp,sp,-48
    64a8:	dd400715 	stw	r21,28(sp)
    64ac:	dd000615 	stw	r20,24(sp)
    64b0:	dc000215 	stw	r16,8(sp)
    64b4:	dfc00b15 	stw	ra,44(sp)
    64b8:	df000a15 	stw	fp,40(sp)
    64bc:	ddc00915 	stw	r23,36(sp)
    64c0:	dd800815 	stw	r22,32(sp)
    64c4:	dcc00515 	stw	r19,20(sp)
    64c8:	dc800415 	stw	r18,16(sp)
    64cc:	dc400315 	stw	r17,12(sp)
    64d0:	1880020c 	andi	r2,r3,8
    64d4:	2821883a 	mov	r16,r5
    64d8:	202b883a 	mov	r21,r4
    64dc:	3029883a 	mov	r20,r6
    64e0:	10002726 	beq	r2,zero,6580 <__sfvwrite_r+0xe8>
    64e4:	28800417 	ldw	r2,16(r5)
    64e8:	10002526 	beq	r2,zero,6580 <__sfvwrite_r+0xe8>
    64ec:	1880008c 	andi	r2,r3,2
    64f0:	a4400017 	ldw	r17,0(r20)
    64f4:	10002a26 	beq	r2,zero,65a0 <__sfvwrite_r+0x108>
    64f8:	05a00034 	movhi	r22,32768
    64fc:	0027883a 	mov	r19,zero
    6500:	0025883a 	mov	r18,zero
    6504:	b5bf0004 	addi	r22,r22,-1024
    6508:	980d883a 	mov	r6,r19
    650c:	a809883a 	mov	r4,r21
    6510:	90004626 	beq	r18,zero,662c <__sfvwrite_r+0x194>
    6514:	900f883a 	mov	r7,r18
    6518:	b480022e 	bgeu	r22,r18,6524 <__sfvwrite_r+0x8c>
    651c:	01e00034 	movhi	r7,32768
    6520:	39ff0004 	addi	r7,r7,-1024
    6524:	80800917 	ldw	r2,36(r16)
    6528:	81400717 	ldw	r5,28(r16)
    652c:	103ee83a 	callr	r2
    6530:	0080570e 	bge	zero,r2,6690 <__sfvwrite_r+0x1f8>
    6534:	a0c00217 	ldw	r3,8(r20)
    6538:	98a7883a 	add	r19,r19,r2
    653c:	90a5c83a 	sub	r18,r18,r2
    6540:	1885c83a 	sub	r2,r3,r2
    6544:	a0800215 	stw	r2,8(r20)
    6548:	103fef1e 	bne	r2,zero,6508 <__reset+0xfbf06508>
    654c:	0005883a 	mov	r2,zero
    6550:	dfc00b17 	ldw	ra,44(sp)
    6554:	df000a17 	ldw	fp,40(sp)
    6558:	ddc00917 	ldw	r23,36(sp)
    655c:	dd800817 	ldw	r22,32(sp)
    6560:	dd400717 	ldw	r21,28(sp)
    6564:	dd000617 	ldw	r20,24(sp)
    6568:	dcc00517 	ldw	r19,20(sp)
    656c:	dc800417 	ldw	r18,16(sp)
    6570:	dc400317 	ldw	r17,12(sp)
    6574:	dc000217 	ldw	r16,8(sp)
    6578:	dec00c04 	addi	sp,sp,48
    657c:	f800283a 	ret
    6580:	800b883a 	mov	r5,r16
    6584:	a809883a 	mov	r4,r21
    6588:	00040400 	call	4040 <__swsetup_r>
    658c:	1000eb1e 	bne	r2,zero,693c <__sfvwrite_r+0x4a4>
    6590:	80c0030b 	ldhu	r3,12(r16)
    6594:	a4400017 	ldw	r17,0(r20)
    6598:	1880008c 	andi	r2,r3,2
    659c:	103fd61e 	bne	r2,zero,64f8 <__reset+0xfbf064f8>
    65a0:	1880004c 	andi	r2,r3,1
    65a4:	10003f1e 	bne	r2,zero,66a4 <__sfvwrite_r+0x20c>
    65a8:	0039883a 	mov	fp,zero
    65ac:	0025883a 	mov	r18,zero
    65b0:	90001a26 	beq	r18,zero,661c <__sfvwrite_r+0x184>
    65b4:	1880800c 	andi	r2,r3,512
    65b8:	84c00217 	ldw	r19,8(r16)
    65bc:	10002126 	beq	r2,zero,6644 <__sfvwrite_r+0x1ac>
    65c0:	982f883a 	mov	r23,r19
    65c4:	94c09336 	bltu	r18,r19,6814 <__sfvwrite_r+0x37c>
    65c8:	1881200c 	andi	r2,r3,1152
    65cc:	10009e1e 	bne	r2,zero,6848 <__sfvwrite_r+0x3b0>
    65d0:	81000017 	ldw	r4,0(r16)
    65d4:	b80d883a 	mov	r6,r23
    65d8:	e00b883a 	mov	r5,fp
    65dc:	00077ac0 	call	77ac <memmove>
    65e0:	80c00217 	ldw	r3,8(r16)
    65e4:	81000017 	ldw	r4,0(r16)
    65e8:	9005883a 	mov	r2,r18
    65ec:	1ce7c83a 	sub	r19,r3,r19
    65f0:	25cf883a 	add	r7,r4,r23
    65f4:	84c00215 	stw	r19,8(r16)
    65f8:	81c00015 	stw	r7,0(r16)
    65fc:	a0c00217 	ldw	r3,8(r20)
    6600:	e0b9883a 	add	fp,fp,r2
    6604:	90a5c83a 	sub	r18,r18,r2
    6608:	18a7c83a 	sub	r19,r3,r2
    660c:	a4c00215 	stw	r19,8(r20)
    6610:	983fce26 	beq	r19,zero,654c <__reset+0xfbf0654c>
    6614:	80c0030b 	ldhu	r3,12(r16)
    6618:	903fe61e 	bne	r18,zero,65b4 <__reset+0xfbf065b4>
    661c:	8f000017 	ldw	fp,0(r17)
    6620:	8c800117 	ldw	r18,4(r17)
    6624:	8c400204 	addi	r17,r17,8
    6628:	003fe106 	br	65b0 <__reset+0xfbf065b0>
    662c:	8cc00017 	ldw	r19,0(r17)
    6630:	8c800117 	ldw	r18,4(r17)
    6634:	8c400204 	addi	r17,r17,8
    6638:	003fb306 	br	6508 <__reset+0xfbf06508>
    663c:	0005883a 	mov	r2,zero
    6640:	f800283a 	ret
    6644:	81000017 	ldw	r4,0(r16)
    6648:	80800417 	ldw	r2,16(r16)
    664c:	11005736 	bltu	r2,r4,67ac <__sfvwrite_r+0x314>
    6650:	85c00517 	ldw	r23,20(r16)
    6654:	95c05536 	bltu	r18,r23,67ac <__sfvwrite_r+0x314>
    6658:	00a00034 	movhi	r2,32768
    665c:	10bfffc4 	addi	r2,r2,-1
    6660:	9009883a 	mov	r4,r18
    6664:	1480012e 	bgeu	r2,r18,666c <__sfvwrite_r+0x1d4>
    6668:	1009883a 	mov	r4,r2
    666c:	b80b883a 	mov	r5,r23
    6670:	000bb740 	call	bb74 <__divsi3>
    6674:	15cf383a 	mul	r7,r2,r23
    6678:	81400717 	ldw	r5,28(r16)
    667c:	80800917 	ldw	r2,36(r16)
    6680:	e00d883a 	mov	r6,fp
    6684:	a809883a 	mov	r4,r21
    6688:	103ee83a 	callr	r2
    668c:	00bfdb16 	blt	zero,r2,65fc <__reset+0xfbf065fc>
    6690:	8080030b 	ldhu	r2,12(r16)
    6694:	10801014 	ori	r2,r2,64
    6698:	8080030d 	sth	r2,12(r16)
    669c:	00bfffc4 	movi	r2,-1
    66a0:	003fab06 	br	6550 <__reset+0xfbf06550>
    66a4:	0027883a 	mov	r19,zero
    66a8:	0011883a 	mov	r8,zero
    66ac:	0039883a 	mov	fp,zero
    66b0:	0025883a 	mov	r18,zero
    66b4:	90001f26 	beq	r18,zero,6734 <__sfvwrite_r+0x29c>
    66b8:	40005a26 	beq	r8,zero,6824 <__sfvwrite_r+0x38c>
    66bc:	982d883a 	mov	r22,r19
    66c0:	94c0012e 	bgeu	r18,r19,66c8 <__sfvwrite_r+0x230>
    66c4:	902d883a 	mov	r22,r18
    66c8:	81000017 	ldw	r4,0(r16)
    66cc:	80800417 	ldw	r2,16(r16)
    66d0:	b02f883a 	mov	r23,r22
    66d4:	81c00517 	ldw	r7,20(r16)
    66d8:	1100032e 	bgeu	r2,r4,66e8 <__sfvwrite_r+0x250>
    66dc:	80c00217 	ldw	r3,8(r16)
    66e0:	38c7883a 	add	r3,r7,r3
    66e4:	1d801816 	blt	r3,r22,6748 <__sfvwrite_r+0x2b0>
    66e8:	b1c03e16 	blt	r22,r7,67e4 <__sfvwrite_r+0x34c>
    66ec:	80800917 	ldw	r2,36(r16)
    66f0:	81400717 	ldw	r5,28(r16)
    66f4:	e00d883a 	mov	r6,fp
    66f8:	da000115 	stw	r8,4(sp)
    66fc:	a809883a 	mov	r4,r21
    6700:	103ee83a 	callr	r2
    6704:	102f883a 	mov	r23,r2
    6708:	da000117 	ldw	r8,4(sp)
    670c:	00bfe00e 	bge	zero,r2,6690 <__reset+0xfbf06690>
    6710:	9de7c83a 	sub	r19,r19,r23
    6714:	98001f26 	beq	r19,zero,6794 <__sfvwrite_r+0x2fc>
    6718:	a0800217 	ldw	r2,8(r20)
    671c:	e5f9883a 	add	fp,fp,r23
    6720:	95e5c83a 	sub	r18,r18,r23
    6724:	15efc83a 	sub	r23,r2,r23
    6728:	a5c00215 	stw	r23,8(r20)
    672c:	b83f8726 	beq	r23,zero,654c <__reset+0xfbf0654c>
    6730:	903fe11e 	bne	r18,zero,66b8 <__reset+0xfbf066b8>
    6734:	8f000017 	ldw	fp,0(r17)
    6738:	8c800117 	ldw	r18,4(r17)
    673c:	0011883a 	mov	r8,zero
    6740:	8c400204 	addi	r17,r17,8
    6744:	003fdb06 	br	66b4 <__reset+0xfbf066b4>
    6748:	180d883a 	mov	r6,r3
    674c:	e00b883a 	mov	r5,fp
    6750:	da000115 	stw	r8,4(sp)
    6754:	d8c00015 	stw	r3,0(sp)
    6758:	00077ac0 	call	77ac <memmove>
    675c:	d8c00017 	ldw	r3,0(sp)
    6760:	80800017 	ldw	r2,0(r16)
    6764:	800b883a 	mov	r5,r16
    6768:	a809883a 	mov	r4,r21
    676c:	10c5883a 	add	r2,r2,r3
    6770:	80800015 	stw	r2,0(r16)
    6774:	d8c00015 	stw	r3,0(sp)
    6778:	0005c380 	call	5c38 <_fflush_r>
    677c:	d8c00017 	ldw	r3,0(sp)
    6780:	da000117 	ldw	r8,4(sp)
    6784:	103fc21e 	bne	r2,zero,6690 <__reset+0xfbf06690>
    6788:	182f883a 	mov	r23,r3
    678c:	9de7c83a 	sub	r19,r19,r23
    6790:	983fe11e 	bne	r19,zero,6718 <__reset+0xfbf06718>
    6794:	800b883a 	mov	r5,r16
    6798:	a809883a 	mov	r4,r21
    679c:	0005c380 	call	5c38 <_fflush_r>
    67a0:	103fbb1e 	bne	r2,zero,6690 <__reset+0xfbf06690>
    67a4:	0011883a 	mov	r8,zero
    67a8:	003fdb06 	br	6718 <__reset+0xfbf06718>
    67ac:	94c0012e 	bgeu	r18,r19,67b4 <__sfvwrite_r+0x31c>
    67b0:	9027883a 	mov	r19,r18
    67b4:	980d883a 	mov	r6,r19
    67b8:	e00b883a 	mov	r5,fp
    67bc:	00077ac0 	call	77ac <memmove>
    67c0:	80800217 	ldw	r2,8(r16)
    67c4:	80c00017 	ldw	r3,0(r16)
    67c8:	14c5c83a 	sub	r2,r2,r19
    67cc:	1cc7883a 	add	r3,r3,r19
    67d0:	80800215 	stw	r2,8(r16)
    67d4:	80c00015 	stw	r3,0(r16)
    67d8:	10004326 	beq	r2,zero,68e8 <__sfvwrite_r+0x450>
    67dc:	9805883a 	mov	r2,r19
    67e0:	003f8606 	br	65fc <__reset+0xfbf065fc>
    67e4:	b00d883a 	mov	r6,r22
    67e8:	e00b883a 	mov	r5,fp
    67ec:	da000115 	stw	r8,4(sp)
    67f0:	00077ac0 	call	77ac <memmove>
    67f4:	80800217 	ldw	r2,8(r16)
    67f8:	80c00017 	ldw	r3,0(r16)
    67fc:	da000117 	ldw	r8,4(sp)
    6800:	1585c83a 	sub	r2,r2,r22
    6804:	1dad883a 	add	r22,r3,r22
    6808:	80800215 	stw	r2,8(r16)
    680c:	85800015 	stw	r22,0(r16)
    6810:	003fbf06 	br	6710 <__reset+0xfbf06710>
    6814:	81000017 	ldw	r4,0(r16)
    6818:	9027883a 	mov	r19,r18
    681c:	902f883a 	mov	r23,r18
    6820:	003f6c06 	br	65d4 <__reset+0xfbf065d4>
    6824:	900d883a 	mov	r6,r18
    6828:	01400284 	movi	r5,10
    682c:	e009883a 	mov	r4,fp
    6830:	00075800 	call	7580 <memchr>
    6834:	10003e26 	beq	r2,zero,6930 <__sfvwrite_r+0x498>
    6838:	10800044 	addi	r2,r2,1
    683c:	1727c83a 	sub	r19,r2,fp
    6840:	02000044 	movi	r8,1
    6844:	003f9d06 	br	66bc <__reset+0xfbf066bc>
    6848:	80800517 	ldw	r2,20(r16)
    684c:	81400417 	ldw	r5,16(r16)
    6850:	81c00017 	ldw	r7,0(r16)
    6854:	10a7883a 	add	r19,r2,r2
    6858:	9885883a 	add	r2,r19,r2
    685c:	1026d7fa 	srli	r19,r2,31
    6860:	396dc83a 	sub	r22,r7,r5
    6864:	b1000044 	addi	r4,r22,1
    6868:	9885883a 	add	r2,r19,r2
    686c:	1027d07a 	srai	r19,r2,1
    6870:	2485883a 	add	r2,r4,r18
    6874:	980d883a 	mov	r6,r19
    6878:	9880022e 	bgeu	r19,r2,6884 <__sfvwrite_r+0x3ec>
    687c:	1027883a 	mov	r19,r2
    6880:	100d883a 	mov	r6,r2
    6884:	18c1000c 	andi	r3,r3,1024
    6888:	18001c26 	beq	r3,zero,68fc <__sfvwrite_r+0x464>
    688c:	300b883a 	mov	r5,r6
    6890:	a809883a 	mov	r4,r21
    6894:	0006d740 	call	6d74 <_malloc_r>
    6898:	102f883a 	mov	r23,r2
    689c:	10002926 	beq	r2,zero,6944 <__sfvwrite_r+0x4ac>
    68a0:	81400417 	ldw	r5,16(r16)
    68a4:	b00d883a 	mov	r6,r22
    68a8:	1009883a 	mov	r4,r2
    68ac:	00076640 	call	7664 <memcpy>
    68b0:	8080030b 	ldhu	r2,12(r16)
    68b4:	00fedfc4 	movi	r3,-1153
    68b8:	10c4703a 	and	r2,r2,r3
    68bc:	10802014 	ori	r2,r2,128
    68c0:	8080030d 	sth	r2,12(r16)
    68c4:	bd89883a 	add	r4,r23,r22
    68c8:	9d8fc83a 	sub	r7,r19,r22
    68cc:	85c00415 	stw	r23,16(r16)
    68d0:	84c00515 	stw	r19,20(r16)
    68d4:	81000015 	stw	r4,0(r16)
    68d8:	9027883a 	mov	r19,r18
    68dc:	81c00215 	stw	r7,8(r16)
    68e0:	902f883a 	mov	r23,r18
    68e4:	003f3b06 	br	65d4 <__reset+0xfbf065d4>
    68e8:	800b883a 	mov	r5,r16
    68ec:	a809883a 	mov	r4,r21
    68f0:	0005c380 	call	5c38 <_fflush_r>
    68f4:	103fb926 	beq	r2,zero,67dc <__reset+0xfbf067dc>
    68f8:	003f6506 	br	6690 <__reset+0xfbf06690>
    68fc:	a809883a 	mov	r4,r21
    6900:	00089040 	call	8904 <_realloc_r>
    6904:	102f883a 	mov	r23,r2
    6908:	103fee1e 	bne	r2,zero,68c4 <__reset+0xfbf068c4>
    690c:	81400417 	ldw	r5,16(r16)
    6910:	a809883a 	mov	r4,r21
    6914:	00061880 	call	6188 <_free_r>
    6918:	8080030b 	ldhu	r2,12(r16)
    691c:	00ffdfc4 	movi	r3,-129
    6920:	1884703a 	and	r2,r3,r2
    6924:	00c00304 	movi	r3,12
    6928:	a8c00015 	stw	r3,0(r21)
    692c:	003f5906 	br	6694 <__reset+0xfbf06694>
    6930:	94c00044 	addi	r19,r18,1
    6934:	02000044 	movi	r8,1
    6938:	003f6006 	br	66bc <__reset+0xfbf066bc>
    693c:	00bfffc4 	movi	r2,-1
    6940:	003f0306 	br	6550 <__reset+0xfbf06550>
    6944:	00800304 	movi	r2,12
    6948:	a8800015 	stw	r2,0(r21)
    694c:	8080030b 	ldhu	r2,12(r16)
    6950:	003f5006 	br	6694 <__reset+0xfbf06694>

00006954 <_fwalk>:
    6954:	defff704 	addi	sp,sp,-36
    6958:	dd000415 	stw	r20,16(sp)
    695c:	dfc00815 	stw	ra,32(sp)
    6960:	ddc00715 	stw	r23,28(sp)
    6964:	dd800615 	stw	r22,24(sp)
    6968:	dd400515 	stw	r21,20(sp)
    696c:	dcc00315 	stw	r19,12(sp)
    6970:	dc800215 	stw	r18,8(sp)
    6974:	dc400115 	stw	r17,4(sp)
    6978:	dc000015 	stw	r16,0(sp)
    697c:	2500b804 	addi	r20,r4,736
    6980:	a0002326 	beq	r20,zero,6a10 <_fwalk+0xbc>
    6984:	282b883a 	mov	r21,r5
    6988:	002f883a 	mov	r23,zero
    698c:	05800044 	movi	r22,1
    6990:	04ffffc4 	movi	r19,-1
    6994:	a4400117 	ldw	r17,4(r20)
    6998:	a4800217 	ldw	r18,8(r20)
    699c:	8c7fffc4 	addi	r17,r17,-1
    69a0:	88000d16 	blt	r17,zero,69d8 <_fwalk+0x84>
    69a4:	94000304 	addi	r16,r18,12
    69a8:	94800384 	addi	r18,r18,14
    69ac:	8080000b 	ldhu	r2,0(r16)
    69b0:	8c7fffc4 	addi	r17,r17,-1
    69b4:	813ffd04 	addi	r4,r16,-12
    69b8:	b080042e 	bgeu	r22,r2,69cc <_fwalk+0x78>
    69bc:	9080000f 	ldh	r2,0(r18)
    69c0:	14c00226 	beq	r2,r19,69cc <_fwalk+0x78>
    69c4:	a83ee83a 	callr	r21
    69c8:	b8aeb03a 	or	r23,r23,r2
    69cc:	84001a04 	addi	r16,r16,104
    69d0:	94801a04 	addi	r18,r18,104
    69d4:	8cfff51e 	bne	r17,r19,69ac <__reset+0xfbf069ac>
    69d8:	a5000017 	ldw	r20,0(r20)
    69dc:	a03fed1e 	bne	r20,zero,6994 <__reset+0xfbf06994>
    69e0:	b805883a 	mov	r2,r23
    69e4:	dfc00817 	ldw	ra,32(sp)
    69e8:	ddc00717 	ldw	r23,28(sp)
    69ec:	dd800617 	ldw	r22,24(sp)
    69f0:	dd400517 	ldw	r21,20(sp)
    69f4:	dd000417 	ldw	r20,16(sp)
    69f8:	dcc00317 	ldw	r19,12(sp)
    69fc:	dc800217 	ldw	r18,8(sp)
    6a00:	dc400117 	ldw	r17,4(sp)
    6a04:	dc000017 	ldw	r16,0(sp)
    6a08:	dec00904 	addi	sp,sp,36
    6a0c:	f800283a 	ret
    6a10:	002f883a 	mov	r23,zero
    6a14:	003ff206 	br	69e0 <__reset+0xfbf069e0>

00006a18 <_fwalk_reent>:
    6a18:	defff704 	addi	sp,sp,-36
    6a1c:	dd000415 	stw	r20,16(sp)
    6a20:	dfc00815 	stw	ra,32(sp)
    6a24:	ddc00715 	stw	r23,28(sp)
    6a28:	dd800615 	stw	r22,24(sp)
    6a2c:	dd400515 	stw	r21,20(sp)
    6a30:	dcc00315 	stw	r19,12(sp)
    6a34:	dc800215 	stw	r18,8(sp)
    6a38:	dc400115 	stw	r17,4(sp)
    6a3c:	dc000015 	stw	r16,0(sp)
    6a40:	2500b804 	addi	r20,r4,736
    6a44:	a0002326 	beq	r20,zero,6ad4 <_fwalk_reent+0xbc>
    6a48:	282b883a 	mov	r21,r5
    6a4c:	2027883a 	mov	r19,r4
    6a50:	002f883a 	mov	r23,zero
    6a54:	05800044 	movi	r22,1
    6a58:	04bfffc4 	movi	r18,-1
    6a5c:	a4400117 	ldw	r17,4(r20)
    6a60:	a4000217 	ldw	r16,8(r20)
    6a64:	8c7fffc4 	addi	r17,r17,-1
    6a68:	88000c16 	blt	r17,zero,6a9c <_fwalk_reent+0x84>
    6a6c:	84000304 	addi	r16,r16,12
    6a70:	8080000b 	ldhu	r2,0(r16)
    6a74:	8c7fffc4 	addi	r17,r17,-1
    6a78:	817ffd04 	addi	r5,r16,-12
    6a7c:	b080052e 	bgeu	r22,r2,6a94 <_fwalk_reent+0x7c>
    6a80:	8080008f 	ldh	r2,2(r16)
    6a84:	9809883a 	mov	r4,r19
    6a88:	14800226 	beq	r2,r18,6a94 <_fwalk_reent+0x7c>
    6a8c:	a83ee83a 	callr	r21
    6a90:	b8aeb03a 	or	r23,r23,r2
    6a94:	84001a04 	addi	r16,r16,104
    6a98:	8cbff51e 	bne	r17,r18,6a70 <__reset+0xfbf06a70>
    6a9c:	a5000017 	ldw	r20,0(r20)
    6aa0:	a03fee1e 	bne	r20,zero,6a5c <__reset+0xfbf06a5c>
    6aa4:	b805883a 	mov	r2,r23
    6aa8:	dfc00817 	ldw	ra,32(sp)
    6aac:	ddc00717 	ldw	r23,28(sp)
    6ab0:	dd800617 	ldw	r22,24(sp)
    6ab4:	dd400517 	ldw	r21,20(sp)
    6ab8:	dd000417 	ldw	r20,16(sp)
    6abc:	dcc00317 	ldw	r19,12(sp)
    6ac0:	dc800217 	ldw	r18,8(sp)
    6ac4:	dc400117 	ldw	r17,4(sp)
    6ac8:	dc000017 	ldw	r16,0(sp)
    6acc:	dec00904 	addi	sp,sp,36
    6ad0:	f800283a 	ret
    6ad4:	002f883a 	mov	r23,zero
    6ad8:	003ff206 	br	6aa4 <__reset+0xfbf06aa4>

00006adc <_setlocale_r>:
    6adc:	30001b26 	beq	r6,zero,6b4c <_setlocale_r+0x70>
    6ae0:	01400074 	movhi	r5,1
    6ae4:	defffe04 	addi	sp,sp,-8
    6ae8:	29415404 	addi	r5,r5,1360
    6aec:	3009883a 	mov	r4,r6
    6af0:	dc000015 	stw	r16,0(sp)
    6af4:	dfc00115 	stw	ra,4(sp)
    6af8:	3021883a 	mov	r16,r6
    6afc:	000906c0 	call	906c <strcmp>
    6b00:	1000061e 	bne	r2,zero,6b1c <_setlocale_r+0x40>
    6b04:	00800074 	movhi	r2,1
    6b08:	10815304 	addi	r2,r2,1356
    6b0c:	dfc00117 	ldw	ra,4(sp)
    6b10:	dc000017 	ldw	r16,0(sp)
    6b14:	dec00204 	addi	sp,sp,8
    6b18:	f800283a 	ret
    6b1c:	01400074 	movhi	r5,1
    6b20:	29415304 	addi	r5,r5,1356
    6b24:	8009883a 	mov	r4,r16
    6b28:	000906c0 	call	906c <strcmp>
    6b2c:	103ff526 	beq	r2,zero,6b04 <__reset+0xfbf06b04>
    6b30:	01400074 	movhi	r5,1
    6b34:	29413e04 	addi	r5,r5,1272
    6b38:	8009883a 	mov	r4,r16
    6b3c:	000906c0 	call	906c <strcmp>
    6b40:	103ff026 	beq	r2,zero,6b04 <__reset+0xfbf06b04>
    6b44:	0005883a 	mov	r2,zero
    6b48:	003ff006 	br	6b0c <__reset+0xfbf06b0c>
    6b4c:	00800074 	movhi	r2,1
    6b50:	10815304 	addi	r2,r2,1356
    6b54:	f800283a 	ret

00006b58 <__locale_charset>:
    6b58:	00800074 	movhi	r2,1
    6b5c:	1083b404 	addi	r2,r2,3792
    6b60:	f800283a 	ret

00006b64 <__locale_mb_cur_max>:
    6b64:	00800074 	movhi	r2,1
    6b68:	1089e604 	addi	r2,r2,10136
    6b6c:	10800017 	ldw	r2,0(r2)
    6b70:	f800283a 	ret

00006b74 <__locale_msgcharset>:
    6b74:	00800074 	movhi	r2,1
    6b78:	1083ac04 	addi	r2,r2,3760
    6b7c:	f800283a 	ret

00006b80 <__locale_cjk_lang>:
    6b80:	0005883a 	mov	r2,zero
    6b84:	f800283a 	ret

00006b88 <_localeconv_r>:
    6b88:	00800074 	movhi	r2,1
    6b8c:	1083bc04 	addi	r2,r2,3824
    6b90:	f800283a 	ret

00006b94 <setlocale>:
    6b94:	00800074 	movhi	r2,1
    6b98:	1089e504 	addi	r2,r2,10132
    6b9c:	280d883a 	mov	r6,r5
    6ba0:	200b883a 	mov	r5,r4
    6ba4:	11000017 	ldw	r4,0(r2)
    6ba8:	0006adc1 	jmpi	6adc <_setlocale_r>

00006bac <localeconv>:
    6bac:	00800074 	movhi	r2,1
    6bb0:	1083bc04 	addi	r2,r2,3824
    6bb4:	f800283a 	ret

00006bb8 <__smakebuf_r>:
    6bb8:	2880030b 	ldhu	r2,12(r5)
    6bbc:	10c0008c 	andi	r3,r2,2
    6bc0:	1800411e 	bne	r3,zero,6cc8 <__smakebuf_r+0x110>
    6bc4:	deffec04 	addi	sp,sp,-80
    6bc8:	dc000f15 	stw	r16,60(sp)
    6bcc:	2821883a 	mov	r16,r5
    6bd0:	2940038f 	ldh	r5,14(r5)
    6bd4:	dc401015 	stw	r17,64(sp)
    6bd8:	dfc01315 	stw	ra,76(sp)
    6bdc:	dcc01215 	stw	r19,72(sp)
    6be0:	dc801115 	stw	r18,68(sp)
    6be4:	2023883a 	mov	r17,r4
    6be8:	28001c16 	blt	r5,zero,6c5c <__smakebuf_r+0xa4>
    6bec:	d80d883a 	mov	r6,sp
    6bf0:	000ac140 	call	ac14 <_fstat_r>
    6bf4:	10001816 	blt	r2,zero,6c58 <__smakebuf_r+0xa0>
    6bf8:	d8800117 	ldw	r2,4(sp)
    6bfc:	00e00014 	movui	r3,32768
    6c00:	10bc000c 	andi	r2,r2,61440
    6c04:	14c80020 	cmpeqi	r19,r2,8192
    6c08:	10c03726 	beq	r2,r3,6ce8 <__smakebuf_r+0x130>
    6c0c:	80c0030b 	ldhu	r3,12(r16)
    6c10:	18c20014 	ori	r3,r3,2048
    6c14:	80c0030d 	sth	r3,12(r16)
    6c18:	00c80004 	movi	r3,8192
    6c1c:	10c0521e 	bne	r2,r3,6d68 <__smakebuf_r+0x1b0>
    6c20:	8140038f 	ldh	r5,14(r16)
    6c24:	8809883a 	mov	r4,r17
    6c28:	000ac700 	call	ac70 <_isatty_r>
    6c2c:	10004c26 	beq	r2,zero,6d60 <__smakebuf_r+0x1a8>
    6c30:	8080030b 	ldhu	r2,12(r16)
    6c34:	80c010c4 	addi	r3,r16,67
    6c38:	80c00015 	stw	r3,0(r16)
    6c3c:	10800054 	ori	r2,r2,1
    6c40:	8080030d 	sth	r2,12(r16)
    6c44:	00800044 	movi	r2,1
    6c48:	80c00415 	stw	r3,16(r16)
    6c4c:	80800515 	stw	r2,20(r16)
    6c50:	04810004 	movi	r18,1024
    6c54:	00000706 	br	6c74 <__smakebuf_r+0xbc>
    6c58:	8080030b 	ldhu	r2,12(r16)
    6c5c:	10c0200c 	andi	r3,r2,128
    6c60:	18001f1e 	bne	r3,zero,6ce0 <__smakebuf_r+0x128>
    6c64:	04810004 	movi	r18,1024
    6c68:	10820014 	ori	r2,r2,2048
    6c6c:	8080030d 	sth	r2,12(r16)
    6c70:	0027883a 	mov	r19,zero
    6c74:	900b883a 	mov	r5,r18
    6c78:	8809883a 	mov	r4,r17
    6c7c:	0006d740 	call	6d74 <_malloc_r>
    6c80:	10002c26 	beq	r2,zero,6d34 <__smakebuf_r+0x17c>
    6c84:	80c0030b 	ldhu	r3,12(r16)
    6c88:	01000034 	movhi	r4,0
    6c8c:	21173304 	addi	r4,r4,23756
    6c90:	89000f15 	stw	r4,60(r17)
    6c94:	18c02014 	ori	r3,r3,128
    6c98:	80c0030d 	sth	r3,12(r16)
    6c9c:	80800015 	stw	r2,0(r16)
    6ca0:	80800415 	stw	r2,16(r16)
    6ca4:	84800515 	stw	r18,20(r16)
    6ca8:	98001a1e 	bne	r19,zero,6d14 <__smakebuf_r+0x15c>
    6cac:	dfc01317 	ldw	ra,76(sp)
    6cb0:	dcc01217 	ldw	r19,72(sp)
    6cb4:	dc801117 	ldw	r18,68(sp)
    6cb8:	dc401017 	ldw	r17,64(sp)
    6cbc:	dc000f17 	ldw	r16,60(sp)
    6cc0:	dec01404 	addi	sp,sp,80
    6cc4:	f800283a 	ret
    6cc8:	288010c4 	addi	r2,r5,67
    6ccc:	28800015 	stw	r2,0(r5)
    6cd0:	28800415 	stw	r2,16(r5)
    6cd4:	00800044 	movi	r2,1
    6cd8:	28800515 	stw	r2,20(r5)
    6cdc:	f800283a 	ret
    6ce0:	04801004 	movi	r18,64
    6ce4:	003fe006 	br	6c68 <__reset+0xfbf06c68>
    6ce8:	81000a17 	ldw	r4,40(r16)
    6cec:	00c00074 	movhi	r3,1
    6cf0:	18e40204 	addi	r3,r3,-28664
    6cf4:	20ffc51e 	bne	r4,r3,6c0c <__reset+0xfbf06c0c>
    6cf8:	8080030b 	ldhu	r2,12(r16)
    6cfc:	04810004 	movi	r18,1024
    6d00:	84801315 	stw	r18,76(r16)
    6d04:	1484b03a 	or	r2,r2,r18
    6d08:	8080030d 	sth	r2,12(r16)
    6d0c:	0027883a 	mov	r19,zero
    6d10:	003fd806 	br	6c74 <__reset+0xfbf06c74>
    6d14:	8140038f 	ldh	r5,14(r16)
    6d18:	8809883a 	mov	r4,r17
    6d1c:	000ac700 	call	ac70 <_isatty_r>
    6d20:	103fe226 	beq	r2,zero,6cac <__reset+0xfbf06cac>
    6d24:	8080030b 	ldhu	r2,12(r16)
    6d28:	10800054 	ori	r2,r2,1
    6d2c:	8080030d 	sth	r2,12(r16)
    6d30:	003fde06 	br	6cac <__reset+0xfbf06cac>
    6d34:	8080030b 	ldhu	r2,12(r16)
    6d38:	10c0800c 	andi	r3,r2,512
    6d3c:	183fdb1e 	bne	r3,zero,6cac <__reset+0xfbf06cac>
    6d40:	10800094 	ori	r2,r2,2
    6d44:	80c010c4 	addi	r3,r16,67
    6d48:	8080030d 	sth	r2,12(r16)
    6d4c:	00800044 	movi	r2,1
    6d50:	80c00015 	stw	r3,0(r16)
    6d54:	80c00415 	stw	r3,16(r16)
    6d58:	80800515 	stw	r2,20(r16)
    6d5c:	003fd306 	br	6cac <__reset+0xfbf06cac>
    6d60:	04810004 	movi	r18,1024
    6d64:	003fc306 	br	6c74 <__reset+0xfbf06c74>
    6d68:	0027883a 	mov	r19,zero
    6d6c:	04810004 	movi	r18,1024
    6d70:	003fc006 	br	6c74 <__reset+0xfbf06c74>

00006d74 <_malloc_r>:
    6d74:	defff504 	addi	sp,sp,-44
    6d78:	dc800315 	stw	r18,12(sp)
    6d7c:	dfc00a15 	stw	ra,40(sp)
    6d80:	df000915 	stw	fp,36(sp)
    6d84:	ddc00815 	stw	r23,32(sp)
    6d88:	dd800715 	stw	r22,28(sp)
    6d8c:	dd400615 	stw	r21,24(sp)
    6d90:	dd000515 	stw	r20,20(sp)
    6d94:	dcc00415 	stw	r19,16(sp)
    6d98:	dc400215 	stw	r17,8(sp)
    6d9c:	dc000115 	stw	r16,4(sp)
    6da0:	288002c4 	addi	r2,r5,11
    6da4:	00c00584 	movi	r3,22
    6da8:	2025883a 	mov	r18,r4
    6dac:	18807f2e 	bgeu	r3,r2,6fac <_malloc_r+0x238>
    6db0:	047ffe04 	movi	r17,-8
    6db4:	1462703a 	and	r17,r2,r17
    6db8:	8800a316 	blt	r17,zero,7048 <_malloc_r+0x2d4>
    6dbc:	8940a236 	bltu	r17,r5,7048 <_malloc_r+0x2d4>
    6dc0:	000e5740 	call	e574 <__malloc_lock>
    6dc4:	00807dc4 	movi	r2,503
    6dc8:	1441e92e 	bgeu	r2,r17,7570 <_malloc_r+0x7fc>
    6dcc:	8804d27a 	srli	r2,r17,9
    6dd0:	1000a126 	beq	r2,zero,7058 <_malloc_r+0x2e4>
    6dd4:	00c00104 	movi	r3,4
    6dd8:	18811e36 	bltu	r3,r2,7254 <_malloc_r+0x4e0>
    6ddc:	8804d1ba 	srli	r2,r17,6
    6de0:	12000e44 	addi	r8,r2,57
    6de4:	11c00e04 	addi	r7,r2,56
    6de8:	4209883a 	add	r4,r8,r8
    6dec:	04c00074 	movhi	r19,1
    6df0:	2109883a 	add	r4,r4,r4
    6df4:	9cc3ca04 	addi	r19,r19,3880
    6df8:	2109883a 	add	r4,r4,r4
    6dfc:	9909883a 	add	r4,r19,r4
    6e00:	24000117 	ldw	r16,4(r4)
    6e04:	213ffe04 	addi	r4,r4,-8
    6e08:	24009726 	beq	r4,r16,7068 <_malloc_r+0x2f4>
    6e0c:	80800117 	ldw	r2,4(r16)
    6e10:	01bfff04 	movi	r6,-4
    6e14:	014003c4 	movi	r5,15
    6e18:	1184703a 	and	r2,r2,r6
    6e1c:	1447c83a 	sub	r3,r2,r17
    6e20:	28c00716 	blt	r5,r3,6e40 <_malloc_r+0xcc>
    6e24:	1800920e 	bge	r3,zero,7070 <_malloc_r+0x2fc>
    6e28:	84000317 	ldw	r16,12(r16)
    6e2c:	24008e26 	beq	r4,r16,7068 <_malloc_r+0x2f4>
    6e30:	80800117 	ldw	r2,4(r16)
    6e34:	1184703a 	and	r2,r2,r6
    6e38:	1447c83a 	sub	r3,r2,r17
    6e3c:	28fff90e 	bge	r5,r3,6e24 <__reset+0xfbf06e24>
    6e40:	3809883a 	mov	r4,r7
    6e44:	01800074 	movhi	r6,1
    6e48:	9c000417 	ldw	r16,16(r19)
    6e4c:	3183ca04 	addi	r6,r6,3880
    6e50:	32000204 	addi	r8,r6,8
    6e54:	82013426 	beq	r16,r8,7328 <_malloc_r+0x5b4>
    6e58:	80c00117 	ldw	r3,4(r16)
    6e5c:	00bfff04 	movi	r2,-4
    6e60:	188e703a 	and	r7,r3,r2
    6e64:	3c45c83a 	sub	r2,r7,r17
    6e68:	00c003c4 	movi	r3,15
    6e6c:	18811f16 	blt	r3,r2,72ec <_malloc_r+0x578>
    6e70:	32000515 	stw	r8,20(r6)
    6e74:	32000415 	stw	r8,16(r6)
    6e78:	10007f0e 	bge	r2,zero,7078 <_malloc_r+0x304>
    6e7c:	00807fc4 	movi	r2,511
    6e80:	11c0fd36 	bltu	r2,r7,7278 <_malloc_r+0x504>
    6e84:	3806d0fa 	srli	r3,r7,3
    6e88:	01c00044 	movi	r7,1
    6e8c:	30800117 	ldw	r2,4(r6)
    6e90:	19400044 	addi	r5,r3,1
    6e94:	294b883a 	add	r5,r5,r5
    6e98:	1807d0ba 	srai	r3,r3,2
    6e9c:	294b883a 	add	r5,r5,r5
    6ea0:	294b883a 	add	r5,r5,r5
    6ea4:	298b883a 	add	r5,r5,r6
    6ea8:	38c6983a 	sll	r3,r7,r3
    6eac:	29c00017 	ldw	r7,0(r5)
    6eb0:	2a7ffe04 	addi	r9,r5,-8
    6eb4:	1886b03a 	or	r3,r3,r2
    6eb8:	82400315 	stw	r9,12(r16)
    6ebc:	81c00215 	stw	r7,8(r16)
    6ec0:	30c00115 	stw	r3,4(r6)
    6ec4:	2c000015 	stw	r16,0(r5)
    6ec8:	3c000315 	stw	r16,12(r7)
    6ecc:	2005d0ba 	srai	r2,r4,2
    6ed0:	01400044 	movi	r5,1
    6ed4:	288a983a 	sll	r5,r5,r2
    6ed8:	19406f36 	bltu	r3,r5,7098 <_malloc_r+0x324>
    6edc:	28c4703a 	and	r2,r5,r3
    6ee0:	10000a1e 	bne	r2,zero,6f0c <_malloc_r+0x198>
    6ee4:	00bfff04 	movi	r2,-4
    6ee8:	294b883a 	add	r5,r5,r5
    6eec:	2088703a 	and	r4,r4,r2
    6ef0:	28c4703a 	and	r2,r5,r3
    6ef4:	21000104 	addi	r4,r4,4
    6ef8:	1000041e 	bne	r2,zero,6f0c <_malloc_r+0x198>
    6efc:	294b883a 	add	r5,r5,r5
    6f00:	28c4703a 	and	r2,r5,r3
    6f04:	21000104 	addi	r4,r4,4
    6f08:	103ffc26 	beq	r2,zero,6efc <__reset+0xfbf06efc>
    6f0c:	02bfff04 	movi	r10,-4
    6f10:	024003c4 	movi	r9,15
    6f14:	21800044 	addi	r6,r4,1
    6f18:	318d883a 	add	r6,r6,r6
    6f1c:	318d883a 	add	r6,r6,r6
    6f20:	318d883a 	add	r6,r6,r6
    6f24:	998d883a 	add	r6,r19,r6
    6f28:	333ffe04 	addi	r12,r6,-8
    6f2c:	2017883a 	mov	r11,r4
    6f30:	31800104 	addi	r6,r6,4
    6f34:	34000017 	ldw	r16,0(r6)
    6f38:	31fffd04 	addi	r7,r6,-12
    6f3c:	81c0041e 	bne	r16,r7,6f50 <_malloc_r+0x1dc>
    6f40:	0000fb06 	br	7330 <_malloc_r+0x5bc>
    6f44:	1801030e 	bge	r3,zero,7354 <_malloc_r+0x5e0>
    6f48:	84000317 	ldw	r16,12(r16)
    6f4c:	81c0f826 	beq	r16,r7,7330 <_malloc_r+0x5bc>
    6f50:	80800117 	ldw	r2,4(r16)
    6f54:	1284703a 	and	r2,r2,r10
    6f58:	1447c83a 	sub	r3,r2,r17
    6f5c:	48fff90e 	bge	r9,r3,6f44 <__reset+0xfbf06f44>
    6f60:	80800317 	ldw	r2,12(r16)
    6f64:	81000217 	ldw	r4,8(r16)
    6f68:	89400054 	ori	r5,r17,1
    6f6c:	81400115 	stw	r5,4(r16)
    6f70:	20800315 	stw	r2,12(r4)
    6f74:	11000215 	stw	r4,8(r2)
    6f78:	8463883a 	add	r17,r16,r17
    6f7c:	9c400515 	stw	r17,20(r19)
    6f80:	9c400415 	stw	r17,16(r19)
    6f84:	18800054 	ori	r2,r3,1
    6f88:	88800115 	stw	r2,4(r17)
    6f8c:	8a000315 	stw	r8,12(r17)
    6f90:	8a000215 	stw	r8,8(r17)
    6f94:	88e3883a 	add	r17,r17,r3
    6f98:	88c00015 	stw	r3,0(r17)
    6f9c:	9009883a 	mov	r4,r18
    6fa0:	000e5780 	call	e578 <__malloc_unlock>
    6fa4:	80800204 	addi	r2,r16,8
    6fa8:	00001b06 	br	7018 <_malloc_r+0x2a4>
    6fac:	04400404 	movi	r17,16
    6fb0:	89402536 	bltu	r17,r5,7048 <_malloc_r+0x2d4>
    6fb4:	000e5740 	call	e574 <__malloc_lock>
    6fb8:	00800184 	movi	r2,6
    6fbc:	01000084 	movi	r4,2
    6fc0:	04c00074 	movhi	r19,1
    6fc4:	1085883a 	add	r2,r2,r2
    6fc8:	9cc3ca04 	addi	r19,r19,3880
    6fcc:	1085883a 	add	r2,r2,r2
    6fd0:	9885883a 	add	r2,r19,r2
    6fd4:	14000117 	ldw	r16,4(r2)
    6fd8:	10fffe04 	addi	r3,r2,-8
    6fdc:	80c0d926 	beq	r16,r3,7344 <_malloc_r+0x5d0>
    6fe0:	80c00117 	ldw	r3,4(r16)
    6fe4:	81000317 	ldw	r4,12(r16)
    6fe8:	00bfff04 	movi	r2,-4
    6fec:	1884703a 	and	r2,r3,r2
    6ff0:	81400217 	ldw	r5,8(r16)
    6ff4:	8085883a 	add	r2,r16,r2
    6ff8:	10c00117 	ldw	r3,4(r2)
    6ffc:	29000315 	stw	r4,12(r5)
    7000:	21400215 	stw	r5,8(r4)
    7004:	18c00054 	ori	r3,r3,1
    7008:	10c00115 	stw	r3,4(r2)
    700c:	9009883a 	mov	r4,r18
    7010:	000e5780 	call	e578 <__malloc_unlock>
    7014:	80800204 	addi	r2,r16,8
    7018:	dfc00a17 	ldw	ra,40(sp)
    701c:	df000917 	ldw	fp,36(sp)
    7020:	ddc00817 	ldw	r23,32(sp)
    7024:	dd800717 	ldw	r22,28(sp)
    7028:	dd400617 	ldw	r21,24(sp)
    702c:	dd000517 	ldw	r20,20(sp)
    7030:	dcc00417 	ldw	r19,16(sp)
    7034:	dc800317 	ldw	r18,12(sp)
    7038:	dc400217 	ldw	r17,8(sp)
    703c:	dc000117 	ldw	r16,4(sp)
    7040:	dec00b04 	addi	sp,sp,44
    7044:	f800283a 	ret
    7048:	00800304 	movi	r2,12
    704c:	90800015 	stw	r2,0(r18)
    7050:	0005883a 	mov	r2,zero
    7054:	003ff006 	br	7018 <__reset+0xfbf07018>
    7058:	01002004 	movi	r4,128
    705c:	02001004 	movi	r8,64
    7060:	01c00fc4 	movi	r7,63
    7064:	003f6106 	br	6dec <__reset+0xfbf06dec>
    7068:	4009883a 	mov	r4,r8
    706c:	003f7506 	br	6e44 <__reset+0xfbf06e44>
    7070:	81000317 	ldw	r4,12(r16)
    7074:	003fde06 	br	6ff0 <__reset+0xfbf06ff0>
    7078:	81c5883a 	add	r2,r16,r7
    707c:	11400117 	ldw	r5,4(r2)
    7080:	9009883a 	mov	r4,r18
    7084:	29400054 	ori	r5,r5,1
    7088:	11400115 	stw	r5,4(r2)
    708c:	000e5780 	call	e578 <__malloc_unlock>
    7090:	80800204 	addi	r2,r16,8
    7094:	003fe006 	br	7018 <__reset+0xfbf07018>
    7098:	9c000217 	ldw	r16,8(r19)
    709c:	00bfff04 	movi	r2,-4
    70a0:	85800117 	ldw	r22,4(r16)
    70a4:	b0ac703a 	and	r22,r22,r2
    70a8:	b4400336 	bltu	r22,r17,70b8 <_malloc_r+0x344>
    70ac:	b445c83a 	sub	r2,r22,r17
    70b0:	00c003c4 	movi	r3,15
    70b4:	18805d16 	blt	r3,r2,722c <_malloc_r+0x4b8>
    70b8:	05c00074 	movhi	r23,1
    70bc:	00800074 	movhi	r2,1
    70c0:	108a0b04 	addi	r2,r2,10284
    70c4:	bdc9e704 	addi	r23,r23,10140
    70c8:	15400017 	ldw	r21,0(r2)
    70cc:	b8c00017 	ldw	r3,0(r23)
    70d0:	00bfffc4 	movi	r2,-1
    70d4:	858d883a 	add	r6,r16,r22
    70d8:	8d6b883a 	add	r21,r17,r21
    70dc:	1880ea26 	beq	r3,r2,7488 <_malloc_r+0x714>
    70e0:	ad4403c4 	addi	r21,r21,4111
    70e4:	00bc0004 	movi	r2,-4096
    70e8:	a8aa703a 	and	r21,r21,r2
    70ec:	a80b883a 	mov	r5,r21
    70f0:	9009883a 	mov	r4,r18
    70f4:	d9800015 	stw	r6,0(sp)
    70f8:	0008edc0 	call	8edc <_sbrk_r>
    70fc:	1029883a 	mov	r20,r2
    7100:	00bfffc4 	movi	r2,-1
    7104:	d9800017 	ldw	r6,0(sp)
    7108:	a080e826 	beq	r20,r2,74ac <_malloc_r+0x738>
    710c:	a180a636 	bltu	r20,r6,73a8 <_malloc_r+0x634>
    7110:	07000074 	movhi	fp,1
    7114:	e7171404 	addi	fp,fp,23632
    7118:	e0800017 	ldw	r2,0(fp)
    711c:	a887883a 	add	r3,r21,r2
    7120:	e0c00015 	stw	r3,0(fp)
    7124:	3500e626 	beq	r6,r20,74c0 <_malloc_r+0x74c>
    7128:	b9000017 	ldw	r4,0(r23)
    712c:	00bfffc4 	movi	r2,-1
    7130:	2080ee26 	beq	r4,r2,74ec <_malloc_r+0x778>
    7134:	a185c83a 	sub	r2,r20,r6
    7138:	10c5883a 	add	r2,r2,r3
    713c:	e0800015 	stw	r2,0(fp)
    7140:	a0c001cc 	andi	r3,r20,7
    7144:	1800bc26 	beq	r3,zero,7438 <_malloc_r+0x6c4>
    7148:	a0e9c83a 	sub	r20,r20,r3
    714c:	00840204 	movi	r2,4104
    7150:	a5000204 	addi	r20,r20,8
    7154:	10c7c83a 	sub	r3,r2,r3
    7158:	a545883a 	add	r2,r20,r21
    715c:	1083ffcc 	andi	r2,r2,4095
    7160:	18abc83a 	sub	r21,r3,r2
    7164:	a80b883a 	mov	r5,r21
    7168:	9009883a 	mov	r4,r18
    716c:	0008edc0 	call	8edc <_sbrk_r>
    7170:	00ffffc4 	movi	r3,-1
    7174:	10c0e126 	beq	r2,r3,74fc <_malloc_r+0x788>
    7178:	1505c83a 	sub	r2,r2,r20
    717c:	1545883a 	add	r2,r2,r21
    7180:	10800054 	ori	r2,r2,1
    7184:	e0c00017 	ldw	r3,0(fp)
    7188:	9d000215 	stw	r20,8(r19)
    718c:	a0800115 	stw	r2,4(r20)
    7190:	a8c7883a 	add	r3,r21,r3
    7194:	e0c00015 	stw	r3,0(fp)
    7198:	84c00e26 	beq	r16,r19,71d4 <_malloc_r+0x460>
    719c:	018003c4 	movi	r6,15
    71a0:	3580a72e 	bgeu	r6,r22,7440 <_malloc_r+0x6cc>
    71a4:	81400117 	ldw	r5,4(r16)
    71a8:	013ffe04 	movi	r4,-8
    71ac:	b0bffd04 	addi	r2,r22,-12
    71b0:	1104703a 	and	r2,r2,r4
    71b4:	2900004c 	andi	r4,r5,1
    71b8:	2088b03a 	or	r4,r4,r2
    71bc:	81000115 	stw	r4,4(r16)
    71c0:	01400144 	movi	r5,5
    71c4:	8089883a 	add	r4,r16,r2
    71c8:	21400115 	stw	r5,4(r4)
    71cc:	21400215 	stw	r5,8(r4)
    71d0:	3080cd36 	bltu	r6,r2,7508 <_malloc_r+0x794>
    71d4:	00800074 	movhi	r2,1
    71d8:	108a0a04 	addi	r2,r2,10280
    71dc:	11000017 	ldw	r4,0(r2)
    71e0:	20c0012e 	bgeu	r4,r3,71e8 <_malloc_r+0x474>
    71e4:	10c00015 	stw	r3,0(r2)
    71e8:	00800074 	movhi	r2,1
    71ec:	108a0904 	addi	r2,r2,10276
    71f0:	11000017 	ldw	r4,0(r2)
    71f4:	9c000217 	ldw	r16,8(r19)
    71f8:	20c0012e 	bgeu	r4,r3,7200 <_malloc_r+0x48c>
    71fc:	10c00015 	stw	r3,0(r2)
    7200:	80c00117 	ldw	r3,4(r16)
    7204:	00bfff04 	movi	r2,-4
    7208:	1886703a 	and	r3,r3,r2
    720c:	1c45c83a 	sub	r2,r3,r17
    7210:	1c400236 	bltu	r3,r17,721c <_malloc_r+0x4a8>
    7214:	00c003c4 	movi	r3,15
    7218:	18800416 	blt	r3,r2,722c <_malloc_r+0x4b8>
    721c:	9009883a 	mov	r4,r18
    7220:	000e5780 	call	e578 <__malloc_unlock>
    7224:	0005883a 	mov	r2,zero
    7228:	003f7b06 	br	7018 <__reset+0xfbf07018>
    722c:	88c00054 	ori	r3,r17,1
    7230:	80c00115 	stw	r3,4(r16)
    7234:	8463883a 	add	r17,r16,r17
    7238:	10800054 	ori	r2,r2,1
    723c:	9c400215 	stw	r17,8(r19)
    7240:	88800115 	stw	r2,4(r17)
    7244:	9009883a 	mov	r4,r18
    7248:	000e5780 	call	e578 <__malloc_unlock>
    724c:	80800204 	addi	r2,r16,8
    7250:	003f7106 	br	7018 <__reset+0xfbf07018>
    7254:	00c00504 	movi	r3,20
    7258:	18804a2e 	bgeu	r3,r2,7384 <_malloc_r+0x610>
    725c:	00c01504 	movi	r3,84
    7260:	18806e36 	bltu	r3,r2,741c <_malloc_r+0x6a8>
    7264:	8804d33a 	srli	r2,r17,12
    7268:	12001bc4 	addi	r8,r2,111
    726c:	11c01b84 	addi	r7,r2,110
    7270:	4209883a 	add	r4,r8,r8
    7274:	003edd06 	br	6dec <__reset+0xfbf06dec>
    7278:	3804d27a 	srli	r2,r7,9
    727c:	00c00104 	movi	r3,4
    7280:	1880442e 	bgeu	r3,r2,7394 <_malloc_r+0x620>
    7284:	00c00504 	movi	r3,20
    7288:	18808136 	bltu	r3,r2,7490 <_malloc_r+0x71c>
    728c:	11401704 	addi	r5,r2,92
    7290:	10c016c4 	addi	r3,r2,91
    7294:	294b883a 	add	r5,r5,r5
    7298:	294b883a 	add	r5,r5,r5
    729c:	294b883a 	add	r5,r5,r5
    72a0:	994b883a 	add	r5,r19,r5
    72a4:	28800017 	ldw	r2,0(r5)
    72a8:	01800074 	movhi	r6,1
    72ac:	297ffe04 	addi	r5,r5,-8
    72b0:	3183ca04 	addi	r6,r6,3880
    72b4:	28806526 	beq	r5,r2,744c <_malloc_r+0x6d8>
    72b8:	01bfff04 	movi	r6,-4
    72bc:	10c00117 	ldw	r3,4(r2)
    72c0:	1986703a 	and	r3,r3,r6
    72c4:	38c0022e 	bgeu	r7,r3,72d0 <_malloc_r+0x55c>
    72c8:	10800217 	ldw	r2,8(r2)
    72cc:	28bffb1e 	bne	r5,r2,72bc <__reset+0xfbf072bc>
    72d0:	11400317 	ldw	r5,12(r2)
    72d4:	98c00117 	ldw	r3,4(r19)
    72d8:	81400315 	stw	r5,12(r16)
    72dc:	80800215 	stw	r2,8(r16)
    72e0:	2c000215 	stw	r16,8(r5)
    72e4:	14000315 	stw	r16,12(r2)
    72e8:	003ef806 	br	6ecc <__reset+0xfbf06ecc>
    72ec:	88c00054 	ori	r3,r17,1
    72f0:	80c00115 	stw	r3,4(r16)
    72f4:	8463883a 	add	r17,r16,r17
    72f8:	34400515 	stw	r17,20(r6)
    72fc:	34400415 	stw	r17,16(r6)
    7300:	10c00054 	ori	r3,r2,1
    7304:	8a000315 	stw	r8,12(r17)
    7308:	8a000215 	stw	r8,8(r17)
    730c:	88c00115 	stw	r3,4(r17)
    7310:	88a3883a 	add	r17,r17,r2
    7314:	88800015 	stw	r2,0(r17)
    7318:	9009883a 	mov	r4,r18
    731c:	000e5780 	call	e578 <__malloc_unlock>
    7320:	80800204 	addi	r2,r16,8
    7324:	003f3c06 	br	7018 <__reset+0xfbf07018>
    7328:	30c00117 	ldw	r3,4(r6)
    732c:	003ee706 	br	6ecc <__reset+0xfbf06ecc>
    7330:	5ac00044 	addi	r11,r11,1
    7334:	588000cc 	andi	r2,r11,3
    7338:	31800204 	addi	r6,r6,8
    733c:	103efd1e 	bne	r2,zero,6f34 <__reset+0xfbf06f34>
    7340:	00002406 	br	73d4 <_malloc_r+0x660>
    7344:	14000317 	ldw	r16,12(r2)
    7348:	143f251e 	bne	r2,r16,6fe0 <__reset+0xfbf06fe0>
    734c:	21000084 	addi	r4,r4,2
    7350:	003ebc06 	br	6e44 <__reset+0xfbf06e44>
    7354:	8085883a 	add	r2,r16,r2
    7358:	10c00117 	ldw	r3,4(r2)
    735c:	81000317 	ldw	r4,12(r16)
    7360:	81400217 	ldw	r5,8(r16)
    7364:	18c00054 	ori	r3,r3,1
    7368:	10c00115 	stw	r3,4(r2)
    736c:	29000315 	stw	r4,12(r5)
    7370:	21400215 	stw	r5,8(r4)
    7374:	9009883a 	mov	r4,r18
    7378:	000e5780 	call	e578 <__malloc_unlock>
    737c:	80800204 	addi	r2,r16,8
    7380:	003f2506 	br	7018 <__reset+0xfbf07018>
    7384:	12001704 	addi	r8,r2,92
    7388:	11c016c4 	addi	r7,r2,91
    738c:	4209883a 	add	r4,r8,r8
    7390:	003e9606 	br	6dec <__reset+0xfbf06dec>
    7394:	3804d1ba 	srli	r2,r7,6
    7398:	11400e44 	addi	r5,r2,57
    739c:	10c00e04 	addi	r3,r2,56
    73a0:	294b883a 	add	r5,r5,r5
    73a4:	003fbc06 	br	7298 <__reset+0xfbf07298>
    73a8:	84ff5926 	beq	r16,r19,7110 <__reset+0xfbf07110>
    73ac:	00800074 	movhi	r2,1
    73b0:	1083ca04 	addi	r2,r2,3880
    73b4:	14000217 	ldw	r16,8(r2)
    73b8:	00bfff04 	movi	r2,-4
    73bc:	80c00117 	ldw	r3,4(r16)
    73c0:	1886703a 	and	r3,r3,r2
    73c4:	003f9106 	br	720c <__reset+0xfbf0720c>
    73c8:	60800217 	ldw	r2,8(r12)
    73cc:	213fffc4 	addi	r4,r4,-1
    73d0:	1300651e 	bne	r2,r12,7568 <_malloc_r+0x7f4>
    73d4:	208000cc 	andi	r2,r4,3
    73d8:	633ffe04 	addi	r12,r12,-8
    73dc:	103ffa1e 	bne	r2,zero,73c8 <__reset+0xfbf073c8>
    73e0:	98800117 	ldw	r2,4(r19)
    73e4:	0146303a 	nor	r3,zero,r5
    73e8:	1884703a 	and	r2,r3,r2
    73ec:	98800115 	stw	r2,4(r19)
    73f0:	294b883a 	add	r5,r5,r5
    73f4:	117f2836 	bltu	r2,r5,7098 <__reset+0xfbf07098>
    73f8:	283f2726 	beq	r5,zero,7098 <__reset+0xfbf07098>
    73fc:	2886703a 	and	r3,r5,r2
    7400:	5809883a 	mov	r4,r11
    7404:	183ec31e 	bne	r3,zero,6f14 <__reset+0xfbf06f14>
    7408:	294b883a 	add	r5,r5,r5
    740c:	2886703a 	and	r3,r5,r2
    7410:	21000104 	addi	r4,r4,4
    7414:	183ffc26 	beq	r3,zero,7408 <__reset+0xfbf07408>
    7418:	003ebe06 	br	6f14 <__reset+0xfbf06f14>
    741c:	00c05504 	movi	r3,340
    7420:	18801236 	bltu	r3,r2,746c <_malloc_r+0x6f8>
    7424:	8804d3fa 	srli	r2,r17,15
    7428:	12001e04 	addi	r8,r2,120
    742c:	11c01dc4 	addi	r7,r2,119
    7430:	4209883a 	add	r4,r8,r8
    7434:	003e6d06 	br	6dec <__reset+0xfbf06dec>
    7438:	00c40004 	movi	r3,4096
    743c:	003f4606 	br	7158 <__reset+0xfbf07158>
    7440:	00800044 	movi	r2,1
    7444:	a0800115 	stw	r2,4(r20)
    7448:	003f7406 	br	721c <__reset+0xfbf0721c>
    744c:	1805d0ba 	srai	r2,r3,2
    7450:	01c00044 	movi	r7,1
    7454:	30c00117 	ldw	r3,4(r6)
    7458:	388e983a 	sll	r7,r7,r2
    745c:	2805883a 	mov	r2,r5
    7460:	38c6b03a 	or	r3,r7,r3
    7464:	30c00115 	stw	r3,4(r6)
    7468:	003f9b06 	br	72d8 <__reset+0xfbf072d8>
    746c:	00c15504 	movi	r3,1364
    7470:	18801a36 	bltu	r3,r2,74dc <_malloc_r+0x768>
    7474:	8804d4ba 	srli	r2,r17,18
    7478:	12001f44 	addi	r8,r2,125
    747c:	11c01f04 	addi	r7,r2,124
    7480:	4209883a 	add	r4,r8,r8
    7484:	003e5906 	br	6dec <__reset+0xfbf06dec>
    7488:	ad400404 	addi	r21,r21,16
    748c:	003f1706 	br	70ec <__reset+0xfbf070ec>
    7490:	00c01504 	movi	r3,84
    7494:	18802336 	bltu	r3,r2,7524 <_malloc_r+0x7b0>
    7498:	3804d33a 	srli	r2,r7,12
    749c:	11401bc4 	addi	r5,r2,111
    74a0:	10c01b84 	addi	r3,r2,110
    74a4:	294b883a 	add	r5,r5,r5
    74a8:	003f7b06 	br	7298 <__reset+0xfbf07298>
    74ac:	9c000217 	ldw	r16,8(r19)
    74b0:	00bfff04 	movi	r2,-4
    74b4:	80c00117 	ldw	r3,4(r16)
    74b8:	1886703a 	and	r3,r3,r2
    74bc:	003f5306 	br	720c <__reset+0xfbf0720c>
    74c0:	3083ffcc 	andi	r2,r6,4095
    74c4:	103f181e 	bne	r2,zero,7128 <__reset+0xfbf07128>
    74c8:	99000217 	ldw	r4,8(r19)
    74cc:	b545883a 	add	r2,r22,r21
    74d0:	10800054 	ori	r2,r2,1
    74d4:	20800115 	stw	r2,4(r4)
    74d8:	003f3e06 	br	71d4 <__reset+0xfbf071d4>
    74dc:	01003f84 	movi	r4,254
    74e0:	02001fc4 	movi	r8,127
    74e4:	01c01f84 	movi	r7,126
    74e8:	003e4006 	br	6dec <__reset+0xfbf06dec>
    74ec:	00800074 	movhi	r2,1
    74f0:	1089e704 	addi	r2,r2,10140
    74f4:	15000015 	stw	r20,0(r2)
    74f8:	003f1106 	br	7140 <__reset+0xfbf07140>
    74fc:	00800044 	movi	r2,1
    7500:	002b883a 	mov	r21,zero
    7504:	003f1f06 	br	7184 <__reset+0xfbf07184>
    7508:	81400204 	addi	r5,r16,8
    750c:	9009883a 	mov	r4,r18
    7510:	00061880 	call	6188 <_free_r>
    7514:	00800074 	movhi	r2,1
    7518:	10971404 	addi	r2,r2,23632
    751c:	10c00017 	ldw	r3,0(r2)
    7520:	003f2c06 	br	71d4 <__reset+0xfbf071d4>
    7524:	00c05504 	movi	r3,340
    7528:	18800536 	bltu	r3,r2,7540 <_malloc_r+0x7cc>
    752c:	3804d3fa 	srli	r2,r7,15
    7530:	11401e04 	addi	r5,r2,120
    7534:	10c01dc4 	addi	r3,r2,119
    7538:	294b883a 	add	r5,r5,r5
    753c:	003f5606 	br	7298 <__reset+0xfbf07298>
    7540:	00c15504 	movi	r3,1364
    7544:	18800536 	bltu	r3,r2,755c <_malloc_r+0x7e8>
    7548:	3804d4ba 	srli	r2,r7,18
    754c:	11401f44 	addi	r5,r2,125
    7550:	10c01f04 	addi	r3,r2,124
    7554:	294b883a 	add	r5,r5,r5
    7558:	003f4f06 	br	7298 <__reset+0xfbf07298>
    755c:	01403f84 	movi	r5,254
    7560:	00c01f84 	movi	r3,126
    7564:	003f4c06 	br	7298 <__reset+0xfbf07298>
    7568:	98800117 	ldw	r2,4(r19)
    756c:	003fa006 	br	73f0 <__reset+0xfbf073f0>
    7570:	8808d0fa 	srli	r4,r17,3
    7574:	20800044 	addi	r2,r4,1
    7578:	1085883a 	add	r2,r2,r2
    757c:	003e9006 	br	6fc0 <__reset+0xfbf06fc0>

00007580 <memchr>:
    7580:	208000cc 	andi	r2,r4,3
    7584:	280f883a 	mov	r7,r5
    7588:	10003426 	beq	r2,zero,765c <memchr+0xdc>
    758c:	30bfffc4 	addi	r2,r6,-1
    7590:	30001a26 	beq	r6,zero,75fc <memchr+0x7c>
    7594:	20c00003 	ldbu	r3,0(r4)
    7598:	29803fcc 	andi	r6,r5,255
    759c:	30c0051e 	bne	r6,r3,75b4 <memchr+0x34>
    75a0:	00001806 	br	7604 <memchr+0x84>
    75a4:	10001526 	beq	r2,zero,75fc <memchr+0x7c>
    75a8:	20c00003 	ldbu	r3,0(r4)
    75ac:	10bfffc4 	addi	r2,r2,-1
    75b0:	30c01426 	beq	r6,r3,7604 <memchr+0x84>
    75b4:	21000044 	addi	r4,r4,1
    75b8:	20c000cc 	andi	r3,r4,3
    75bc:	183ff91e 	bne	r3,zero,75a4 <__reset+0xfbf075a4>
    75c0:	020000c4 	movi	r8,3
    75c4:	40801136 	bltu	r8,r2,760c <memchr+0x8c>
    75c8:	10000c26 	beq	r2,zero,75fc <memchr+0x7c>
    75cc:	20c00003 	ldbu	r3,0(r4)
    75d0:	29403fcc 	andi	r5,r5,255
    75d4:	28c00b26 	beq	r5,r3,7604 <memchr+0x84>
    75d8:	20c00044 	addi	r3,r4,1
    75dc:	39803fcc 	andi	r6,r7,255
    75e0:	2089883a 	add	r4,r4,r2
    75e4:	00000306 	br	75f4 <memchr+0x74>
    75e8:	18c00044 	addi	r3,r3,1
    75ec:	197fffc3 	ldbu	r5,-1(r3)
    75f0:	31400526 	beq	r6,r5,7608 <memchr+0x88>
    75f4:	1805883a 	mov	r2,r3
    75f8:	20fffb1e 	bne	r4,r3,75e8 <__reset+0xfbf075e8>
    75fc:	0005883a 	mov	r2,zero
    7600:	f800283a 	ret
    7604:	2005883a 	mov	r2,r4
    7608:	f800283a 	ret
    760c:	28c03fcc 	andi	r3,r5,255
    7610:	1812923a 	slli	r9,r3,8
    7614:	02ffbff4 	movhi	r11,65279
    7618:	02a02074 	movhi	r10,32897
    761c:	48d2b03a 	or	r9,r9,r3
    7620:	4806943a 	slli	r3,r9,16
    7624:	5affbfc4 	addi	r11,r11,-257
    7628:	52a02004 	addi	r10,r10,-32640
    762c:	48d2b03a 	or	r9,r9,r3
    7630:	20c00017 	ldw	r3,0(r4)
    7634:	48c6f03a 	xor	r3,r9,r3
    7638:	1acd883a 	add	r6,r3,r11
    763c:	00c6303a 	nor	r3,zero,r3
    7640:	30c6703a 	and	r3,r6,r3
    7644:	1a86703a 	and	r3,r3,r10
    7648:	183fe01e 	bne	r3,zero,75cc <__reset+0xfbf075cc>
    764c:	10bfff04 	addi	r2,r2,-4
    7650:	21000104 	addi	r4,r4,4
    7654:	40bff636 	bltu	r8,r2,7630 <__reset+0xfbf07630>
    7658:	003fdb06 	br	75c8 <__reset+0xfbf075c8>
    765c:	3005883a 	mov	r2,r6
    7660:	003fd706 	br	75c0 <__reset+0xfbf075c0>

00007664 <memcpy>:
    7664:	defffd04 	addi	sp,sp,-12
    7668:	dfc00215 	stw	ra,8(sp)
    766c:	dc400115 	stw	r17,4(sp)
    7670:	dc000015 	stw	r16,0(sp)
    7674:	00c003c4 	movi	r3,15
    7678:	2005883a 	mov	r2,r4
    767c:	1980452e 	bgeu	r3,r6,7794 <memcpy+0x130>
    7680:	2906b03a 	or	r3,r5,r4
    7684:	18c000cc 	andi	r3,r3,3
    7688:	1800441e 	bne	r3,zero,779c <memcpy+0x138>
    768c:	347ffc04 	addi	r17,r6,-16
    7690:	8822d13a 	srli	r17,r17,4
    7694:	28c00104 	addi	r3,r5,4
    7698:	23400104 	addi	r13,r4,4
    769c:	8820913a 	slli	r16,r17,4
    76a0:	2b000204 	addi	r12,r5,8
    76a4:	22c00204 	addi	r11,r4,8
    76a8:	84000504 	addi	r16,r16,20
    76ac:	2a800304 	addi	r10,r5,12
    76b0:	22400304 	addi	r9,r4,12
    76b4:	2c21883a 	add	r16,r5,r16
    76b8:	2811883a 	mov	r8,r5
    76bc:	200f883a 	mov	r7,r4
    76c0:	41000017 	ldw	r4,0(r8)
    76c4:	1fc00017 	ldw	ra,0(r3)
    76c8:	63c00017 	ldw	r15,0(r12)
    76cc:	39000015 	stw	r4,0(r7)
    76d0:	53800017 	ldw	r14,0(r10)
    76d4:	6fc00015 	stw	ra,0(r13)
    76d8:	5bc00015 	stw	r15,0(r11)
    76dc:	4b800015 	stw	r14,0(r9)
    76e0:	18c00404 	addi	r3,r3,16
    76e4:	39c00404 	addi	r7,r7,16
    76e8:	42000404 	addi	r8,r8,16
    76ec:	6b400404 	addi	r13,r13,16
    76f0:	63000404 	addi	r12,r12,16
    76f4:	5ac00404 	addi	r11,r11,16
    76f8:	52800404 	addi	r10,r10,16
    76fc:	4a400404 	addi	r9,r9,16
    7700:	1c3fef1e 	bne	r3,r16,76c0 <__reset+0xfbf076c0>
    7704:	89c00044 	addi	r7,r17,1
    7708:	380e913a 	slli	r7,r7,4
    770c:	310003cc 	andi	r4,r6,15
    7710:	02c000c4 	movi	r11,3
    7714:	11c7883a 	add	r3,r2,r7
    7718:	29cb883a 	add	r5,r5,r7
    771c:	5900212e 	bgeu	r11,r4,77a4 <memcpy+0x140>
    7720:	1813883a 	mov	r9,r3
    7724:	2811883a 	mov	r8,r5
    7728:	200f883a 	mov	r7,r4
    772c:	42800017 	ldw	r10,0(r8)
    7730:	4a400104 	addi	r9,r9,4
    7734:	39ffff04 	addi	r7,r7,-4
    7738:	4abfff15 	stw	r10,-4(r9)
    773c:	42000104 	addi	r8,r8,4
    7740:	59fffa36 	bltu	r11,r7,772c <__reset+0xfbf0772c>
    7744:	213fff04 	addi	r4,r4,-4
    7748:	2008d0ba 	srli	r4,r4,2
    774c:	318000cc 	andi	r6,r6,3
    7750:	21000044 	addi	r4,r4,1
    7754:	2109883a 	add	r4,r4,r4
    7758:	2109883a 	add	r4,r4,r4
    775c:	1907883a 	add	r3,r3,r4
    7760:	290b883a 	add	r5,r5,r4
    7764:	30000626 	beq	r6,zero,7780 <memcpy+0x11c>
    7768:	198d883a 	add	r6,r3,r6
    776c:	29c00003 	ldbu	r7,0(r5)
    7770:	18c00044 	addi	r3,r3,1
    7774:	29400044 	addi	r5,r5,1
    7778:	19ffffc5 	stb	r7,-1(r3)
    777c:	19bffb1e 	bne	r3,r6,776c <__reset+0xfbf0776c>
    7780:	dfc00217 	ldw	ra,8(sp)
    7784:	dc400117 	ldw	r17,4(sp)
    7788:	dc000017 	ldw	r16,0(sp)
    778c:	dec00304 	addi	sp,sp,12
    7790:	f800283a 	ret
    7794:	2007883a 	mov	r3,r4
    7798:	003ff206 	br	7764 <__reset+0xfbf07764>
    779c:	2007883a 	mov	r3,r4
    77a0:	003ff106 	br	7768 <__reset+0xfbf07768>
    77a4:	200d883a 	mov	r6,r4
    77a8:	003fee06 	br	7764 <__reset+0xfbf07764>

000077ac <memmove>:
    77ac:	2005883a 	mov	r2,r4
    77b0:	29000b2e 	bgeu	r5,r4,77e0 <memmove+0x34>
    77b4:	298f883a 	add	r7,r5,r6
    77b8:	21c0092e 	bgeu	r4,r7,77e0 <memmove+0x34>
    77bc:	2187883a 	add	r3,r4,r6
    77c0:	198bc83a 	sub	r5,r3,r6
    77c4:	30004826 	beq	r6,zero,78e8 <memmove+0x13c>
    77c8:	39ffffc4 	addi	r7,r7,-1
    77cc:	39000003 	ldbu	r4,0(r7)
    77d0:	18ffffc4 	addi	r3,r3,-1
    77d4:	19000005 	stb	r4,0(r3)
    77d8:	28fffb1e 	bne	r5,r3,77c8 <__reset+0xfbf077c8>
    77dc:	f800283a 	ret
    77e0:	00c003c4 	movi	r3,15
    77e4:	1980412e 	bgeu	r3,r6,78ec <memmove+0x140>
    77e8:	2886b03a 	or	r3,r5,r2
    77ec:	18c000cc 	andi	r3,r3,3
    77f0:	1800401e 	bne	r3,zero,78f4 <memmove+0x148>
    77f4:	33fffc04 	addi	r15,r6,-16
    77f8:	781ed13a 	srli	r15,r15,4
    77fc:	28c00104 	addi	r3,r5,4
    7800:	13400104 	addi	r13,r2,4
    7804:	781c913a 	slli	r14,r15,4
    7808:	2b000204 	addi	r12,r5,8
    780c:	12c00204 	addi	r11,r2,8
    7810:	73800504 	addi	r14,r14,20
    7814:	2a800304 	addi	r10,r5,12
    7818:	12400304 	addi	r9,r2,12
    781c:	2b9d883a 	add	r14,r5,r14
    7820:	2811883a 	mov	r8,r5
    7824:	100f883a 	mov	r7,r2
    7828:	41000017 	ldw	r4,0(r8)
    782c:	39c00404 	addi	r7,r7,16
    7830:	18c00404 	addi	r3,r3,16
    7834:	393ffc15 	stw	r4,-16(r7)
    7838:	193ffc17 	ldw	r4,-16(r3)
    783c:	6b400404 	addi	r13,r13,16
    7840:	5ac00404 	addi	r11,r11,16
    7844:	693ffc15 	stw	r4,-16(r13)
    7848:	61000017 	ldw	r4,0(r12)
    784c:	4a400404 	addi	r9,r9,16
    7850:	42000404 	addi	r8,r8,16
    7854:	593ffc15 	stw	r4,-16(r11)
    7858:	51000017 	ldw	r4,0(r10)
    785c:	63000404 	addi	r12,r12,16
    7860:	52800404 	addi	r10,r10,16
    7864:	493ffc15 	stw	r4,-16(r9)
    7868:	1bbfef1e 	bne	r3,r14,7828 <__reset+0xfbf07828>
    786c:	79000044 	addi	r4,r15,1
    7870:	2008913a 	slli	r4,r4,4
    7874:	328003cc 	andi	r10,r6,15
    7878:	02c000c4 	movi	r11,3
    787c:	1107883a 	add	r3,r2,r4
    7880:	290b883a 	add	r5,r5,r4
    7884:	5a801e2e 	bgeu	r11,r10,7900 <memmove+0x154>
    7888:	1813883a 	mov	r9,r3
    788c:	2811883a 	mov	r8,r5
    7890:	500f883a 	mov	r7,r10
    7894:	41000017 	ldw	r4,0(r8)
    7898:	4a400104 	addi	r9,r9,4
    789c:	39ffff04 	addi	r7,r7,-4
    78a0:	493fff15 	stw	r4,-4(r9)
    78a4:	42000104 	addi	r8,r8,4
    78a8:	59fffa36 	bltu	r11,r7,7894 <__reset+0xfbf07894>
    78ac:	513fff04 	addi	r4,r10,-4
    78b0:	2008d0ba 	srli	r4,r4,2
    78b4:	318000cc 	andi	r6,r6,3
    78b8:	21000044 	addi	r4,r4,1
    78bc:	2109883a 	add	r4,r4,r4
    78c0:	2109883a 	add	r4,r4,r4
    78c4:	1907883a 	add	r3,r3,r4
    78c8:	290b883a 	add	r5,r5,r4
    78cc:	30000b26 	beq	r6,zero,78fc <memmove+0x150>
    78d0:	198d883a 	add	r6,r3,r6
    78d4:	29c00003 	ldbu	r7,0(r5)
    78d8:	18c00044 	addi	r3,r3,1
    78dc:	29400044 	addi	r5,r5,1
    78e0:	19ffffc5 	stb	r7,-1(r3)
    78e4:	19bffb1e 	bne	r3,r6,78d4 <__reset+0xfbf078d4>
    78e8:	f800283a 	ret
    78ec:	1007883a 	mov	r3,r2
    78f0:	003ff606 	br	78cc <__reset+0xfbf078cc>
    78f4:	1007883a 	mov	r3,r2
    78f8:	003ff506 	br	78d0 <__reset+0xfbf078d0>
    78fc:	f800283a 	ret
    7900:	500d883a 	mov	r6,r10
    7904:	003ff106 	br	78cc <__reset+0xfbf078cc>

00007908 <_Balloc>:
    7908:	20801317 	ldw	r2,76(r4)
    790c:	defffc04 	addi	sp,sp,-16
    7910:	dc400115 	stw	r17,4(sp)
    7914:	dc000015 	stw	r16,0(sp)
    7918:	dfc00315 	stw	ra,12(sp)
    791c:	dc800215 	stw	r18,8(sp)
    7920:	2023883a 	mov	r17,r4
    7924:	2821883a 	mov	r16,r5
    7928:	10000f26 	beq	r2,zero,7968 <_Balloc+0x60>
    792c:	8407883a 	add	r3,r16,r16
    7930:	18c7883a 	add	r3,r3,r3
    7934:	10c7883a 	add	r3,r2,r3
    7938:	18800017 	ldw	r2,0(r3)
    793c:	10001126 	beq	r2,zero,7984 <_Balloc+0x7c>
    7940:	11000017 	ldw	r4,0(r2)
    7944:	19000015 	stw	r4,0(r3)
    7948:	10000415 	stw	zero,16(r2)
    794c:	10000315 	stw	zero,12(r2)
    7950:	dfc00317 	ldw	ra,12(sp)
    7954:	dc800217 	ldw	r18,8(sp)
    7958:	dc400117 	ldw	r17,4(sp)
    795c:	dc000017 	ldw	r16,0(sp)
    7960:	dec00404 	addi	sp,sp,16
    7964:	f800283a 	ret
    7968:	01800844 	movi	r6,33
    796c:	01400104 	movi	r5,4
    7970:	000a8440 	call	a844 <_calloc_r>
    7974:	88801315 	stw	r2,76(r17)
    7978:	103fec1e 	bne	r2,zero,792c <__reset+0xfbf0792c>
    797c:	0005883a 	mov	r2,zero
    7980:	003ff306 	br	7950 <__reset+0xfbf07950>
    7984:	01400044 	movi	r5,1
    7988:	2c24983a 	sll	r18,r5,r16
    798c:	8809883a 	mov	r4,r17
    7990:	91800144 	addi	r6,r18,5
    7994:	318d883a 	add	r6,r6,r6
    7998:	318d883a 	add	r6,r6,r6
    799c:	000a8440 	call	a844 <_calloc_r>
    79a0:	103ff626 	beq	r2,zero,797c <__reset+0xfbf0797c>
    79a4:	14000115 	stw	r16,4(r2)
    79a8:	14800215 	stw	r18,8(r2)
    79ac:	003fe606 	br	7948 <__reset+0xfbf07948>

000079b0 <_Bfree>:
    79b0:	28000826 	beq	r5,zero,79d4 <_Bfree+0x24>
    79b4:	28c00117 	ldw	r3,4(r5)
    79b8:	20801317 	ldw	r2,76(r4)
    79bc:	18c7883a 	add	r3,r3,r3
    79c0:	18c7883a 	add	r3,r3,r3
    79c4:	10c5883a 	add	r2,r2,r3
    79c8:	10c00017 	ldw	r3,0(r2)
    79cc:	28c00015 	stw	r3,0(r5)
    79d0:	11400015 	stw	r5,0(r2)
    79d4:	f800283a 	ret

000079d8 <__multadd>:
    79d8:	defffa04 	addi	sp,sp,-24
    79dc:	dc800315 	stw	r18,12(sp)
    79e0:	dc400215 	stw	r17,8(sp)
    79e4:	dc000115 	stw	r16,4(sp)
    79e8:	2823883a 	mov	r17,r5
    79ec:	2c000417 	ldw	r16,16(r5)
    79f0:	dfc00515 	stw	ra,20(sp)
    79f4:	dcc00415 	stw	r19,16(sp)
    79f8:	2025883a 	mov	r18,r4
    79fc:	29400504 	addi	r5,r5,20
    7a00:	0011883a 	mov	r8,zero
    7a04:	28c00017 	ldw	r3,0(r5)
    7a08:	29400104 	addi	r5,r5,4
    7a0c:	42000044 	addi	r8,r8,1
    7a10:	18bfffcc 	andi	r2,r3,65535
    7a14:	1185383a 	mul	r2,r2,r6
    7a18:	1806d43a 	srli	r3,r3,16
    7a1c:	11cf883a 	add	r7,r2,r7
    7a20:	3808d43a 	srli	r4,r7,16
    7a24:	1987383a 	mul	r3,r3,r6
    7a28:	38bfffcc 	andi	r2,r7,65535
    7a2c:	1907883a 	add	r3,r3,r4
    7a30:	1808943a 	slli	r4,r3,16
    7a34:	180ed43a 	srli	r7,r3,16
    7a38:	2085883a 	add	r2,r4,r2
    7a3c:	28bfff15 	stw	r2,-4(r5)
    7a40:	443ff016 	blt	r8,r16,7a04 <__reset+0xfbf07a04>
    7a44:	38000926 	beq	r7,zero,7a6c <__multadd+0x94>
    7a48:	88800217 	ldw	r2,8(r17)
    7a4c:	80800f0e 	bge	r16,r2,7a8c <__multadd+0xb4>
    7a50:	80800144 	addi	r2,r16,5
    7a54:	1085883a 	add	r2,r2,r2
    7a58:	1085883a 	add	r2,r2,r2
    7a5c:	8885883a 	add	r2,r17,r2
    7a60:	11c00015 	stw	r7,0(r2)
    7a64:	84000044 	addi	r16,r16,1
    7a68:	8c000415 	stw	r16,16(r17)
    7a6c:	8805883a 	mov	r2,r17
    7a70:	dfc00517 	ldw	ra,20(sp)
    7a74:	dcc00417 	ldw	r19,16(sp)
    7a78:	dc800317 	ldw	r18,12(sp)
    7a7c:	dc400217 	ldw	r17,8(sp)
    7a80:	dc000117 	ldw	r16,4(sp)
    7a84:	dec00604 	addi	sp,sp,24
    7a88:	f800283a 	ret
    7a8c:	89400117 	ldw	r5,4(r17)
    7a90:	9009883a 	mov	r4,r18
    7a94:	d9c00015 	stw	r7,0(sp)
    7a98:	29400044 	addi	r5,r5,1
    7a9c:	00079080 	call	7908 <_Balloc>
    7aa0:	89800417 	ldw	r6,16(r17)
    7aa4:	89400304 	addi	r5,r17,12
    7aa8:	11000304 	addi	r4,r2,12
    7aac:	31800084 	addi	r6,r6,2
    7ab0:	318d883a 	add	r6,r6,r6
    7ab4:	318d883a 	add	r6,r6,r6
    7ab8:	1027883a 	mov	r19,r2
    7abc:	00076640 	call	7664 <memcpy>
    7ac0:	d9c00017 	ldw	r7,0(sp)
    7ac4:	88000a26 	beq	r17,zero,7af0 <__multadd+0x118>
    7ac8:	88c00117 	ldw	r3,4(r17)
    7acc:	90801317 	ldw	r2,76(r18)
    7ad0:	18c7883a 	add	r3,r3,r3
    7ad4:	18c7883a 	add	r3,r3,r3
    7ad8:	10c5883a 	add	r2,r2,r3
    7adc:	10c00017 	ldw	r3,0(r2)
    7ae0:	88c00015 	stw	r3,0(r17)
    7ae4:	14400015 	stw	r17,0(r2)
    7ae8:	9823883a 	mov	r17,r19
    7aec:	003fd806 	br	7a50 <__reset+0xfbf07a50>
    7af0:	9823883a 	mov	r17,r19
    7af4:	003fd606 	br	7a50 <__reset+0xfbf07a50>

00007af8 <__s2b>:
    7af8:	defff904 	addi	sp,sp,-28
    7afc:	dc400115 	stw	r17,4(sp)
    7b00:	dc000015 	stw	r16,0(sp)
    7b04:	2023883a 	mov	r17,r4
    7b08:	2821883a 	mov	r16,r5
    7b0c:	39000204 	addi	r4,r7,8
    7b10:	01400244 	movi	r5,9
    7b14:	dcc00315 	stw	r19,12(sp)
    7b18:	dc800215 	stw	r18,8(sp)
    7b1c:	dfc00615 	stw	ra,24(sp)
    7b20:	dd400515 	stw	r21,20(sp)
    7b24:	dd000415 	stw	r20,16(sp)
    7b28:	3825883a 	mov	r18,r7
    7b2c:	3027883a 	mov	r19,r6
    7b30:	000bb740 	call	bb74 <__divsi3>
    7b34:	00c00044 	movi	r3,1
    7b38:	000b883a 	mov	r5,zero
    7b3c:	1880030e 	bge	r3,r2,7b4c <__s2b+0x54>
    7b40:	18c7883a 	add	r3,r3,r3
    7b44:	29400044 	addi	r5,r5,1
    7b48:	18bffd16 	blt	r3,r2,7b40 <__reset+0xfbf07b40>
    7b4c:	8809883a 	mov	r4,r17
    7b50:	00079080 	call	7908 <_Balloc>
    7b54:	d8c00717 	ldw	r3,28(sp)
    7b58:	10c00515 	stw	r3,20(r2)
    7b5c:	00c00044 	movi	r3,1
    7b60:	10c00415 	stw	r3,16(r2)
    7b64:	00c00244 	movi	r3,9
    7b68:	1cc0210e 	bge	r3,r19,7bf0 <__s2b+0xf8>
    7b6c:	80eb883a 	add	r21,r16,r3
    7b70:	a829883a 	mov	r20,r21
    7b74:	84e1883a 	add	r16,r16,r19
    7b78:	a1c00007 	ldb	r7,0(r20)
    7b7c:	01800284 	movi	r6,10
    7b80:	a5000044 	addi	r20,r20,1
    7b84:	100b883a 	mov	r5,r2
    7b88:	39fff404 	addi	r7,r7,-48
    7b8c:	8809883a 	mov	r4,r17
    7b90:	00079d80 	call	79d8 <__multadd>
    7b94:	a43ff81e 	bne	r20,r16,7b78 <__reset+0xfbf07b78>
    7b98:	ace1883a 	add	r16,r21,r19
    7b9c:	843ffe04 	addi	r16,r16,-8
    7ba0:	9c800a0e 	bge	r19,r18,7bcc <__s2b+0xd4>
    7ba4:	94e5c83a 	sub	r18,r18,r19
    7ba8:	84a5883a 	add	r18,r16,r18
    7bac:	81c00007 	ldb	r7,0(r16)
    7bb0:	01800284 	movi	r6,10
    7bb4:	84000044 	addi	r16,r16,1
    7bb8:	100b883a 	mov	r5,r2
    7bbc:	39fff404 	addi	r7,r7,-48
    7bc0:	8809883a 	mov	r4,r17
    7bc4:	00079d80 	call	79d8 <__multadd>
    7bc8:	84bff81e 	bne	r16,r18,7bac <__reset+0xfbf07bac>
    7bcc:	dfc00617 	ldw	ra,24(sp)
    7bd0:	dd400517 	ldw	r21,20(sp)
    7bd4:	dd000417 	ldw	r20,16(sp)
    7bd8:	dcc00317 	ldw	r19,12(sp)
    7bdc:	dc800217 	ldw	r18,8(sp)
    7be0:	dc400117 	ldw	r17,4(sp)
    7be4:	dc000017 	ldw	r16,0(sp)
    7be8:	dec00704 	addi	sp,sp,28
    7bec:	f800283a 	ret
    7bf0:	84000284 	addi	r16,r16,10
    7bf4:	1827883a 	mov	r19,r3
    7bf8:	003fe906 	br	7ba0 <__reset+0xfbf07ba0>

00007bfc <__hi0bits>:
    7bfc:	20bfffec 	andhi	r2,r4,65535
    7c00:	1000141e 	bne	r2,zero,7c54 <__hi0bits+0x58>
    7c04:	2008943a 	slli	r4,r4,16
    7c08:	00800404 	movi	r2,16
    7c0c:	20ffc02c 	andhi	r3,r4,65280
    7c10:	1800021e 	bne	r3,zero,7c1c <__hi0bits+0x20>
    7c14:	2008923a 	slli	r4,r4,8
    7c18:	10800204 	addi	r2,r2,8
    7c1c:	20fc002c 	andhi	r3,r4,61440
    7c20:	1800021e 	bne	r3,zero,7c2c <__hi0bits+0x30>
    7c24:	2008913a 	slli	r4,r4,4
    7c28:	10800104 	addi	r2,r2,4
    7c2c:	20f0002c 	andhi	r3,r4,49152
    7c30:	1800031e 	bne	r3,zero,7c40 <__hi0bits+0x44>
    7c34:	2109883a 	add	r4,r4,r4
    7c38:	10800084 	addi	r2,r2,2
    7c3c:	2109883a 	add	r4,r4,r4
    7c40:	20000316 	blt	r4,zero,7c50 <__hi0bits+0x54>
    7c44:	2110002c 	andhi	r4,r4,16384
    7c48:	2000041e 	bne	r4,zero,7c5c <__hi0bits+0x60>
    7c4c:	00800804 	movi	r2,32
    7c50:	f800283a 	ret
    7c54:	0005883a 	mov	r2,zero
    7c58:	003fec06 	br	7c0c <__reset+0xfbf07c0c>
    7c5c:	10800044 	addi	r2,r2,1
    7c60:	f800283a 	ret

00007c64 <__lo0bits>:
    7c64:	20c00017 	ldw	r3,0(r4)
    7c68:	188001cc 	andi	r2,r3,7
    7c6c:	10000826 	beq	r2,zero,7c90 <__lo0bits+0x2c>
    7c70:	1880004c 	andi	r2,r3,1
    7c74:	1000211e 	bne	r2,zero,7cfc <__lo0bits+0x98>
    7c78:	1880008c 	andi	r2,r3,2
    7c7c:	1000211e 	bne	r2,zero,7d04 <__lo0bits+0xa0>
    7c80:	1806d0ba 	srli	r3,r3,2
    7c84:	00800084 	movi	r2,2
    7c88:	20c00015 	stw	r3,0(r4)
    7c8c:	f800283a 	ret
    7c90:	18bfffcc 	andi	r2,r3,65535
    7c94:	10001326 	beq	r2,zero,7ce4 <__lo0bits+0x80>
    7c98:	0005883a 	mov	r2,zero
    7c9c:	19403fcc 	andi	r5,r3,255
    7ca0:	2800021e 	bne	r5,zero,7cac <__lo0bits+0x48>
    7ca4:	1806d23a 	srli	r3,r3,8
    7ca8:	10800204 	addi	r2,r2,8
    7cac:	194003cc 	andi	r5,r3,15
    7cb0:	2800021e 	bne	r5,zero,7cbc <__lo0bits+0x58>
    7cb4:	1806d13a 	srli	r3,r3,4
    7cb8:	10800104 	addi	r2,r2,4
    7cbc:	194000cc 	andi	r5,r3,3
    7cc0:	2800021e 	bne	r5,zero,7ccc <__lo0bits+0x68>
    7cc4:	1806d0ba 	srli	r3,r3,2
    7cc8:	10800084 	addi	r2,r2,2
    7ccc:	1940004c 	andi	r5,r3,1
    7cd0:	2800081e 	bne	r5,zero,7cf4 <__lo0bits+0x90>
    7cd4:	1806d07a 	srli	r3,r3,1
    7cd8:	1800051e 	bne	r3,zero,7cf0 <__lo0bits+0x8c>
    7cdc:	00800804 	movi	r2,32
    7ce0:	f800283a 	ret
    7ce4:	1806d43a 	srli	r3,r3,16
    7ce8:	00800404 	movi	r2,16
    7cec:	003feb06 	br	7c9c <__reset+0xfbf07c9c>
    7cf0:	10800044 	addi	r2,r2,1
    7cf4:	20c00015 	stw	r3,0(r4)
    7cf8:	f800283a 	ret
    7cfc:	0005883a 	mov	r2,zero
    7d00:	f800283a 	ret
    7d04:	1806d07a 	srli	r3,r3,1
    7d08:	00800044 	movi	r2,1
    7d0c:	20c00015 	stw	r3,0(r4)
    7d10:	f800283a 	ret

00007d14 <__i2b>:
    7d14:	defffd04 	addi	sp,sp,-12
    7d18:	dc000015 	stw	r16,0(sp)
    7d1c:	04000044 	movi	r16,1
    7d20:	dc400115 	stw	r17,4(sp)
    7d24:	2823883a 	mov	r17,r5
    7d28:	800b883a 	mov	r5,r16
    7d2c:	dfc00215 	stw	ra,8(sp)
    7d30:	00079080 	call	7908 <_Balloc>
    7d34:	14400515 	stw	r17,20(r2)
    7d38:	14000415 	stw	r16,16(r2)
    7d3c:	dfc00217 	ldw	ra,8(sp)
    7d40:	dc400117 	ldw	r17,4(sp)
    7d44:	dc000017 	ldw	r16,0(sp)
    7d48:	dec00304 	addi	sp,sp,12
    7d4c:	f800283a 	ret

00007d50 <__multiply>:
    7d50:	defffa04 	addi	sp,sp,-24
    7d54:	dcc00315 	stw	r19,12(sp)
    7d58:	dc800215 	stw	r18,8(sp)
    7d5c:	34c00417 	ldw	r19,16(r6)
    7d60:	2c800417 	ldw	r18,16(r5)
    7d64:	dd000415 	stw	r20,16(sp)
    7d68:	dc400115 	stw	r17,4(sp)
    7d6c:	dfc00515 	stw	ra,20(sp)
    7d70:	dc000015 	stw	r16,0(sp)
    7d74:	2829883a 	mov	r20,r5
    7d78:	3023883a 	mov	r17,r6
    7d7c:	94c0050e 	bge	r18,r19,7d94 <__multiply+0x44>
    7d80:	9007883a 	mov	r3,r18
    7d84:	3029883a 	mov	r20,r6
    7d88:	9825883a 	mov	r18,r19
    7d8c:	2823883a 	mov	r17,r5
    7d90:	1827883a 	mov	r19,r3
    7d94:	a0800217 	ldw	r2,8(r20)
    7d98:	94e1883a 	add	r16,r18,r19
    7d9c:	a1400117 	ldw	r5,4(r20)
    7da0:	1400010e 	bge	r2,r16,7da8 <__multiply+0x58>
    7da4:	29400044 	addi	r5,r5,1
    7da8:	00079080 	call	7908 <_Balloc>
    7dac:	8415883a 	add	r10,r16,r16
    7db0:	12c00504 	addi	r11,r2,20
    7db4:	5295883a 	add	r10,r10,r10
    7db8:	5a95883a 	add	r10,r11,r10
    7dbc:	5807883a 	mov	r3,r11
    7dc0:	5a80032e 	bgeu	r11,r10,7dd0 <__multiply+0x80>
    7dc4:	18000015 	stw	zero,0(r3)
    7dc8:	18c00104 	addi	r3,r3,4
    7dcc:	1abffd36 	bltu	r3,r10,7dc4 <__reset+0xfbf07dc4>
    7dd0:	9ce7883a 	add	r19,r19,r19
    7dd4:	94a5883a 	add	r18,r18,r18
    7dd8:	89800504 	addi	r6,r17,20
    7ddc:	9ce7883a 	add	r19,r19,r19
    7de0:	a3400504 	addi	r13,r20,20
    7de4:	94a5883a 	add	r18,r18,r18
    7de8:	34d9883a 	add	r12,r6,r19
    7dec:	6c93883a 	add	r9,r13,r18
    7df0:	3300422e 	bgeu	r6,r12,7efc <__multiply+0x1ac>
    7df4:	37c00017 	ldw	ra,0(r6)
    7df8:	fbffffcc 	andi	r15,ra,65535
    7dfc:	78001b26 	beq	r15,zero,7e6c <__multiply+0x11c>
    7e00:	5811883a 	mov	r8,r11
    7e04:	681d883a 	mov	r14,r13
    7e08:	000f883a 	mov	r7,zero
    7e0c:	71000017 	ldw	r4,0(r14)
    7e10:	40c00017 	ldw	r3,0(r8)
    7e14:	73800104 	addi	r14,r14,4
    7e18:	217fffcc 	andi	r5,r4,65535
    7e1c:	2bcb383a 	mul	r5,r5,r15
    7e20:	2008d43a 	srli	r4,r4,16
    7e24:	1c7fffcc 	andi	r17,r3,65535
    7e28:	2c4b883a 	add	r5,r5,r17
    7e2c:	29cb883a 	add	r5,r5,r7
    7e30:	23c9383a 	mul	r4,r4,r15
    7e34:	1806d43a 	srli	r3,r3,16
    7e38:	280ed43a 	srli	r7,r5,16
    7e3c:	297fffcc 	andi	r5,r5,65535
    7e40:	20c7883a 	add	r3,r4,r3
    7e44:	19c7883a 	add	r3,r3,r7
    7e48:	1808943a 	slli	r4,r3,16
    7e4c:	4023883a 	mov	r17,r8
    7e50:	180ed43a 	srli	r7,r3,16
    7e54:	214ab03a 	or	r5,r4,r5
    7e58:	41400015 	stw	r5,0(r8)
    7e5c:	42000104 	addi	r8,r8,4
    7e60:	727fea36 	bltu	r14,r9,7e0c <__reset+0xfbf07e0c>
    7e64:	89c00115 	stw	r7,4(r17)
    7e68:	37c00017 	ldw	ra,0(r6)
    7e6c:	f83ed43a 	srli	ra,ra,16
    7e70:	f8001f26 	beq	ra,zero,7ef0 <__multiply+0x1a0>
    7e74:	58c00017 	ldw	r3,0(r11)
    7e78:	681d883a 	mov	r14,r13
    7e7c:	581f883a 	mov	r15,r11
    7e80:	1811883a 	mov	r8,r3
    7e84:	5825883a 	mov	r18,r11
    7e88:	000f883a 	mov	r7,zero
    7e8c:	00000106 	br	7e94 <__multiply+0x144>
    7e90:	8825883a 	mov	r18,r17
    7e94:	7140000b 	ldhu	r5,0(r14)
    7e98:	4010d43a 	srli	r8,r8,16
    7e9c:	193fffcc 	andi	r4,r3,65535
    7ea0:	2fcb383a 	mul	r5,r5,ra
    7ea4:	7bc00104 	addi	r15,r15,4
    7ea8:	73800104 	addi	r14,r14,4
    7eac:	2a0b883a 	add	r5,r5,r8
    7eb0:	29cb883a 	add	r5,r5,r7
    7eb4:	2806943a 	slli	r3,r5,16
    7eb8:	94400104 	addi	r17,r18,4
    7ebc:	280ad43a 	srli	r5,r5,16
    7ec0:	1908b03a 	or	r4,r3,r4
    7ec4:	793fff15 	stw	r4,-4(r15)
    7ec8:	70ffff17 	ldw	r3,-4(r14)
    7ecc:	8a000017 	ldw	r8,0(r17)
    7ed0:	1806d43a 	srli	r3,r3,16
    7ed4:	413fffcc 	andi	r4,r8,65535
    7ed8:	1fc7383a 	mul	r3,r3,ra
    7edc:	1907883a 	add	r3,r3,r4
    7ee0:	1947883a 	add	r3,r3,r5
    7ee4:	180ed43a 	srli	r7,r3,16
    7ee8:	727fe936 	bltu	r14,r9,7e90 <__reset+0xfbf07e90>
    7eec:	90c00115 	stw	r3,4(r18)
    7ef0:	31800104 	addi	r6,r6,4
    7ef4:	5ac00104 	addi	r11,r11,4
    7ef8:	333fbe36 	bltu	r6,r12,7df4 <__reset+0xfbf07df4>
    7efc:	0400090e 	bge	zero,r16,7f24 <__multiply+0x1d4>
    7f00:	50ffff17 	ldw	r3,-4(r10)
    7f04:	52bfff04 	addi	r10,r10,-4
    7f08:	18000326 	beq	r3,zero,7f18 <__multiply+0x1c8>
    7f0c:	00000506 	br	7f24 <__multiply+0x1d4>
    7f10:	50c00017 	ldw	r3,0(r10)
    7f14:	1800031e 	bne	r3,zero,7f24 <__multiply+0x1d4>
    7f18:	843fffc4 	addi	r16,r16,-1
    7f1c:	52bfff04 	addi	r10,r10,-4
    7f20:	803ffb1e 	bne	r16,zero,7f10 <__reset+0xfbf07f10>
    7f24:	14000415 	stw	r16,16(r2)
    7f28:	dfc00517 	ldw	ra,20(sp)
    7f2c:	dd000417 	ldw	r20,16(sp)
    7f30:	dcc00317 	ldw	r19,12(sp)
    7f34:	dc800217 	ldw	r18,8(sp)
    7f38:	dc400117 	ldw	r17,4(sp)
    7f3c:	dc000017 	ldw	r16,0(sp)
    7f40:	dec00604 	addi	sp,sp,24
    7f44:	f800283a 	ret

00007f48 <__pow5mult>:
    7f48:	defffa04 	addi	sp,sp,-24
    7f4c:	dcc00315 	stw	r19,12(sp)
    7f50:	dc000015 	stw	r16,0(sp)
    7f54:	dfc00515 	stw	ra,20(sp)
    7f58:	dd000415 	stw	r20,16(sp)
    7f5c:	dc800215 	stw	r18,8(sp)
    7f60:	dc400115 	stw	r17,4(sp)
    7f64:	308000cc 	andi	r2,r6,3
    7f68:	3021883a 	mov	r16,r6
    7f6c:	2027883a 	mov	r19,r4
    7f70:	10002f1e 	bne	r2,zero,8030 <__pow5mult+0xe8>
    7f74:	2825883a 	mov	r18,r5
    7f78:	8021d0ba 	srai	r16,r16,2
    7f7c:	80001a26 	beq	r16,zero,7fe8 <__pow5mult+0xa0>
    7f80:	9c401217 	ldw	r17,72(r19)
    7f84:	8800061e 	bne	r17,zero,7fa0 <__pow5mult+0x58>
    7f88:	00003406 	br	805c <__pow5mult+0x114>
    7f8c:	8021d07a 	srai	r16,r16,1
    7f90:	80001526 	beq	r16,zero,7fe8 <__pow5mult+0xa0>
    7f94:	88800017 	ldw	r2,0(r17)
    7f98:	10001c26 	beq	r2,zero,800c <__pow5mult+0xc4>
    7f9c:	1023883a 	mov	r17,r2
    7fa0:	8080004c 	andi	r2,r16,1
    7fa4:	103ff926 	beq	r2,zero,7f8c <__reset+0xfbf07f8c>
    7fa8:	880d883a 	mov	r6,r17
    7fac:	900b883a 	mov	r5,r18
    7fb0:	9809883a 	mov	r4,r19
    7fb4:	0007d500 	call	7d50 <__multiply>
    7fb8:	90001b26 	beq	r18,zero,8028 <__pow5mult+0xe0>
    7fbc:	91000117 	ldw	r4,4(r18)
    7fc0:	98c01317 	ldw	r3,76(r19)
    7fc4:	8021d07a 	srai	r16,r16,1
    7fc8:	2109883a 	add	r4,r4,r4
    7fcc:	2109883a 	add	r4,r4,r4
    7fd0:	1907883a 	add	r3,r3,r4
    7fd4:	19000017 	ldw	r4,0(r3)
    7fd8:	91000015 	stw	r4,0(r18)
    7fdc:	1c800015 	stw	r18,0(r3)
    7fe0:	1025883a 	mov	r18,r2
    7fe4:	803feb1e 	bne	r16,zero,7f94 <__reset+0xfbf07f94>
    7fe8:	9005883a 	mov	r2,r18
    7fec:	dfc00517 	ldw	ra,20(sp)
    7ff0:	dd000417 	ldw	r20,16(sp)
    7ff4:	dcc00317 	ldw	r19,12(sp)
    7ff8:	dc800217 	ldw	r18,8(sp)
    7ffc:	dc400117 	ldw	r17,4(sp)
    8000:	dc000017 	ldw	r16,0(sp)
    8004:	dec00604 	addi	sp,sp,24
    8008:	f800283a 	ret
    800c:	880d883a 	mov	r6,r17
    8010:	880b883a 	mov	r5,r17
    8014:	9809883a 	mov	r4,r19
    8018:	0007d500 	call	7d50 <__multiply>
    801c:	88800015 	stw	r2,0(r17)
    8020:	10000015 	stw	zero,0(r2)
    8024:	003fdd06 	br	7f9c <__reset+0xfbf07f9c>
    8028:	1025883a 	mov	r18,r2
    802c:	003fd706 	br	7f8c <__reset+0xfbf07f8c>
    8030:	10bfffc4 	addi	r2,r2,-1
    8034:	1085883a 	add	r2,r2,r2
    8038:	00c00074 	movhi	r3,1
    803c:	18c15704 	addi	r3,r3,1372
    8040:	1085883a 	add	r2,r2,r2
    8044:	1885883a 	add	r2,r3,r2
    8048:	11800017 	ldw	r6,0(r2)
    804c:	000f883a 	mov	r7,zero
    8050:	00079d80 	call	79d8 <__multadd>
    8054:	1025883a 	mov	r18,r2
    8058:	003fc706 	br	7f78 <__reset+0xfbf07f78>
    805c:	05000044 	movi	r20,1
    8060:	a00b883a 	mov	r5,r20
    8064:	9809883a 	mov	r4,r19
    8068:	00079080 	call	7908 <_Balloc>
    806c:	1023883a 	mov	r17,r2
    8070:	00809c44 	movi	r2,625
    8074:	88800515 	stw	r2,20(r17)
    8078:	8d000415 	stw	r20,16(r17)
    807c:	9c401215 	stw	r17,72(r19)
    8080:	88000015 	stw	zero,0(r17)
    8084:	003fc606 	br	7fa0 <__reset+0xfbf07fa0>

00008088 <__lshift>:
    8088:	defff904 	addi	sp,sp,-28
    808c:	dd400515 	stw	r21,20(sp)
    8090:	dcc00315 	stw	r19,12(sp)
    8094:	302bd17a 	srai	r21,r6,5
    8098:	2cc00417 	ldw	r19,16(r5)
    809c:	28800217 	ldw	r2,8(r5)
    80a0:	dd000415 	stw	r20,16(sp)
    80a4:	ace7883a 	add	r19,r21,r19
    80a8:	dc800215 	stw	r18,8(sp)
    80ac:	dc400115 	stw	r17,4(sp)
    80b0:	dc000015 	stw	r16,0(sp)
    80b4:	dfc00615 	stw	ra,24(sp)
    80b8:	9c000044 	addi	r16,r19,1
    80bc:	2823883a 	mov	r17,r5
    80c0:	3029883a 	mov	r20,r6
    80c4:	2025883a 	mov	r18,r4
    80c8:	29400117 	ldw	r5,4(r5)
    80cc:	1400030e 	bge	r2,r16,80dc <__lshift+0x54>
    80d0:	1085883a 	add	r2,r2,r2
    80d4:	29400044 	addi	r5,r5,1
    80d8:	143ffd16 	blt	r2,r16,80d0 <__reset+0xfbf080d0>
    80dc:	9009883a 	mov	r4,r18
    80e0:	00079080 	call	7908 <_Balloc>
    80e4:	10c00504 	addi	r3,r2,20
    80e8:	0540070e 	bge	zero,r21,8108 <__lshift+0x80>
    80ec:	ad6b883a 	add	r21,r21,r21
    80f0:	ad6b883a 	add	r21,r21,r21
    80f4:	1809883a 	mov	r4,r3
    80f8:	1d47883a 	add	r3,r3,r21
    80fc:	20000015 	stw	zero,0(r4)
    8100:	21000104 	addi	r4,r4,4
    8104:	193ffd1e 	bne	r3,r4,80fc <__reset+0xfbf080fc>
    8108:	8a000417 	ldw	r8,16(r17)
    810c:	89000504 	addi	r4,r17,20
    8110:	a18007cc 	andi	r6,r20,31
    8114:	4211883a 	add	r8,r8,r8
    8118:	4211883a 	add	r8,r8,r8
    811c:	2211883a 	add	r8,r4,r8
    8120:	30002326 	beq	r6,zero,81b0 <__lshift+0x128>
    8124:	02400804 	movi	r9,32
    8128:	4993c83a 	sub	r9,r9,r6
    812c:	000b883a 	mov	r5,zero
    8130:	21c00017 	ldw	r7,0(r4)
    8134:	1815883a 	mov	r10,r3
    8138:	18c00104 	addi	r3,r3,4
    813c:	398e983a 	sll	r7,r7,r6
    8140:	21000104 	addi	r4,r4,4
    8144:	394ab03a 	or	r5,r7,r5
    8148:	197fff15 	stw	r5,-4(r3)
    814c:	217fff17 	ldw	r5,-4(r4)
    8150:	2a4ad83a 	srl	r5,r5,r9
    8154:	223ff636 	bltu	r4,r8,8130 <__reset+0xfbf08130>
    8158:	51400115 	stw	r5,4(r10)
    815c:	28001a1e 	bne	r5,zero,81c8 <__lshift+0x140>
    8160:	843fffc4 	addi	r16,r16,-1
    8164:	14000415 	stw	r16,16(r2)
    8168:	88000826 	beq	r17,zero,818c <__lshift+0x104>
    816c:	89000117 	ldw	r4,4(r17)
    8170:	90c01317 	ldw	r3,76(r18)
    8174:	2109883a 	add	r4,r4,r4
    8178:	2109883a 	add	r4,r4,r4
    817c:	1907883a 	add	r3,r3,r4
    8180:	19000017 	ldw	r4,0(r3)
    8184:	89000015 	stw	r4,0(r17)
    8188:	1c400015 	stw	r17,0(r3)
    818c:	dfc00617 	ldw	ra,24(sp)
    8190:	dd400517 	ldw	r21,20(sp)
    8194:	dd000417 	ldw	r20,16(sp)
    8198:	dcc00317 	ldw	r19,12(sp)
    819c:	dc800217 	ldw	r18,8(sp)
    81a0:	dc400117 	ldw	r17,4(sp)
    81a4:	dc000017 	ldw	r16,0(sp)
    81a8:	dec00704 	addi	sp,sp,28
    81ac:	f800283a 	ret
    81b0:	21400017 	ldw	r5,0(r4)
    81b4:	18c00104 	addi	r3,r3,4
    81b8:	21000104 	addi	r4,r4,4
    81bc:	197fff15 	stw	r5,-4(r3)
    81c0:	223ffb36 	bltu	r4,r8,81b0 <__reset+0xfbf081b0>
    81c4:	003fe606 	br	8160 <__reset+0xfbf08160>
    81c8:	9c000084 	addi	r16,r19,2
    81cc:	003fe406 	br	8160 <__reset+0xfbf08160>

000081d0 <__mcmp>:
    81d0:	20800417 	ldw	r2,16(r4)
    81d4:	28c00417 	ldw	r3,16(r5)
    81d8:	10c5c83a 	sub	r2,r2,r3
    81dc:	1000111e 	bne	r2,zero,8224 <__mcmp+0x54>
    81e0:	18c7883a 	add	r3,r3,r3
    81e4:	18c7883a 	add	r3,r3,r3
    81e8:	21000504 	addi	r4,r4,20
    81ec:	29400504 	addi	r5,r5,20
    81f0:	20c5883a 	add	r2,r4,r3
    81f4:	28cb883a 	add	r5,r5,r3
    81f8:	00000106 	br	8200 <__mcmp+0x30>
    81fc:	20800a2e 	bgeu	r4,r2,8228 <__mcmp+0x58>
    8200:	10bfff04 	addi	r2,r2,-4
    8204:	297fff04 	addi	r5,r5,-4
    8208:	11800017 	ldw	r6,0(r2)
    820c:	28c00017 	ldw	r3,0(r5)
    8210:	30fffa26 	beq	r6,r3,81fc <__reset+0xfbf081fc>
    8214:	30c00236 	bltu	r6,r3,8220 <__mcmp+0x50>
    8218:	00800044 	movi	r2,1
    821c:	f800283a 	ret
    8220:	00bfffc4 	movi	r2,-1
    8224:	f800283a 	ret
    8228:	0005883a 	mov	r2,zero
    822c:	f800283a 	ret

00008230 <__mdiff>:
    8230:	28c00417 	ldw	r3,16(r5)
    8234:	30800417 	ldw	r2,16(r6)
    8238:	defffa04 	addi	sp,sp,-24
    823c:	dcc00315 	stw	r19,12(sp)
    8240:	dc800215 	stw	r18,8(sp)
    8244:	dfc00515 	stw	ra,20(sp)
    8248:	dd000415 	stw	r20,16(sp)
    824c:	dc400115 	stw	r17,4(sp)
    8250:	dc000015 	stw	r16,0(sp)
    8254:	1887c83a 	sub	r3,r3,r2
    8258:	2825883a 	mov	r18,r5
    825c:	3027883a 	mov	r19,r6
    8260:	1800141e 	bne	r3,zero,82b4 <__mdiff+0x84>
    8264:	1085883a 	add	r2,r2,r2
    8268:	1085883a 	add	r2,r2,r2
    826c:	2a000504 	addi	r8,r5,20
    8270:	34000504 	addi	r16,r6,20
    8274:	4087883a 	add	r3,r8,r2
    8278:	8085883a 	add	r2,r16,r2
    827c:	00000106 	br	8284 <__mdiff+0x54>
    8280:	40c0592e 	bgeu	r8,r3,83e8 <__mdiff+0x1b8>
    8284:	18ffff04 	addi	r3,r3,-4
    8288:	10bfff04 	addi	r2,r2,-4
    828c:	19c00017 	ldw	r7,0(r3)
    8290:	11400017 	ldw	r5,0(r2)
    8294:	397ffa26 	beq	r7,r5,8280 <__reset+0xfbf08280>
    8298:	3940592e 	bgeu	r7,r5,8400 <__mdiff+0x1d0>
    829c:	9005883a 	mov	r2,r18
    82a0:	4023883a 	mov	r17,r8
    82a4:	9825883a 	mov	r18,r19
    82a8:	05000044 	movi	r20,1
    82ac:	1027883a 	mov	r19,r2
    82b0:	00000406 	br	82c4 <__mdiff+0x94>
    82b4:	18005616 	blt	r3,zero,8410 <__mdiff+0x1e0>
    82b8:	34400504 	addi	r17,r6,20
    82bc:	2c000504 	addi	r16,r5,20
    82c0:	0029883a 	mov	r20,zero
    82c4:	91400117 	ldw	r5,4(r18)
    82c8:	00079080 	call	7908 <_Balloc>
    82cc:	92400417 	ldw	r9,16(r18)
    82d0:	9b000417 	ldw	r12,16(r19)
    82d4:	12c00504 	addi	r11,r2,20
    82d8:	4a51883a 	add	r8,r9,r9
    82dc:	6319883a 	add	r12,r12,r12
    82e0:	4211883a 	add	r8,r8,r8
    82e4:	6319883a 	add	r12,r12,r12
    82e8:	15000315 	stw	r20,12(r2)
    82ec:	8211883a 	add	r8,r16,r8
    82f0:	8b19883a 	add	r12,r17,r12
    82f4:	0007883a 	mov	r3,zero
    82f8:	81400017 	ldw	r5,0(r16)
    82fc:	89c00017 	ldw	r7,0(r17)
    8300:	59800104 	addi	r6,r11,4
    8304:	293fffcc 	andi	r4,r5,65535
    8308:	20c7883a 	add	r3,r4,r3
    830c:	393fffcc 	andi	r4,r7,65535
    8310:	1909c83a 	sub	r4,r3,r4
    8314:	280ad43a 	srli	r5,r5,16
    8318:	380ed43a 	srli	r7,r7,16
    831c:	2007d43a 	srai	r3,r4,16
    8320:	213fffcc 	andi	r4,r4,65535
    8324:	29cbc83a 	sub	r5,r5,r7
    8328:	28c7883a 	add	r3,r5,r3
    832c:	180a943a 	slli	r5,r3,16
    8330:	8c400104 	addi	r17,r17,4
    8334:	84000104 	addi	r16,r16,4
    8338:	2908b03a 	or	r4,r5,r4
    833c:	59000015 	stw	r4,0(r11)
    8340:	1807d43a 	srai	r3,r3,16
    8344:	3015883a 	mov	r10,r6
    8348:	3017883a 	mov	r11,r6
    834c:	8b3fea36 	bltu	r17,r12,82f8 <__reset+0xfbf082f8>
    8350:	8200162e 	bgeu	r16,r8,83ac <__mdiff+0x17c>
    8354:	8017883a 	mov	r11,r16
    8358:	59400017 	ldw	r5,0(r11)
    835c:	31800104 	addi	r6,r6,4
    8360:	5ac00104 	addi	r11,r11,4
    8364:	293fffcc 	andi	r4,r5,65535
    8368:	20c7883a 	add	r3,r4,r3
    836c:	280ed43a 	srli	r7,r5,16
    8370:	180bd43a 	srai	r5,r3,16
    8374:	193fffcc 	andi	r4,r3,65535
    8378:	3947883a 	add	r3,r7,r5
    837c:	180a943a 	slli	r5,r3,16
    8380:	1807d43a 	srai	r3,r3,16
    8384:	2908b03a 	or	r4,r5,r4
    8388:	313fff15 	stw	r4,-4(r6)
    838c:	5a3ff236 	bltu	r11,r8,8358 <__reset+0xfbf08358>
    8390:	0406303a 	nor	r3,zero,r16
    8394:	1a07883a 	add	r3,r3,r8
    8398:	1806d0ba 	srli	r3,r3,2
    839c:	18c00044 	addi	r3,r3,1
    83a0:	18c7883a 	add	r3,r3,r3
    83a4:	18c7883a 	add	r3,r3,r3
    83a8:	50d5883a 	add	r10,r10,r3
    83ac:	50ffff04 	addi	r3,r10,-4
    83b0:	2000041e 	bne	r4,zero,83c4 <__mdiff+0x194>
    83b4:	18ffff04 	addi	r3,r3,-4
    83b8:	19000017 	ldw	r4,0(r3)
    83bc:	4a7fffc4 	addi	r9,r9,-1
    83c0:	203ffc26 	beq	r4,zero,83b4 <__reset+0xfbf083b4>
    83c4:	12400415 	stw	r9,16(r2)
    83c8:	dfc00517 	ldw	ra,20(sp)
    83cc:	dd000417 	ldw	r20,16(sp)
    83d0:	dcc00317 	ldw	r19,12(sp)
    83d4:	dc800217 	ldw	r18,8(sp)
    83d8:	dc400117 	ldw	r17,4(sp)
    83dc:	dc000017 	ldw	r16,0(sp)
    83e0:	dec00604 	addi	sp,sp,24
    83e4:	f800283a 	ret
    83e8:	000b883a 	mov	r5,zero
    83ec:	00079080 	call	7908 <_Balloc>
    83f0:	00c00044 	movi	r3,1
    83f4:	10c00415 	stw	r3,16(r2)
    83f8:	10000515 	stw	zero,20(r2)
    83fc:	003ff206 	br	83c8 <__reset+0xfbf083c8>
    8400:	8023883a 	mov	r17,r16
    8404:	0029883a 	mov	r20,zero
    8408:	4021883a 	mov	r16,r8
    840c:	003fad06 	br	82c4 <__reset+0xfbf082c4>
    8410:	9005883a 	mov	r2,r18
    8414:	94400504 	addi	r17,r18,20
    8418:	9c000504 	addi	r16,r19,20
    841c:	9825883a 	mov	r18,r19
    8420:	05000044 	movi	r20,1
    8424:	1027883a 	mov	r19,r2
    8428:	003fa606 	br	82c4 <__reset+0xfbf082c4>

0000842c <__ulp>:
    842c:	295ffc2c 	andhi	r5,r5,32752
    8430:	00bf3034 	movhi	r2,64704
    8434:	2887883a 	add	r3,r5,r2
    8438:	00c0020e 	bge	zero,r3,8444 <__ulp+0x18>
    843c:	0005883a 	mov	r2,zero
    8440:	f800283a 	ret
    8444:	00c7c83a 	sub	r3,zero,r3
    8448:	1807d53a 	srai	r3,r3,20
    844c:	008004c4 	movi	r2,19
    8450:	10c00b0e 	bge	r2,r3,8480 <__ulp+0x54>
    8454:	18bffb04 	addi	r2,r3,-20
    8458:	01000784 	movi	r4,30
    845c:	0007883a 	mov	r3,zero
    8460:	20800516 	blt	r4,r2,8478 <__ulp+0x4c>
    8464:	010007c4 	movi	r4,31
    8468:	2089c83a 	sub	r4,r4,r2
    846c:	00800044 	movi	r2,1
    8470:	1104983a 	sll	r2,r2,r4
    8474:	f800283a 	ret
    8478:	00800044 	movi	r2,1
    847c:	f800283a 	ret
    8480:	01400234 	movhi	r5,8
    8484:	28c7d83a 	sra	r3,r5,r3
    8488:	0005883a 	mov	r2,zero
    848c:	f800283a 	ret

00008490 <__b2d>:
    8490:	defffa04 	addi	sp,sp,-24
    8494:	dc000015 	stw	r16,0(sp)
    8498:	24000417 	ldw	r16,16(r4)
    849c:	dc400115 	stw	r17,4(sp)
    84a0:	24400504 	addi	r17,r4,20
    84a4:	8421883a 	add	r16,r16,r16
    84a8:	8421883a 	add	r16,r16,r16
    84ac:	8c21883a 	add	r16,r17,r16
    84b0:	dc800215 	stw	r18,8(sp)
    84b4:	84bfff17 	ldw	r18,-4(r16)
    84b8:	dd000415 	stw	r20,16(sp)
    84bc:	dcc00315 	stw	r19,12(sp)
    84c0:	9009883a 	mov	r4,r18
    84c4:	2829883a 	mov	r20,r5
    84c8:	dfc00515 	stw	ra,20(sp)
    84cc:	0007bfc0 	call	7bfc <__hi0bits>
    84d0:	00c00804 	movi	r3,32
    84d4:	1889c83a 	sub	r4,r3,r2
    84d8:	a1000015 	stw	r4,0(r20)
    84dc:	01000284 	movi	r4,10
    84e0:	84ffff04 	addi	r19,r16,-4
    84e4:	20801216 	blt	r4,r2,8530 <__b2d+0xa0>
    84e8:	018002c4 	movi	r6,11
    84ec:	308dc83a 	sub	r6,r6,r2
    84f0:	9186d83a 	srl	r3,r18,r6
    84f4:	18cffc34 	orhi	r3,r3,16368
    84f8:	8cc0212e 	bgeu	r17,r19,8580 <__b2d+0xf0>
    84fc:	813ffe17 	ldw	r4,-8(r16)
    8500:	218cd83a 	srl	r6,r4,r6
    8504:	10800544 	addi	r2,r2,21
    8508:	9084983a 	sll	r2,r18,r2
    850c:	1184b03a 	or	r2,r2,r6
    8510:	dfc00517 	ldw	ra,20(sp)
    8514:	dd000417 	ldw	r20,16(sp)
    8518:	dcc00317 	ldw	r19,12(sp)
    851c:	dc800217 	ldw	r18,8(sp)
    8520:	dc400117 	ldw	r17,4(sp)
    8524:	dc000017 	ldw	r16,0(sp)
    8528:	dec00604 	addi	sp,sp,24
    852c:	f800283a 	ret
    8530:	8cc00f2e 	bgeu	r17,r19,8570 <__b2d+0xe0>
    8534:	117ffd44 	addi	r5,r2,-11
    8538:	80bffe17 	ldw	r2,-8(r16)
    853c:	28000e26 	beq	r5,zero,8578 <__b2d+0xe8>
    8540:	1949c83a 	sub	r4,r3,r5
    8544:	9164983a 	sll	r18,r18,r5
    8548:	1106d83a 	srl	r3,r2,r4
    854c:	81bffe04 	addi	r6,r16,-8
    8550:	948ffc34 	orhi	r18,r18,16368
    8554:	90c6b03a 	or	r3,r18,r3
    8558:	89800e2e 	bgeu	r17,r6,8594 <__b2d+0x104>
    855c:	81bffd17 	ldw	r6,-12(r16)
    8560:	1144983a 	sll	r2,r2,r5
    8564:	310ad83a 	srl	r5,r6,r4
    8568:	2884b03a 	or	r2,r5,r2
    856c:	003fe806 	br	8510 <__reset+0xfbf08510>
    8570:	10bffd44 	addi	r2,r2,-11
    8574:	1000041e 	bne	r2,zero,8588 <__b2d+0xf8>
    8578:	90cffc34 	orhi	r3,r18,16368
    857c:	003fe406 	br	8510 <__reset+0xfbf08510>
    8580:	000d883a 	mov	r6,zero
    8584:	003fdf06 	br	8504 <__reset+0xfbf08504>
    8588:	90a4983a 	sll	r18,r18,r2
    858c:	0005883a 	mov	r2,zero
    8590:	003ff906 	br	8578 <__reset+0xfbf08578>
    8594:	1144983a 	sll	r2,r2,r5
    8598:	003fdd06 	br	8510 <__reset+0xfbf08510>

0000859c <__d2b>:
    859c:	defff804 	addi	sp,sp,-32
    85a0:	dc000215 	stw	r16,8(sp)
    85a4:	3021883a 	mov	r16,r6
    85a8:	dc400315 	stw	r17,12(sp)
    85ac:	8022907a 	slli	r17,r16,1
    85b0:	dd000615 	stw	r20,24(sp)
    85b4:	2829883a 	mov	r20,r5
    85b8:	01400044 	movi	r5,1
    85bc:	dcc00515 	stw	r19,20(sp)
    85c0:	dc800415 	stw	r18,16(sp)
    85c4:	dfc00715 	stw	ra,28(sp)
    85c8:	3825883a 	mov	r18,r7
    85cc:	8822d57a 	srli	r17,r17,21
    85d0:	00079080 	call	7908 <_Balloc>
    85d4:	1027883a 	mov	r19,r2
    85d8:	00800434 	movhi	r2,16
    85dc:	10bfffc4 	addi	r2,r2,-1
    85e0:	808c703a 	and	r6,r16,r2
    85e4:	88000126 	beq	r17,zero,85ec <__d2b+0x50>
    85e8:	31800434 	orhi	r6,r6,16
    85ec:	d9800015 	stw	r6,0(sp)
    85f0:	a0002426 	beq	r20,zero,8684 <__d2b+0xe8>
    85f4:	d9000104 	addi	r4,sp,4
    85f8:	dd000115 	stw	r20,4(sp)
    85fc:	0007c640 	call	7c64 <__lo0bits>
    8600:	d8c00017 	ldw	r3,0(sp)
    8604:	10002f1e 	bne	r2,zero,86c4 <__d2b+0x128>
    8608:	d9000117 	ldw	r4,4(sp)
    860c:	99000515 	stw	r4,20(r19)
    8610:	1821003a 	cmpeq	r16,r3,zero
    8614:	01000084 	movi	r4,2
    8618:	2421c83a 	sub	r16,r4,r16
    861c:	98c00615 	stw	r3,24(r19)
    8620:	9c000415 	stw	r16,16(r19)
    8624:	88001f1e 	bne	r17,zero,86a4 <__d2b+0x108>
    8628:	10bef384 	addi	r2,r2,-1074
    862c:	90800015 	stw	r2,0(r18)
    8630:	00900034 	movhi	r2,16384
    8634:	10bfffc4 	addi	r2,r2,-1
    8638:	8085883a 	add	r2,r16,r2
    863c:	1085883a 	add	r2,r2,r2
    8640:	1085883a 	add	r2,r2,r2
    8644:	9885883a 	add	r2,r19,r2
    8648:	11000517 	ldw	r4,20(r2)
    864c:	8020917a 	slli	r16,r16,5
    8650:	0007bfc0 	call	7bfc <__hi0bits>
    8654:	d8c00817 	ldw	r3,32(sp)
    8658:	8085c83a 	sub	r2,r16,r2
    865c:	18800015 	stw	r2,0(r3)
    8660:	9805883a 	mov	r2,r19
    8664:	dfc00717 	ldw	ra,28(sp)
    8668:	dd000617 	ldw	r20,24(sp)
    866c:	dcc00517 	ldw	r19,20(sp)
    8670:	dc800417 	ldw	r18,16(sp)
    8674:	dc400317 	ldw	r17,12(sp)
    8678:	dc000217 	ldw	r16,8(sp)
    867c:	dec00804 	addi	sp,sp,32
    8680:	f800283a 	ret
    8684:	d809883a 	mov	r4,sp
    8688:	0007c640 	call	7c64 <__lo0bits>
    868c:	d8c00017 	ldw	r3,0(sp)
    8690:	04000044 	movi	r16,1
    8694:	9c000415 	stw	r16,16(r19)
    8698:	98c00515 	stw	r3,20(r19)
    869c:	10800804 	addi	r2,r2,32
    86a0:	883fe126 	beq	r17,zero,8628 <__reset+0xfbf08628>
    86a4:	00c00d44 	movi	r3,53
    86a8:	8c7ef344 	addi	r17,r17,-1075
    86ac:	88a3883a 	add	r17,r17,r2
    86b0:	1885c83a 	sub	r2,r3,r2
    86b4:	d8c00817 	ldw	r3,32(sp)
    86b8:	94400015 	stw	r17,0(r18)
    86bc:	18800015 	stw	r2,0(r3)
    86c0:	003fe706 	br	8660 <__reset+0xfbf08660>
    86c4:	01000804 	movi	r4,32
    86c8:	2089c83a 	sub	r4,r4,r2
    86cc:	1908983a 	sll	r4,r3,r4
    86d0:	d9400117 	ldw	r5,4(sp)
    86d4:	1886d83a 	srl	r3,r3,r2
    86d8:	2148b03a 	or	r4,r4,r5
    86dc:	99000515 	stw	r4,20(r19)
    86e0:	d8c00015 	stw	r3,0(sp)
    86e4:	003fca06 	br	8610 <__reset+0xfbf08610>

000086e8 <__ratio>:
    86e8:	defff904 	addi	sp,sp,-28
    86ec:	dc400315 	stw	r17,12(sp)
    86f0:	2823883a 	mov	r17,r5
    86f4:	d9400104 	addi	r5,sp,4
    86f8:	dfc00615 	stw	ra,24(sp)
    86fc:	dcc00515 	stw	r19,20(sp)
    8700:	dc800415 	stw	r18,16(sp)
    8704:	2027883a 	mov	r19,r4
    8708:	dc000215 	stw	r16,8(sp)
    870c:	00084900 	call	8490 <__b2d>
    8710:	d80b883a 	mov	r5,sp
    8714:	8809883a 	mov	r4,r17
    8718:	1025883a 	mov	r18,r2
    871c:	1821883a 	mov	r16,r3
    8720:	00084900 	call	8490 <__b2d>
    8724:	8a000417 	ldw	r8,16(r17)
    8728:	99000417 	ldw	r4,16(r19)
    872c:	d9400117 	ldw	r5,4(sp)
    8730:	2209c83a 	sub	r4,r4,r8
    8734:	2010917a 	slli	r8,r4,5
    8738:	d9000017 	ldw	r4,0(sp)
    873c:	2909c83a 	sub	r4,r5,r4
    8740:	4109883a 	add	r4,r8,r4
    8744:	01000e0e 	bge	zero,r4,8780 <__ratio+0x98>
    8748:	2008953a 	slli	r4,r4,20
    874c:	2421883a 	add	r16,r4,r16
    8750:	100d883a 	mov	r6,r2
    8754:	180f883a 	mov	r7,r3
    8758:	9009883a 	mov	r4,r18
    875c:	800b883a 	mov	r5,r16
    8760:	000c5d40 	call	c5d4 <__divdf3>
    8764:	dfc00617 	ldw	ra,24(sp)
    8768:	dcc00517 	ldw	r19,20(sp)
    876c:	dc800417 	ldw	r18,16(sp)
    8770:	dc400317 	ldw	r17,12(sp)
    8774:	dc000217 	ldw	r16,8(sp)
    8778:	dec00704 	addi	sp,sp,28
    877c:	f800283a 	ret
    8780:	2008953a 	slli	r4,r4,20
    8784:	1907c83a 	sub	r3,r3,r4
    8788:	003ff106 	br	8750 <__reset+0xfbf08750>

0000878c <_mprec_log10>:
    878c:	defffe04 	addi	sp,sp,-8
    8790:	dc000015 	stw	r16,0(sp)
    8794:	dfc00115 	stw	ra,4(sp)
    8798:	008005c4 	movi	r2,23
    879c:	2021883a 	mov	r16,r4
    87a0:	11000d0e 	bge	r2,r4,87d8 <_mprec_log10+0x4c>
    87a4:	0005883a 	mov	r2,zero
    87a8:	00cffc34 	movhi	r3,16368
    87ac:	843fffc4 	addi	r16,r16,-1
    87b0:	000d883a 	mov	r6,zero
    87b4:	01d00934 	movhi	r7,16420
    87b8:	1009883a 	mov	r4,r2
    87bc:	180b883a 	mov	r5,r3
    87c0:	000d1140 	call	d114 <__muldf3>
    87c4:	803ff91e 	bne	r16,zero,87ac <__reset+0xfbf087ac>
    87c8:	dfc00117 	ldw	ra,4(sp)
    87cc:	dc000017 	ldw	r16,0(sp)
    87d0:	dec00204 	addi	sp,sp,8
    87d4:	f800283a 	ret
    87d8:	202090fa 	slli	r16,r4,3
    87dc:	00800074 	movhi	r2,1
    87e0:	10816e04 	addi	r2,r2,1464
    87e4:	1421883a 	add	r16,r2,r16
    87e8:	80800017 	ldw	r2,0(r16)
    87ec:	80c00117 	ldw	r3,4(r16)
    87f0:	dfc00117 	ldw	ra,4(sp)
    87f4:	dc000017 	ldw	r16,0(sp)
    87f8:	dec00204 	addi	sp,sp,8
    87fc:	f800283a 	ret

00008800 <__copybits>:
    8800:	297fffc4 	addi	r5,r5,-1
    8804:	280fd17a 	srai	r7,r5,5
    8808:	30c00417 	ldw	r3,16(r6)
    880c:	30800504 	addi	r2,r6,20
    8810:	39c00044 	addi	r7,r7,1
    8814:	18c7883a 	add	r3,r3,r3
    8818:	39cf883a 	add	r7,r7,r7
    881c:	18c7883a 	add	r3,r3,r3
    8820:	39cf883a 	add	r7,r7,r7
    8824:	10c7883a 	add	r3,r2,r3
    8828:	21cf883a 	add	r7,r4,r7
    882c:	10c00d2e 	bgeu	r2,r3,8864 <__copybits+0x64>
    8830:	200b883a 	mov	r5,r4
    8834:	12000017 	ldw	r8,0(r2)
    8838:	29400104 	addi	r5,r5,4
    883c:	10800104 	addi	r2,r2,4
    8840:	2a3fff15 	stw	r8,-4(r5)
    8844:	10fffb36 	bltu	r2,r3,8834 <__reset+0xfbf08834>
    8848:	1985c83a 	sub	r2,r3,r6
    884c:	10bffac4 	addi	r2,r2,-21
    8850:	1004d0ba 	srli	r2,r2,2
    8854:	10800044 	addi	r2,r2,1
    8858:	1085883a 	add	r2,r2,r2
    885c:	1085883a 	add	r2,r2,r2
    8860:	2089883a 	add	r4,r4,r2
    8864:	21c0032e 	bgeu	r4,r7,8874 <__copybits+0x74>
    8868:	20000015 	stw	zero,0(r4)
    886c:	21000104 	addi	r4,r4,4
    8870:	21fffd36 	bltu	r4,r7,8868 <__reset+0xfbf08868>
    8874:	f800283a 	ret

00008878 <__any_on>:
    8878:	20c00417 	ldw	r3,16(r4)
    887c:	2805d17a 	srai	r2,r5,5
    8880:	21000504 	addi	r4,r4,20
    8884:	18800d0e 	bge	r3,r2,88bc <__any_on+0x44>
    8888:	18c7883a 	add	r3,r3,r3
    888c:	18c7883a 	add	r3,r3,r3
    8890:	20c7883a 	add	r3,r4,r3
    8894:	20c0192e 	bgeu	r4,r3,88fc <__any_on+0x84>
    8898:	18bfff17 	ldw	r2,-4(r3)
    889c:	18ffff04 	addi	r3,r3,-4
    88a0:	1000041e 	bne	r2,zero,88b4 <__any_on+0x3c>
    88a4:	20c0142e 	bgeu	r4,r3,88f8 <__any_on+0x80>
    88a8:	18ffff04 	addi	r3,r3,-4
    88ac:	19400017 	ldw	r5,0(r3)
    88b0:	283ffc26 	beq	r5,zero,88a4 <__reset+0xfbf088a4>
    88b4:	00800044 	movi	r2,1
    88b8:	f800283a 	ret
    88bc:	10c00a0e 	bge	r2,r3,88e8 <__any_on+0x70>
    88c0:	1085883a 	add	r2,r2,r2
    88c4:	1085883a 	add	r2,r2,r2
    88c8:	294007cc 	andi	r5,r5,31
    88cc:	2087883a 	add	r3,r4,r2
    88d0:	283ff026 	beq	r5,zero,8894 <__reset+0xfbf08894>
    88d4:	19800017 	ldw	r6,0(r3)
    88d8:	3144d83a 	srl	r2,r6,r5
    88dc:	114a983a 	sll	r5,r2,r5
    88e0:	317ff41e 	bne	r6,r5,88b4 <__reset+0xfbf088b4>
    88e4:	003feb06 	br	8894 <__reset+0xfbf08894>
    88e8:	1085883a 	add	r2,r2,r2
    88ec:	1085883a 	add	r2,r2,r2
    88f0:	2087883a 	add	r3,r4,r2
    88f4:	003fe706 	br	8894 <__reset+0xfbf08894>
    88f8:	f800283a 	ret
    88fc:	0005883a 	mov	r2,zero
    8900:	f800283a 	ret

00008904 <_realloc_r>:
    8904:	defff604 	addi	sp,sp,-40
    8908:	dc800215 	stw	r18,8(sp)
    890c:	dfc00915 	stw	ra,36(sp)
    8910:	df000815 	stw	fp,32(sp)
    8914:	ddc00715 	stw	r23,28(sp)
    8918:	dd800615 	stw	r22,24(sp)
    891c:	dd400515 	stw	r21,20(sp)
    8920:	dd000415 	stw	r20,16(sp)
    8924:	dcc00315 	stw	r19,12(sp)
    8928:	dc400115 	stw	r17,4(sp)
    892c:	dc000015 	stw	r16,0(sp)
    8930:	3025883a 	mov	r18,r6
    8934:	2800b726 	beq	r5,zero,8c14 <_realloc_r+0x310>
    8938:	282b883a 	mov	r21,r5
    893c:	2029883a 	mov	r20,r4
    8940:	000e5740 	call	e574 <__malloc_lock>
    8944:	a8bfff17 	ldw	r2,-4(r21)
    8948:	043fff04 	movi	r16,-4
    894c:	90c002c4 	addi	r3,r18,11
    8950:	01000584 	movi	r4,22
    8954:	acfffe04 	addi	r19,r21,-8
    8958:	1420703a 	and	r16,r2,r16
    895c:	20c0332e 	bgeu	r4,r3,8a2c <_realloc_r+0x128>
    8960:	047ffe04 	movi	r17,-8
    8964:	1c62703a 	and	r17,r3,r17
    8968:	8807883a 	mov	r3,r17
    896c:	88005816 	blt	r17,zero,8ad0 <_realloc_r+0x1cc>
    8970:	8c805736 	bltu	r17,r18,8ad0 <_realloc_r+0x1cc>
    8974:	80c0300e 	bge	r16,r3,8a38 <_realloc_r+0x134>
    8978:	07000074 	movhi	fp,1
    897c:	e703ca04 	addi	fp,fp,3880
    8980:	e1c00217 	ldw	r7,8(fp)
    8984:	9c09883a 	add	r4,r19,r16
    8988:	22000117 	ldw	r8,4(r4)
    898c:	21c06326 	beq	r4,r7,8b1c <_realloc_r+0x218>
    8990:	017fff84 	movi	r5,-2
    8994:	414a703a 	and	r5,r8,r5
    8998:	214b883a 	add	r5,r4,r5
    899c:	29800117 	ldw	r6,4(r5)
    89a0:	3180004c 	andi	r6,r6,1
    89a4:	30003f26 	beq	r6,zero,8aa4 <_realloc_r+0x1a0>
    89a8:	1080004c 	andi	r2,r2,1
    89ac:	10008326 	beq	r2,zero,8bbc <_realloc_r+0x2b8>
    89b0:	900b883a 	mov	r5,r18
    89b4:	a009883a 	mov	r4,r20
    89b8:	0006d740 	call	6d74 <_malloc_r>
    89bc:	1025883a 	mov	r18,r2
    89c0:	10011e26 	beq	r2,zero,8e3c <_realloc_r+0x538>
    89c4:	a93fff17 	ldw	r4,-4(r21)
    89c8:	10fffe04 	addi	r3,r2,-8
    89cc:	00bfff84 	movi	r2,-2
    89d0:	2084703a 	and	r2,r4,r2
    89d4:	9885883a 	add	r2,r19,r2
    89d8:	1880ee26 	beq	r3,r2,8d94 <_realloc_r+0x490>
    89dc:	81bfff04 	addi	r6,r16,-4
    89e0:	00800904 	movi	r2,36
    89e4:	1180b836 	bltu	r2,r6,8cc8 <_realloc_r+0x3c4>
    89e8:	00c004c4 	movi	r3,19
    89ec:	19809636 	bltu	r3,r6,8c48 <_realloc_r+0x344>
    89f0:	9005883a 	mov	r2,r18
    89f4:	a807883a 	mov	r3,r21
    89f8:	19000017 	ldw	r4,0(r3)
    89fc:	11000015 	stw	r4,0(r2)
    8a00:	19000117 	ldw	r4,4(r3)
    8a04:	11000115 	stw	r4,4(r2)
    8a08:	18c00217 	ldw	r3,8(r3)
    8a0c:	10c00215 	stw	r3,8(r2)
    8a10:	a80b883a 	mov	r5,r21
    8a14:	a009883a 	mov	r4,r20
    8a18:	00061880 	call	6188 <_free_r>
    8a1c:	a009883a 	mov	r4,r20
    8a20:	000e5780 	call	e578 <__malloc_unlock>
    8a24:	9005883a 	mov	r2,r18
    8a28:	00001206 	br	8a74 <_realloc_r+0x170>
    8a2c:	00c00404 	movi	r3,16
    8a30:	1823883a 	mov	r17,r3
    8a34:	003fce06 	br	8970 <__reset+0xfbf08970>
    8a38:	a825883a 	mov	r18,r21
    8a3c:	8445c83a 	sub	r2,r16,r17
    8a40:	00c003c4 	movi	r3,15
    8a44:	18802636 	bltu	r3,r2,8ae0 <_realloc_r+0x1dc>
    8a48:	99800117 	ldw	r6,4(r19)
    8a4c:	9c07883a 	add	r3,r19,r16
    8a50:	3180004c 	andi	r6,r6,1
    8a54:	3420b03a 	or	r16,r6,r16
    8a58:	9c000115 	stw	r16,4(r19)
    8a5c:	18800117 	ldw	r2,4(r3)
    8a60:	10800054 	ori	r2,r2,1
    8a64:	18800115 	stw	r2,4(r3)
    8a68:	a009883a 	mov	r4,r20
    8a6c:	000e5780 	call	e578 <__malloc_unlock>
    8a70:	9005883a 	mov	r2,r18
    8a74:	dfc00917 	ldw	ra,36(sp)
    8a78:	df000817 	ldw	fp,32(sp)
    8a7c:	ddc00717 	ldw	r23,28(sp)
    8a80:	dd800617 	ldw	r22,24(sp)
    8a84:	dd400517 	ldw	r21,20(sp)
    8a88:	dd000417 	ldw	r20,16(sp)
    8a8c:	dcc00317 	ldw	r19,12(sp)
    8a90:	dc800217 	ldw	r18,8(sp)
    8a94:	dc400117 	ldw	r17,4(sp)
    8a98:	dc000017 	ldw	r16,0(sp)
    8a9c:	dec00a04 	addi	sp,sp,40
    8aa0:	f800283a 	ret
    8aa4:	017fff04 	movi	r5,-4
    8aa8:	414a703a 	and	r5,r8,r5
    8aac:	814d883a 	add	r6,r16,r5
    8ab0:	30c01f16 	blt	r6,r3,8b30 <_realloc_r+0x22c>
    8ab4:	20800317 	ldw	r2,12(r4)
    8ab8:	20c00217 	ldw	r3,8(r4)
    8abc:	a825883a 	mov	r18,r21
    8ac0:	3021883a 	mov	r16,r6
    8ac4:	18800315 	stw	r2,12(r3)
    8ac8:	10c00215 	stw	r3,8(r2)
    8acc:	003fdb06 	br	8a3c <__reset+0xfbf08a3c>
    8ad0:	00800304 	movi	r2,12
    8ad4:	a0800015 	stw	r2,0(r20)
    8ad8:	0005883a 	mov	r2,zero
    8adc:	003fe506 	br	8a74 <__reset+0xfbf08a74>
    8ae0:	98c00117 	ldw	r3,4(r19)
    8ae4:	9c4b883a 	add	r5,r19,r17
    8ae8:	11000054 	ori	r4,r2,1
    8aec:	18c0004c 	andi	r3,r3,1
    8af0:	1c62b03a 	or	r17,r3,r17
    8af4:	9c400115 	stw	r17,4(r19)
    8af8:	29000115 	stw	r4,4(r5)
    8afc:	2885883a 	add	r2,r5,r2
    8b00:	10c00117 	ldw	r3,4(r2)
    8b04:	29400204 	addi	r5,r5,8
    8b08:	a009883a 	mov	r4,r20
    8b0c:	18c00054 	ori	r3,r3,1
    8b10:	10c00115 	stw	r3,4(r2)
    8b14:	00061880 	call	6188 <_free_r>
    8b18:	003fd306 	br	8a68 <__reset+0xfbf08a68>
    8b1c:	017fff04 	movi	r5,-4
    8b20:	414a703a 	and	r5,r8,r5
    8b24:	89800404 	addi	r6,r17,16
    8b28:	8151883a 	add	r8,r16,r5
    8b2c:	4180590e 	bge	r8,r6,8c94 <_realloc_r+0x390>
    8b30:	1080004c 	andi	r2,r2,1
    8b34:	103f9e1e 	bne	r2,zero,89b0 <__reset+0xfbf089b0>
    8b38:	adbffe17 	ldw	r22,-8(r21)
    8b3c:	00bfff04 	movi	r2,-4
    8b40:	9dadc83a 	sub	r22,r19,r22
    8b44:	b1800117 	ldw	r6,4(r22)
    8b48:	3084703a 	and	r2,r6,r2
    8b4c:	20002026 	beq	r4,zero,8bd0 <_realloc_r+0x2cc>
    8b50:	80af883a 	add	r23,r16,r2
    8b54:	b96f883a 	add	r23,r23,r5
    8b58:	21c05f26 	beq	r4,r7,8cd8 <_realloc_r+0x3d4>
    8b5c:	b8c01c16 	blt	r23,r3,8bd0 <_realloc_r+0x2cc>
    8b60:	20800317 	ldw	r2,12(r4)
    8b64:	20c00217 	ldw	r3,8(r4)
    8b68:	81bfff04 	addi	r6,r16,-4
    8b6c:	01000904 	movi	r4,36
    8b70:	18800315 	stw	r2,12(r3)
    8b74:	10c00215 	stw	r3,8(r2)
    8b78:	b0c00217 	ldw	r3,8(r22)
    8b7c:	b0800317 	ldw	r2,12(r22)
    8b80:	b4800204 	addi	r18,r22,8
    8b84:	18800315 	stw	r2,12(r3)
    8b88:	10c00215 	stw	r3,8(r2)
    8b8c:	21801b36 	bltu	r4,r6,8bfc <_realloc_r+0x2f8>
    8b90:	008004c4 	movi	r2,19
    8b94:	1180352e 	bgeu	r2,r6,8c6c <_realloc_r+0x368>
    8b98:	a8800017 	ldw	r2,0(r21)
    8b9c:	b0800215 	stw	r2,8(r22)
    8ba0:	a8800117 	ldw	r2,4(r21)
    8ba4:	b0800315 	stw	r2,12(r22)
    8ba8:	008006c4 	movi	r2,27
    8bac:	11807f36 	bltu	r2,r6,8dac <_realloc_r+0x4a8>
    8bb0:	b0800404 	addi	r2,r22,16
    8bb4:	ad400204 	addi	r21,r21,8
    8bb8:	00002d06 	br	8c70 <_realloc_r+0x36c>
    8bbc:	adbffe17 	ldw	r22,-8(r21)
    8bc0:	00bfff04 	movi	r2,-4
    8bc4:	9dadc83a 	sub	r22,r19,r22
    8bc8:	b1000117 	ldw	r4,4(r22)
    8bcc:	2084703a 	and	r2,r4,r2
    8bd0:	b03f7726 	beq	r22,zero,89b0 <__reset+0xfbf089b0>
    8bd4:	80af883a 	add	r23,r16,r2
    8bd8:	b8ff7516 	blt	r23,r3,89b0 <__reset+0xfbf089b0>
    8bdc:	b0800317 	ldw	r2,12(r22)
    8be0:	b0c00217 	ldw	r3,8(r22)
    8be4:	81bfff04 	addi	r6,r16,-4
    8be8:	01000904 	movi	r4,36
    8bec:	18800315 	stw	r2,12(r3)
    8bf0:	10c00215 	stw	r3,8(r2)
    8bf4:	b4800204 	addi	r18,r22,8
    8bf8:	21bfe52e 	bgeu	r4,r6,8b90 <__reset+0xfbf08b90>
    8bfc:	a80b883a 	mov	r5,r21
    8c00:	9009883a 	mov	r4,r18
    8c04:	00077ac0 	call	77ac <memmove>
    8c08:	b821883a 	mov	r16,r23
    8c0c:	b027883a 	mov	r19,r22
    8c10:	003f8a06 	br	8a3c <__reset+0xfbf08a3c>
    8c14:	300b883a 	mov	r5,r6
    8c18:	dfc00917 	ldw	ra,36(sp)
    8c1c:	df000817 	ldw	fp,32(sp)
    8c20:	ddc00717 	ldw	r23,28(sp)
    8c24:	dd800617 	ldw	r22,24(sp)
    8c28:	dd400517 	ldw	r21,20(sp)
    8c2c:	dd000417 	ldw	r20,16(sp)
    8c30:	dcc00317 	ldw	r19,12(sp)
    8c34:	dc800217 	ldw	r18,8(sp)
    8c38:	dc400117 	ldw	r17,4(sp)
    8c3c:	dc000017 	ldw	r16,0(sp)
    8c40:	dec00a04 	addi	sp,sp,40
    8c44:	0006d741 	jmpi	6d74 <_malloc_r>
    8c48:	a8c00017 	ldw	r3,0(r21)
    8c4c:	90c00015 	stw	r3,0(r18)
    8c50:	a8c00117 	ldw	r3,4(r21)
    8c54:	90c00115 	stw	r3,4(r18)
    8c58:	00c006c4 	movi	r3,27
    8c5c:	19804536 	bltu	r3,r6,8d74 <_realloc_r+0x470>
    8c60:	90800204 	addi	r2,r18,8
    8c64:	a8c00204 	addi	r3,r21,8
    8c68:	003f6306 	br	89f8 <__reset+0xfbf089f8>
    8c6c:	9005883a 	mov	r2,r18
    8c70:	a8c00017 	ldw	r3,0(r21)
    8c74:	b821883a 	mov	r16,r23
    8c78:	b027883a 	mov	r19,r22
    8c7c:	10c00015 	stw	r3,0(r2)
    8c80:	a8c00117 	ldw	r3,4(r21)
    8c84:	10c00115 	stw	r3,4(r2)
    8c88:	a8c00217 	ldw	r3,8(r21)
    8c8c:	10c00215 	stw	r3,8(r2)
    8c90:	003f6a06 	br	8a3c <__reset+0xfbf08a3c>
    8c94:	9c67883a 	add	r19,r19,r17
    8c98:	4445c83a 	sub	r2,r8,r17
    8c9c:	e4c00215 	stw	r19,8(fp)
    8ca0:	10800054 	ori	r2,r2,1
    8ca4:	98800115 	stw	r2,4(r19)
    8ca8:	a8bfff17 	ldw	r2,-4(r21)
    8cac:	a009883a 	mov	r4,r20
    8cb0:	1080004c 	andi	r2,r2,1
    8cb4:	1462b03a 	or	r17,r2,r17
    8cb8:	ac7fff15 	stw	r17,-4(r21)
    8cbc:	000e5780 	call	e578 <__malloc_unlock>
    8cc0:	a805883a 	mov	r2,r21
    8cc4:	003f6b06 	br	8a74 <__reset+0xfbf08a74>
    8cc8:	a80b883a 	mov	r5,r21
    8ccc:	9009883a 	mov	r4,r18
    8cd0:	00077ac0 	call	77ac <memmove>
    8cd4:	003f4e06 	br	8a10 <__reset+0xfbf08a10>
    8cd8:	89000404 	addi	r4,r17,16
    8cdc:	b93fbc16 	blt	r23,r4,8bd0 <__reset+0xfbf08bd0>
    8ce0:	b0800317 	ldw	r2,12(r22)
    8ce4:	b0c00217 	ldw	r3,8(r22)
    8ce8:	81bfff04 	addi	r6,r16,-4
    8cec:	01000904 	movi	r4,36
    8cf0:	18800315 	stw	r2,12(r3)
    8cf4:	10c00215 	stw	r3,8(r2)
    8cf8:	b4800204 	addi	r18,r22,8
    8cfc:	21804336 	bltu	r4,r6,8e0c <_realloc_r+0x508>
    8d00:	008004c4 	movi	r2,19
    8d04:	11803f2e 	bgeu	r2,r6,8e04 <_realloc_r+0x500>
    8d08:	a8800017 	ldw	r2,0(r21)
    8d0c:	b0800215 	stw	r2,8(r22)
    8d10:	a8800117 	ldw	r2,4(r21)
    8d14:	b0800315 	stw	r2,12(r22)
    8d18:	008006c4 	movi	r2,27
    8d1c:	11803f36 	bltu	r2,r6,8e1c <_realloc_r+0x518>
    8d20:	b0800404 	addi	r2,r22,16
    8d24:	ad400204 	addi	r21,r21,8
    8d28:	a8c00017 	ldw	r3,0(r21)
    8d2c:	10c00015 	stw	r3,0(r2)
    8d30:	a8c00117 	ldw	r3,4(r21)
    8d34:	10c00115 	stw	r3,4(r2)
    8d38:	a8c00217 	ldw	r3,8(r21)
    8d3c:	10c00215 	stw	r3,8(r2)
    8d40:	b447883a 	add	r3,r22,r17
    8d44:	bc45c83a 	sub	r2,r23,r17
    8d48:	e0c00215 	stw	r3,8(fp)
    8d4c:	10800054 	ori	r2,r2,1
    8d50:	18800115 	stw	r2,4(r3)
    8d54:	b0800117 	ldw	r2,4(r22)
    8d58:	a009883a 	mov	r4,r20
    8d5c:	1080004c 	andi	r2,r2,1
    8d60:	1462b03a 	or	r17,r2,r17
    8d64:	b4400115 	stw	r17,4(r22)
    8d68:	000e5780 	call	e578 <__malloc_unlock>
    8d6c:	9005883a 	mov	r2,r18
    8d70:	003f4006 	br	8a74 <__reset+0xfbf08a74>
    8d74:	a8c00217 	ldw	r3,8(r21)
    8d78:	90c00215 	stw	r3,8(r18)
    8d7c:	a8c00317 	ldw	r3,12(r21)
    8d80:	90c00315 	stw	r3,12(r18)
    8d84:	30801126 	beq	r6,r2,8dcc <_realloc_r+0x4c8>
    8d88:	90800404 	addi	r2,r18,16
    8d8c:	a8c00404 	addi	r3,r21,16
    8d90:	003f1906 	br	89f8 <__reset+0xfbf089f8>
    8d94:	90ffff17 	ldw	r3,-4(r18)
    8d98:	00bfff04 	movi	r2,-4
    8d9c:	a825883a 	mov	r18,r21
    8da0:	1884703a 	and	r2,r3,r2
    8da4:	80a1883a 	add	r16,r16,r2
    8da8:	003f2406 	br	8a3c <__reset+0xfbf08a3c>
    8dac:	a8800217 	ldw	r2,8(r21)
    8db0:	b0800415 	stw	r2,16(r22)
    8db4:	a8800317 	ldw	r2,12(r21)
    8db8:	b0800515 	stw	r2,20(r22)
    8dbc:	31000a26 	beq	r6,r4,8de8 <_realloc_r+0x4e4>
    8dc0:	b0800604 	addi	r2,r22,24
    8dc4:	ad400404 	addi	r21,r21,16
    8dc8:	003fa906 	br	8c70 <__reset+0xfbf08c70>
    8dcc:	a9000417 	ldw	r4,16(r21)
    8dd0:	90800604 	addi	r2,r18,24
    8dd4:	a8c00604 	addi	r3,r21,24
    8dd8:	91000415 	stw	r4,16(r18)
    8ddc:	a9000517 	ldw	r4,20(r21)
    8de0:	91000515 	stw	r4,20(r18)
    8de4:	003f0406 	br	89f8 <__reset+0xfbf089f8>
    8de8:	a8c00417 	ldw	r3,16(r21)
    8dec:	ad400604 	addi	r21,r21,24
    8df0:	b0800804 	addi	r2,r22,32
    8df4:	b0c00615 	stw	r3,24(r22)
    8df8:	a8ffff17 	ldw	r3,-4(r21)
    8dfc:	b0c00715 	stw	r3,28(r22)
    8e00:	003f9b06 	br	8c70 <__reset+0xfbf08c70>
    8e04:	9005883a 	mov	r2,r18
    8e08:	003fc706 	br	8d28 <__reset+0xfbf08d28>
    8e0c:	a80b883a 	mov	r5,r21
    8e10:	9009883a 	mov	r4,r18
    8e14:	00077ac0 	call	77ac <memmove>
    8e18:	003fc906 	br	8d40 <__reset+0xfbf08d40>
    8e1c:	a8800217 	ldw	r2,8(r21)
    8e20:	b0800415 	stw	r2,16(r22)
    8e24:	a8800317 	ldw	r2,12(r21)
    8e28:	b0800515 	stw	r2,20(r22)
    8e2c:	31000726 	beq	r6,r4,8e4c <_realloc_r+0x548>
    8e30:	b0800604 	addi	r2,r22,24
    8e34:	ad400404 	addi	r21,r21,16
    8e38:	003fbb06 	br	8d28 <__reset+0xfbf08d28>
    8e3c:	a009883a 	mov	r4,r20
    8e40:	000e5780 	call	e578 <__malloc_unlock>
    8e44:	0005883a 	mov	r2,zero
    8e48:	003f0a06 	br	8a74 <__reset+0xfbf08a74>
    8e4c:	a8c00417 	ldw	r3,16(r21)
    8e50:	ad400604 	addi	r21,r21,24
    8e54:	b0800804 	addi	r2,r22,32
    8e58:	b0c00615 	stw	r3,24(r22)
    8e5c:	a8ffff17 	ldw	r3,-4(r21)
    8e60:	b0c00715 	stw	r3,28(r22)
    8e64:	003fb006 	br	8d28 <__reset+0xfbf08d28>

00008e68 <__fpclassifyd>:
    8e68:	00a00034 	movhi	r2,32768
    8e6c:	10bfffc4 	addi	r2,r2,-1
    8e70:	2884703a 	and	r2,r5,r2
    8e74:	10000726 	beq	r2,zero,8e94 <__fpclassifyd+0x2c>
    8e78:	00fffc34 	movhi	r3,65520
    8e7c:	019ff834 	movhi	r6,32736
    8e80:	28c7883a 	add	r3,r5,r3
    8e84:	31bfffc4 	addi	r6,r6,-1
    8e88:	30c00536 	bltu	r6,r3,8ea0 <__fpclassifyd+0x38>
    8e8c:	00800104 	movi	r2,4
    8e90:	f800283a 	ret
    8e94:	2000021e 	bne	r4,zero,8ea0 <__fpclassifyd+0x38>
    8e98:	00800084 	movi	r2,2
    8e9c:	f800283a 	ret
    8ea0:	00dffc34 	movhi	r3,32752
    8ea4:	019ff834 	movhi	r6,32736
    8ea8:	28cb883a 	add	r5,r5,r3
    8eac:	31bfffc4 	addi	r6,r6,-1
    8eb0:	317ff62e 	bgeu	r6,r5,8e8c <__reset+0xfbf08e8c>
    8eb4:	01400434 	movhi	r5,16
    8eb8:	297fffc4 	addi	r5,r5,-1
    8ebc:	28800236 	bltu	r5,r2,8ec8 <__fpclassifyd+0x60>
    8ec0:	008000c4 	movi	r2,3
    8ec4:	f800283a 	ret
    8ec8:	10c00226 	beq	r2,r3,8ed4 <__fpclassifyd+0x6c>
    8ecc:	0005883a 	mov	r2,zero
    8ed0:	f800283a 	ret
    8ed4:	2005003a 	cmpeq	r2,r4,zero
    8ed8:	f800283a 	ret

00008edc <_sbrk_r>:
    8edc:	defffd04 	addi	sp,sp,-12
    8ee0:	dc000015 	stw	r16,0(sp)
    8ee4:	04000074 	movhi	r16,1
    8ee8:	dc400115 	stw	r17,4(sp)
    8eec:	840a0c04 	addi	r16,r16,10288
    8ef0:	2023883a 	mov	r17,r4
    8ef4:	2809883a 	mov	r4,r5
    8ef8:	dfc00215 	stw	ra,8(sp)
    8efc:	80000015 	stw	zero,0(r16)
    8f00:	000e5d00 	call	e5d0 <sbrk>
    8f04:	00ffffc4 	movi	r3,-1
    8f08:	10c00526 	beq	r2,r3,8f20 <_sbrk_r+0x44>
    8f0c:	dfc00217 	ldw	ra,8(sp)
    8f10:	dc400117 	ldw	r17,4(sp)
    8f14:	dc000017 	ldw	r16,0(sp)
    8f18:	dec00304 	addi	sp,sp,12
    8f1c:	f800283a 	ret
    8f20:	80c00017 	ldw	r3,0(r16)
    8f24:	183ff926 	beq	r3,zero,8f0c <__reset+0xfbf08f0c>
    8f28:	88c00015 	stw	r3,0(r17)
    8f2c:	003ff706 	br	8f0c <__reset+0xfbf08f0c>

00008f30 <__sread>:
    8f30:	defffe04 	addi	sp,sp,-8
    8f34:	dc000015 	stw	r16,0(sp)
    8f38:	2821883a 	mov	r16,r5
    8f3c:	2940038f 	ldh	r5,14(r5)
    8f40:	dfc00115 	stw	ra,4(sp)
    8f44:	000ad240 	call	ad24 <_read_r>
    8f48:	10000716 	blt	r2,zero,8f68 <__sread+0x38>
    8f4c:	80c01417 	ldw	r3,80(r16)
    8f50:	1887883a 	add	r3,r3,r2
    8f54:	80c01415 	stw	r3,80(r16)
    8f58:	dfc00117 	ldw	ra,4(sp)
    8f5c:	dc000017 	ldw	r16,0(sp)
    8f60:	dec00204 	addi	sp,sp,8
    8f64:	f800283a 	ret
    8f68:	80c0030b 	ldhu	r3,12(r16)
    8f6c:	18fbffcc 	andi	r3,r3,61439
    8f70:	80c0030d 	sth	r3,12(r16)
    8f74:	dfc00117 	ldw	ra,4(sp)
    8f78:	dc000017 	ldw	r16,0(sp)
    8f7c:	dec00204 	addi	sp,sp,8
    8f80:	f800283a 	ret

00008f84 <__seofread>:
    8f84:	0005883a 	mov	r2,zero
    8f88:	f800283a 	ret

00008f8c <__swrite>:
    8f8c:	2880030b 	ldhu	r2,12(r5)
    8f90:	defffb04 	addi	sp,sp,-20
    8f94:	dcc00315 	stw	r19,12(sp)
    8f98:	dc800215 	stw	r18,8(sp)
    8f9c:	dc400115 	stw	r17,4(sp)
    8fa0:	dc000015 	stw	r16,0(sp)
    8fa4:	dfc00415 	stw	ra,16(sp)
    8fa8:	10c0400c 	andi	r3,r2,256
    8fac:	2821883a 	mov	r16,r5
    8fb0:	2023883a 	mov	r17,r4
    8fb4:	3025883a 	mov	r18,r6
    8fb8:	3827883a 	mov	r19,r7
    8fbc:	18000526 	beq	r3,zero,8fd4 <__swrite+0x48>
    8fc0:	2940038f 	ldh	r5,14(r5)
    8fc4:	01c00084 	movi	r7,2
    8fc8:	000d883a 	mov	r6,zero
    8fcc:	000acc40 	call	acc4 <_lseek_r>
    8fd0:	8080030b 	ldhu	r2,12(r16)
    8fd4:	8140038f 	ldh	r5,14(r16)
    8fd8:	10bbffcc 	andi	r2,r2,61439
    8fdc:	980f883a 	mov	r7,r19
    8fe0:	900d883a 	mov	r6,r18
    8fe4:	8809883a 	mov	r4,r17
    8fe8:	8080030d 	sth	r2,12(r16)
    8fec:	dfc00417 	ldw	ra,16(sp)
    8ff0:	dcc00317 	ldw	r19,12(sp)
    8ff4:	dc800217 	ldw	r18,8(sp)
    8ff8:	dc400117 	ldw	r17,4(sp)
    8ffc:	dc000017 	ldw	r16,0(sp)
    9000:	dec00504 	addi	sp,sp,20
    9004:	000a7901 	jmpi	a790 <_write_r>

00009008 <__sseek>:
    9008:	defffe04 	addi	sp,sp,-8
    900c:	dc000015 	stw	r16,0(sp)
    9010:	2821883a 	mov	r16,r5
    9014:	2940038f 	ldh	r5,14(r5)
    9018:	dfc00115 	stw	ra,4(sp)
    901c:	000acc40 	call	acc4 <_lseek_r>
    9020:	00ffffc4 	movi	r3,-1
    9024:	10c00826 	beq	r2,r3,9048 <__sseek+0x40>
    9028:	80c0030b 	ldhu	r3,12(r16)
    902c:	80801415 	stw	r2,80(r16)
    9030:	18c40014 	ori	r3,r3,4096
    9034:	80c0030d 	sth	r3,12(r16)
    9038:	dfc00117 	ldw	ra,4(sp)
    903c:	dc000017 	ldw	r16,0(sp)
    9040:	dec00204 	addi	sp,sp,8
    9044:	f800283a 	ret
    9048:	80c0030b 	ldhu	r3,12(r16)
    904c:	18fbffcc 	andi	r3,r3,61439
    9050:	80c0030d 	sth	r3,12(r16)
    9054:	dfc00117 	ldw	ra,4(sp)
    9058:	dc000017 	ldw	r16,0(sp)
    905c:	dec00204 	addi	sp,sp,8
    9060:	f800283a 	ret

00009064 <__sclose>:
    9064:	2940038f 	ldh	r5,14(r5)
    9068:	000a7f01 	jmpi	a7f0 <_close_r>

0000906c <strcmp>:
    906c:	2144b03a 	or	r2,r4,r5
    9070:	108000cc 	andi	r2,r2,3
    9074:	1000171e 	bne	r2,zero,90d4 <strcmp+0x68>
    9078:	20800017 	ldw	r2,0(r4)
    907c:	28c00017 	ldw	r3,0(r5)
    9080:	10c0141e 	bne	r2,r3,90d4 <strcmp+0x68>
    9084:	027fbff4 	movhi	r9,65279
    9088:	4a7fbfc4 	addi	r9,r9,-257
    908c:	0086303a 	nor	r3,zero,r2
    9090:	02202074 	movhi	r8,32897
    9094:	1245883a 	add	r2,r2,r9
    9098:	42202004 	addi	r8,r8,-32640
    909c:	10c4703a 	and	r2,r2,r3
    90a0:	1204703a 	and	r2,r2,r8
    90a4:	10000226 	beq	r2,zero,90b0 <strcmp+0x44>
    90a8:	00002306 	br	9138 <strcmp+0xcc>
    90ac:	1000221e 	bne	r2,zero,9138 <strcmp+0xcc>
    90b0:	21000104 	addi	r4,r4,4
    90b4:	20c00017 	ldw	r3,0(r4)
    90b8:	29400104 	addi	r5,r5,4
    90bc:	29800017 	ldw	r6,0(r5)
    90c0:	1a4f883a 	add	r7,r3,r9
    90c4:	00c4303a 	nor	r2,zero,r3
    90c8:	3884703a 	and	r2,r7,r2
    90cc:	1204703a 	and	r2,r2,r8
    90d0:	19bff626 	beq	r3,r6,90ac <__reset+0xfbf090ac>
    90d4:	20800003 	ldbu	r2,0(r4)
    90d8:	10c03fcc 	andi	r3,r2,255
    90dc:	18c0201c 	xori	r3,r3,128
    90e0:	18ffe004 	addi	r3,r3,-128
    90e4:	18000c26 	beq	r3,zero,9118 <strcmp+0xac>
    90e8:	29800007 	ldb	r6,0(r5)
    90ec:	19800326 	beq	r3,r6,90fc <strcmp+0x90>
    90f0:	00001306 	br	9140 <strcmp+0xd4>
    90f4:	29800007 	ldb	r6,0(r5)
    90f8:	11800b1e 	bne	r2,r6,9128 <strcmp+0xbc>
    90fc:	21000044 	addi	r4,r4,1
    9100:	20c00003 	ldbu	r3,0(r4)
    9104:	29400044 	addi	r5,r5,1
    9108:	18803fcc 	andi	r2,r3,255
    910c:	1080201c 	xori	r2,r2,128
    9110:	10bfe004 	addi	r2,r2,-128
    9114:	103ff71e 	bne	r2,zero,90f4 <__reset+0xfbf090f4>
    9118:	0007883a 	mov	r3,zero
    911c:	28800003 	ldbu	r2,0(r5)
    9120:	1885c83a 	sub	r2,r3,r2
    9124:	f800283a 	ret
    9128:	28800003 	ldbu	r2,0(r5)
    912c:	18c03fcc 	andi	r3,r3,255
    9130:	1885c83a 	sub	r2,r3,r2
    9134:	f800283a 	ret
    9138:	0005883a 	mov	r2,zero
    913c:	f800283a 	ret
    9140:	10c03fcc 	andi	r3,r2,255
    9144:	003ff506 	br	911c <__reset+0xfbf0911c>

00009148 <__sprint_r.part.0>:
    9148:	28801917 	ldw	r2,100(r5)
    914c:	defff604 	addi	sp,sp,-40
    9150:	dd400515 	stw	r21,20(sp)
    9154:	dfc00915 	stw	ra,36(sp)
    9158:	df000815 	stw	fp,32(sp)
    915c:	ddc00715 	stw	r23,28(sp)
    9160:	dd800615 	stw	r22,24(sp)
    9164:	dd000415 	stw	r20,16(sp)
    9168:	dcc00315 	stw	r19,12(sp)
    916c:	dc800215 	stw	r18,8(sp)
    9170:	dc400115 	stw	r17,4(sp)
    9174:	dc000015 	stw	r16,0(sp)
    9178:	1088000c 	andi	r2,r2,8192
    917c:	302b883a 	mov	r21,r6
    9180:	10002e26 	beq	r2,zero,923c <__sprint_r.part.0+0xf4>
    9184:	30800217 	ldw	r2,8(r6)
    9188:	35800017 	ldw	r22,0(r6)
    918c:	10002926 	beq	r2,zero,9234 <__sprint_r.part.0+0xec>
    9190:	2827883a 	mov	r19,r5
    9194:	2029883a 	mov	r20,r4
    9198:	b5c00104 	addi	r23,r22,4
    919c:	04bfffc4 	movi	r18,-1
    91a0:	bc400017 	ldw	r17,0(r23)
    91a4:	b4000017 	ldw	r16,0(r22)
    91a8:	0039883a 	mov	fp,zero
    91ac:	8822d0ba 	srli	r17,r17,2
    91b0:	8800031e 	bne	r17,zero,91c0 <__sprint_r.part.0+0x78>
    91b4:	00001806 	br	9218 <__sprint_r.part.0+0xd0>
    91b8:	84000104 	addi	r16,r16,4
    91bc:	8f001526 	beq	r17,fp,9214 <__sprint_r.part.0+0xcc>
    91c0:	81400017 	ldw	r5,0(r16)
    91c4:	980d883a 	mov	r6,r19
    91c8:	a009883a 	mov	r4,r20
    91cc:	000ab700 	call	ab70 <_fputwc_r>
    91d0:	e7000044 	addi	fp,fp,1
    91d4:	14bff81e 	bne	r2,r18,91b8 <__reset+0xfbf091b8>
    91d8:	9005883a 	mov	r2,r18
    91dc:	a8000215 	stw	zero,8(r21)
    91e0:	a8000115 	stw	zero,4(r21)
    91e4:	dfc00917 	ldw	ra,36(sp)
    91e8:	df000817 	ldw	fp,32(sp)
    91ec:	ddc00717 	ldw	r23,28(sp)
    91f0:	dd800617 	ldw	r22,24(sp)
    91f4:	dd400517 	ldw	r21,20(sp)
    91f8:	dd000417 	ldw	r20,16(sp)
    91fc:	dcc00317 	ldw	r19,12(sp)
    9200:	dc800217 	ldw	r18,8(sp)
    9204:	dc400117 	ldw	r17,4(sp)
    9208:	dc000017 	ldw	r16,0(sp)
    920c:	dec00a04 	addi	sp,sp,40
    9210:	f800283a 	ret
    9214:	a8800217 	ldw	r2,8(r21)
    9218:	8c63883a 	add	r17,r17,r17
    921c:	8c63883a 	add	r17,r17,r17
    9220:	1445c83a 	sub	r2,r2,r17
    9224:	a8800215 	stw	r2,8(r21)
    9228:	b5800204 	addi	r22,r22,8
    922c:	bdc00204 	addi	r23,r23,8
    9230:	103fdb1e 	bne	r2,zero,91a0 <__reset+0xfbf091a0>
    9234:	0005883a 	mov	r2,zero
    9238:	003fe806 	br	91dc <__reset+0xfbf091dc>
    923c:	00064980 	call	6498 <__sfvwrite_r>
    9240:	003fe606 	br	91dc <__reset+0xfbf091dc>

00009244 <__sprint_r>:
    9244:	30c00217 	ldw	r3,8(r6)
    9248:	18000126 	beq	r3,zero,9250 <__sprint_r+0xc>
    924c:	00091481 	jmpi	9148 <__sprint_r.part.0>
    9250:	30000115 	stw	zero,4(r6)
    9254:	0005883a 	mov	r2,zero
    9258:	f800283a 	ret

0000925c <___vfiprintf_internal_r>:
    925c:	deffc904 	addi	sp,sp,-220
    9260:	df003515 	stw	fp,212(sp)
    9264:	dd003115 	stw	r20,196(sp)
    9268:	dfc03615 	stw	ra,216(sp)
    926c:	ddc03415 	stw	r23,208(sp)
    9270:	dd803315 	stw	r22,204(sp)
    9274:	dd403215 	stw	r21,200(sp)
    9278:	dcc03015 	stw	r19,192(sp)
    927c:	dc802f15 	stw	r18,188(sp)
    9280:	dc402e15 	stw	r17,184(sp)
    9284:	dc002d15 	stw	r16,180(sp)
    9288:	d9002015 	stw	r4,128(sp)
    928c:	d9c02215 	stw	r7,136(sp)
    9290:	2829883a 	mov	r20,r5
    9294:	3039883a 	mov	fp,r6
    9298:	20000226 	beq	r4,zero,92a4 <___vfiprintf_internal_r+0x48>
    929c:	20800e17 	ldw	r2,56(r4)
    92a0:	1000cf26 	beq	r2,zero,95e0 <___vfiprintf_internal_r+0x384>
    92a4:	a080030b 	ldhu	r2,12(r20)
    92a8:	10c8000c 	andi	r3,r2,8192
    92ac:	1800061e 	bne	r3,zero,92c8 <___vfiprintf_internal_r+0x6c>
    92b0:	a1001917 	ldw	r4,100(r20)
    92b4:	00f7ffc4 	movi	r3,-8193
    92b8:	10880014 	ori	r2,r2,8192
    92bc:	20c6703a 	and	r3,r4,r3
    92c0:	a080030d 	sth	r2,12(r20)
    92c4:	a0c01915 	stw	r3,100(r20)
    92c8:	10c0020c 	andi	r3,r2,8
    92cc:	1800a926 	beq	r3,zero,9574 <___vfiprintf_internal_r+0x318>
    92d0:	a0c00417 	ldw	r3,16(r20)
    92d4:	1800a726 	beq	r3,zero,9574 <___vfiprintf_internal_r+0x318>
    92d8:	1080068c 	andi	r2,r2,26
    92dc:	00c00284 	movi	r3,10
    92e0:	10c0ac26 	beq	r2,r3,9594 <___vfiprintf_internal_r+0x338>
    92e4:	da801a04 	addi	r10,sp,104
    92e8:	da801e15 	stw	r10,120(sp)
    92ec:	d8801e17 	ldw	r2,120(sp)
    92f0:	da8019c4 	addi	r10,sp,103
    92f4:	05800074 	movhi	r22,1
    92f8:	05c00074 	movhi	r23,1
    92fc:	da801f15 	stw	r10,124(sp)
    9300:	1295c83a 	sub	r10,r2,r10
    9304:	b581a404 	addi	r22,r22,1680
    9308:	bdc1a004 	addi	r23,r23,1664
    930c:	dec01a15 	stw	sp,104(sp)
    9310:	d8001c15 	stw	zero,112(sp)
    9314:	d8001b15 	stw	zero,108(sp)
    9318:	d8002615 	stw	zero,152(sp)
    931c:	d8002315 	stw	zero,140(sp)
    9320:	da802715 	stw	r10,156(sp)
    9324:	d811883a 	mov	r8,sp
    9328:	dd002115 	stw	r20,132(sp)
    932c:	e021883a 	mov	r16,fp
    9330:	80800007 	ldb	r2,0(r16)
    9334:	1003ea26 	beq	r2,zero,a2e0 <___vfiprintf_internal_r+0x1084>
    9338:	00c00944 	movi	r3,37
    933c:	8025883a 	mov	r18,r16
    9340:	10c0021e 	bne	r2,r3,934c <___vfiprintf_internal_r+0xf0>
    9344:	00001606 	br	93a0 <___vfiprintf_internal_r+0x144>
    9348:	10c00326 	beq	r2,r3,9358 <___vfiprintf_internal_r+0xfc>
    934c:	94800044 	addi	r18,r18,1
    9350:	90800007 	ldb	r2,0(r18)
    9354:	103ffc1e 	bne	r2,zero,9348 <__reset+0xfbf09348>
    9358:	9423c83a 	sub	r17,r18,r16
    935c:	88001026 	beq	r17,zero,93a0 <___vfiprintf_internal_r+0x144>
    9360:	d8c01c17 	ldw	r3,112(sp)
    9364:	d8801b17 	ldw	r2,108(sp)
    9368:	44000015 	stw	r16,0(r8)
    936c:	88c7883a 	add	r3,r17,r3
    9370:	10800044 	addi	r2,r2,1
    9374:	44400115 	stw	r17,4(r8)
    9378:	d8c01c15 	stw	r3,112(sp)
    937c:	d8801b15 	stw	r2,108(sp)
    9380:	010001c4 	movi	r4,7
    9384:	2080760e 	bge	r4,r2,9560 <___vfiprintf_internal_r+0x304>
    9388:	1803821e 	bne	r3,zero,a194 <___vfiprintf_internal_r+0xf38>
    938c:	da802317 	ldw	r10,140(sp)
    9390:	d8001b15 	stw	zero,108(sp)
    9394:	d811883a 	mov	r8,sp
    9398:	5455883a 	add	r10,r10,r17
    939c:	da802315 	stw	r10,140(sp)
    93a0:	90800007 	ldb	r2,0(r18)
    93a4:	10044626 	beq	r2,zero,a4c0 <___vfiprintf_internal_r+0x1264>
    93a8:	90c00047 	ldb	r3,1(r18)
    93ac:	94000044 	addi	r16,r18,1
    93b0:	d8001d85 	stb	zero,118(sp)
    93b4:	0009883a 	mov	r4,zero
    93b8:	000f883a 	mov	r7,zero
    93bc:	027fffc4 	movi	r9,-1
    93c0:	0023883a 	mov	r17,zero
    93c4:	0029883a 	mov	r20,zero
    93c8:	01401604 	movi	r5,88
    93cc:	01800244 	movi	r6,9
    93d0:	03400a84 	movi	r13,42
    93d4:	03001b04 	movi	r12,108
    93d8:	84000044 	addi	r16,r16,1
    93dc:	18bff804 	addi	r2,r3,-32
    93e0:	28827336 	bltu	r5,r2,9db0 <___vfiprintf_internal_r+0xb54>
    93e4:	100490ba 	slli	r2,r2,2
    93e8:	02800074 	movhi	r10,1
    93ec:	52a4ff04 	addi	r10,r10,-27652
    93f0:	1285883a 	add	r2,r2,r10
    93f4:	10800017 	ldw	r2,0(r2)
    93f8:	1000683a 	jmp	r2
    93fc:	00009ae4 	muli	zero,zero,619
    9400:	00009db0 	cmpltui	zero,zero,630
    9404:	00009db0 	cmpltui	zero,zero,630
    9408:	00009b04 	movi	zero,620
    940c:	00009db0 	cmpltui	zero,zero,630
    9410:	00009db0 	cmpltui	zero,zero,630
    9414:	00009db0 	cmpltui	zero,zero,630
    9418:	00009db0 	cmpltui	zero,zero,630
    941c:	00009db0 	cmpltui	zero,zero,630
    9420:	00009db0 	cmpltui	zero,zero,630
    9424:	00009cec 	andhi	zero,zero,627
    9428:	00009d08 	cmpgei	zero,zero,628
    942c:	00009db0 	cmpltui	zero,zero,630
    9430:	000095f0 	cmpltui	zero,zero,599
    9434:	00009d18 	cmpnei	zero,zero,628
    9438:	00009db0 	cmpltui	zero,zero,630
    943c:	00009b10 	cmplti	zero,zero,620
    9440:	00009b1c 	xori	zero,zero,620
    9444:	00009b1c 	xori	zero,zero,620
    9448:	00009b1c 	xori	zero,zero,620
    944c:	00009b1c 	xori	zero,zero,620
    9450:	00009b1c 	xori	zero,zero,620
    9454:	00009b1c 	xori	zero,zero,620
    9458:	00009b1c 	xori	zero,zero,620
    945c:	00009b1c 	xori	zero,zero,620
    9460:	00009b1c 	xori	zero,zero,620
    9464:	00009db0 	cmpltui	zero,zero,630
    9468:	00009db0 	cmpltui	zero,zero,630
    946c:	00009db0 	cmpltui	zero,zero,630
    9470:	00009db0 	cmpltui	zero,zero,630
    9474:	00009db0 	cmpltui	zero,zero,630
    9478:	00009db0 	cmpltui	zero,zero,630
    947c:	00009db0 	cmpltui	zero,zero,630
    9480:	00009db0 	cmpltui	zero,zero,630
    9484:	00009db0 	cmpltui	zero,zero,630
    9488:	00009db0 	cmpltui	zero,zero,630
    948c:	00009b48 	cmpgei	zero,zero,621
    9490:	00009db0 	cmpltui	zero,zero,630
    9494:	00009db0 	cmpltui	zero,zero,630
    9498:	00009db0 	cmpltui	zero,zero,630
    949c:	00009db0 	cmpltui	zero,zero,630
    94a0:	00009db0 	cmpltui	zero,zero,630
    94a4:	00009db0 	cmpltui	zero,zero,630
    94a8:	00009db0 	cmpltui	zero,zero,630
    94ac:	00009db0 	cmpltui	zero,zero,630
    94b0:	00009db0 	cmpltui	zero,zero,630
    94b4:	00009db0 	cmpltui	zero,zero,630
    94b8:	00009b80 	call	9b8 <default_download_IC_1+0x140>
    94bc:	00009db0 	cmpltui	zero,zero,630
    94c0:	00009db0 	cmpltui	zero,zero,630
    94c4:	00009db0 	cmpltui	zero,zero,630
    94c8:	00009db0 	cmpltui	zero,zero,630
    94cc:	00009db0 	cmpltui	zero,zero,630
    94d0:	00009bd8 	cmpnei	zero,zero,623
    94d4:	00009db0 	cmpltui	zero,zero,630
    94d8:	00009db0 	cmpltui	zero,zero,630
    94dc:	00009c48 	cmpgei	zero,zero,625
    94e0:	00009db0 	cmpltui	zero,zero,630
    94e4:	00009db0 	cmpltui	zero,zero,630
    94e8:	00009db0 	cmpltui	zero,zero,630
    94ec:	00009db0 	cmpltui	zero,zero,630
    94f0:	00009db0 	cmpltui	zero,zero,630
    94f4:	00009db0 	cmpltui	zero,zero,630
    94f8:	00009db0 	cmpltui	zero,zero,630
    94fc:	00009db0 	cmpltui	zero,zero,630
    9500:	00009db0 	cmpltui	zero,zero,630
    9504:	00009db0 	cmpltui	zero,zero,630
    9508:	000099f4 	movhi	zero,615
    950c:	00009a20 	cmpeqi	zero,zero,616
    9510:	00009db0 	cmpltui	zero,zero,630
    9514:	00009db0 	cmpltui	zero,zero,630
    9518:	00009db0 	cmpltui	zero,zero,630
    951c:	00009d58 	cmpnei	zero,zero,629
    9520:	00009a20 	cmpeqi	zero,zero,616
    9524:	00009db0 	cmpltui	zero,zero,630
    9528:	00009db0 	cmpltui	zero,zero,630
    952c:	000098b4 	movhi	zero,610
    9530:	00009db0 	cmpltui	zero,zero,630
    9534:	000098c4 	movi	zero,611
    9538:	00009900 	call	990 <default_download_IC_1+0x118>
    953c:	000095fc 	xorhi	zero,zero,599
    9540:	000098a8 	cmpgeui	zero,zero,610
    9544:	00009db0 	cmpltui	zero,zero,630
    9548:	00009c84 	movi	zero,626
    954c:	00009db0 	cmpltui	zero,zero,630
    9550:	00009cdc 	xori	zero,zero,627
    9554:	00009db0 	cmpltui	zero,zero,630
    9558:	00009db0 	cmpltui	zero,zero,630
    955c:	000099a0 	cmpeqi	zero,zero,614
    9560:	42000204 	addi	r8,r8,8
    9564:	da802317 	ldw	r10,140(sp)
    9568:	5455883a 	add	r10,r10,r17
    956c:	da802315 	stw	r10,140(sp)
    9570:	003f8b06 	br	93a0 <__reset+0xfbf093a0>
    9574:	d9002017 	ldw	r4,128(sp)
    9578:	a00b883a 	mov	r5,r20
    957c:	00040400 	call	4040 <__swsetup_r>
    9580:	1003b11e 	bne	r2,zero,a448 <___vfiprintf_internal_r+0x11ec>
    9584:	a080030b 	ldhu	r2,12(r20)
    9588:	00c00284 	movi	r3,10
    958c:	1080068c 	andi	r2,r2,26
    9590:	10ff541e 	bne	r2,r3,92e4 <__reset+0xfbf092e4>
    9594:	a080038f 	ldh	r2,14(r20)
    9598:	103f5216 	blt	r2,zero,92e4 <__reset+0xfbf092e4>
    959c:	d9c02217 	ldw	r7,136(sp)
    95a0:	d9002017 	ldw	r4,128(sp)
    95a4:	e00d883a 	mov	r6,fp
    95a8:	a00b883a 	mov	r5,r20
    95ac:	000a6d40 	call	a6d4 <__sbprintf>
    95b0:	dfc03617 	ldw	ra,216(sp)
    95b4:	df003517 	ldw	fp,212(sp)
    95b8:	ddc03417 	ldw	r23,208(sp)
    95bc:	dd803317 	ldw	r22,204(sp)
    95c0:	dd403217 	ldw	r21,200(sp)
    95c4:	dd003117 	ldw	r20,196(sp)
    95c8:	dcc03017 	ldw	r19,192(sp)
    95cc:	dc802f17 	ldw	r18,188(sp)
    95d0:	dc402e17 	ldw	r17,184(sp)
    95d4:	dc002d17 	ldw	r16,180(sp)
    95d8:	dec03704 	addi	sp,sp,220
    95dc:	f800283a 	ret
    95e0:	00060140 	call	6014 <__sinit>
    95e4:	003f2f06 	br	92a4 <__reset+0xfbf092a4>
    95e8:	0463c83a 	sub	r17,zero,r17
    95ec:	d8802215 	stw	r2,136(sp)
    95f0:	a5000114 	ori	r20,r20,4
    95f4:	80c00007 	ldb	r3,0(r16)
    95f8:	003f7706 	br	93d8 <__reset+0xfbf093d8>
    95fc:	00800c04 	movi	r2,48
    9600:	da802217 	ldw	r10,136(sp)
    9604:	d8801d05 	stb	r2,116(sp)
    9608:	00801e04 	movi	r2,120
    960c:	d8801d45 	stb	r2,117(sp)
    9610:	d8001d85 	stb	zero,118(sp)
    9614:	50c00104 	addi	r3,r10,4
    9618:	54800017 	ldw	r18,0(r10)
    961c:	0027883a 	mov	r19,zero
    9620:	a0800094 	ori	r2,r20,2
    9624:	48030b16 	blt	r9,zero,a254 <___vfiprintf_internal_r+0xff8>
    9628:	00bfdfc4 	movi	r2,-129
    962c:	a096703a 	and	r11,r20,r2
    9630:	d8c02215 	stw	r3,136(sp)
    9634:	5d000094 	ori	r20,r11,2
    9638:	90032b1e 	bne	r18,zero,a2e8 <___vfiprintf_internal_r+0x108c>
    963c:	00800074 	movhi	r2,1
    9640:	10813f04 	addi	r2,r2,1276
    9644:	d8802615 	stw	r2,152(sp)
    9648:	0039883a 	mov	fp,zero
    964c:	48017b1e 	bne	r9,zero,9c3c <___vfiprintf_internal_r+0x9e0>
    9650:	0013883a 	mov	r9,zero
    9654:	0027883a 	mov	r19,zero
    9658:	dd401a04 	addi	r21,sp,104
    965c:	4825883a 	mov	r18,r9
    9660:	4cc0010e 	bge	r9,r19,9668 <___vfiprintf_internal_r+0x40c>
    9664:	9825883a 	mov	r18,r19
    9668:	e7003fcc 	andi	fp,fp,255
    966c:	e700201c 	xori	fp,fp,128
    9670:	e73fe004 	addi	fp,fp,-128
    9674:	e0000126 	beq	fp,zero,967c <___vfiprintf_internal_r+0x420>
    9678:	94800044 	addi	r18,r18,1
    967c:	a380008c 	andi	r14,r20,2
    9680:	70000126 	beq	r14,zero,9688 <___vfiprintf_internal_r+0x42c>
    9684:	94800084 	addi	r18,r18,2
    9688:	a700210c 	andi	fp,r20,132
    968c:	e001df1e 	bne	fp,zero,9e0c <___vfiprintf_internal_r+0xbb0>
    9690:	8c87c83a 	sub	r3,r17,r18
    9694:	00c1dd0e 	bge	zero,r3,9e0c <___vfiprintf_internal_r+0xbb0>
    9698:	01c00404 	movi	r7,16
    969c:	d8801c17 	ldw	r2,112(sp)
    96a0:	38c3ad0e 	bge	r7,r3,a558 <___vfiprintf_internal_r+0x12fc>
    96a4:	02800074 	movhi	r10,1
    96a8:	5281a404 	addi	r10,r10,1680
    96ac:	dc002915 	stw	r16,164(sp)
    96b0:	d9801b17 	ldw	r6,108(sp)
    96b4:	da802415 	stw	r10,144(sp)
    96b8:	03c001c4 	movi	r15,7
    96bc:	da402515 	stw	r9,148(sp)
    96c0:	db802815 	stw	r14,160(sp)
    96c4:	1821883a 	mov	r16,r3
    96c8:	00000506 	br	96e0 <___vfiprintf_internal_r+0x484>
    96cc:	31400084 	addi	r5,r6,2
    96d0:	42000204 	addi	r8,r8,8
    96d4:	200d883a 	mov	r6,r4
    96d8:	843ffc04 	addi	r16,r16,-16
    96dc:	3c000d0e 	bge	r7,r16,9714 <___vfiprintf_internal_r+0x4b8>
    96e0:	10800404 	addi	r2,r2,16
    96e4:	31000044 	addi	r4,r6,1
    96e8:	45800015 	stw	r22,0(r8)
    96ec:	41c00115 	stw	r7,4(r8)
    96f0:	d8801c15 	stw	r2,112(sp)
    96f4:	d9001b15 	stw	r4,108(sp)
    96f8:	793ff40e 	bge	r15,r4,96cc <__reset+0xfbf096cc>
    96fc:	1001b51e 	bne	r2,zero,9dd4 <___vfiprintf_internal_r+0xb78>
    9700:	843ffc04 	addi	r16,r16,-16
    9704:	000d883a 	mov	r6,zero
    9708:	01400044 	movi	r5,1
    970c:	d811883a 	mov	r8,sp
    9710:	3c3ff316 	blt	r7,r16,96e0 <__reset+0xfbf096e0>
    9714:	8007883a 	mov	r3,r16
    9718:	da402517 	ldw	r9,148(sp)
    971c:	db802817 	ldw	r14,160(sp)
    9720:	dc002917 	ldw	r16,164(sp)
    9724:	da802417 	ldw	r10,144(sp)
    9728:	1885883a 	add	r2,r3,r2
    972c:	40c00115 	stw	r3,4(r8)
    9730:	42800015 	stw	r10,0(r8)
    9734:	d8801c15 	stw	r2,112(sp)
    9738:	d9401b15 	stw	r5,108(sp)
    973c:	00c001c4 	movi	r3,7
    9740:	19426016 	blt	r3,r5,a0c4 <___vfiprintf_internal_r+0xe68>
    9744:	d8c01d87 	ldb	r3,118(sp)
    9748:	42000204 	addi	r8,r8,8
    974c:	29000044 	addi	r4,r5,1
    9750:	1801b31e 	bne	r3,zero,9e20 <___vfiprintf_internal_r+0xbc4>
    9754:	7001c026 	beq	r14,zero,9e58 <___vfiprintf_internal_r+0xbfc>
    9758:	d8c01d04 	addi	r3,sp,116
    975c:	10800084 	addi	r2,r2,2
    9760:	40c00015 	stw	r3,0(r8)
    9764:	00c00084 	movi	r3,2
    9768:	40c00115 	stw	r3,4(r8)
    976c:	d8801c15 	stw	r2,112(sp)
    9770:	d9001b15 	stw	r4,108(sp)
    9774:	00c001c4 	movi	r3,7
    9778:	1902650e 	bge	r3,r4,a110 <___vfiprintf_internal_r+0xeb4>
    977c:	10029a1e 	bne	r2,zero,a1e8 <___vfiprintf_internal_r+0xf8c>
    9780:	00c02004 	movi	r3,128
    9784:	01000044 	movi	r4,1
    9788:	000b883a 	mov	r5,zero
    978c:	d811883a 	mov	r8,sp
    9790:	e0c1b31e 	bne	fp,r3,9e60 <___vfiprintf_internal_r+0xc04>
    9794:	8cb9c83a 	sub	fp,r17,r18
    9798:	0701b10e 	bge	zero,fp,9e60 <___vfiprintf_internal_r+0xc04>
    979c:	01c00404 	movi	r7,16
    97a0:	3f03890e 	bge	r7,fp,a5c8 <___vfiprintf_internal_r+0x136c>
    97a4:	00c00074 	movhi	r3,1
    97a8:	18c1a004 	addi	r3,r3,1664
    97ac:	d8c02415 	stw	r3,144(sp)
    97b0:	8007883a 	mov	r3,r16
    97b4:	034001c4 	movi	r13,7
    97b8:	e021883a 	mov	r16,fp
    97bc:	da402515 	stw	r9,148(sp)
    97c0:	1839883a 	mov	fp,r3
    97c4:	00000506 	br	97dc <___vfiprintf_internal_r+0x580>
    97c8:	29800084 	addi	r6,r5,2
    97cc:	42000204 	addi	r8,r8,8
    97d0:	180b883a 	mov	r5,r3
    97d4:	843ffc04 	addi	r16,r16,-16
    97d8:	3c000d0e 	bge	r7,r16,9810 <___vfiprintf_internal_r+0x5b4>
    97dc:	10800404 	addi	r2,r2,16
    97e0:	28c00044 	addi	r3,r5,1
    97e4:	45c00015 	stw	r23,0(r8)
    97e8:	41c00115 	stw	r7,4(r8)
    97ec:	d8801c15 	stw	r2,112(sp)
    97f0:	d8c01b15 	stw	r3,108(sp)
    97f4:	68fff40e 	bge	r13,r3,97c8 <__reset+0xfbf097c8>
    97f8:	1002241e 	bne	r2,zero,a08c <___vfiprintf_internal_r+0xe30>
    97fc:	843ffc04 	addi	r16,r16,-16
    9800:	01800044 	movi	r6,1
    9804:	000b883a 	mov	r5,zero
    9808:	d811883a 	mov	r8,sp
    980c:	3c3ff316 	blt	r7,r16,97dc <__reset+0xfbf097dc>
    9810:	da402517 	ldw	r9,148(sp)
    9814:	e007883a 	mov	r3,fp
    9818:	8039883a 	mov	fp,r16
    981c:	1821883a 	mov	r16,r3
    9820:	d8c02417 	ldw	r3,144(sp)
    9824:	1705883a 	add	r2,r2,fp
    9828:	47000115 	stw	fp,4(r8)
    982c:	40c00015 	stw	r3,0(r8)
    9830:	d8801c15 	stw	r2,112(sp)
    9834:	d9801b15 	stw	r6,108(sp)
    9838:	00c001c4 	movi	r3,7
    983c:	19827616 	blt	r3,r6,a218 <___vfiprintf_internal_r+0xfbc>
    9840:	4cf9c83a 	sub	fp,r9,r19
    9844:	42000204 	addi	r8,r8,8
    9848:	31000044 	addi	r4,r6,1
    984c:	300b883a 	mov	r5,r6
    9850:	07018516 	blt	zero,fp,9e68 <___vfiprintf_internal_r+0xc0c>
    9854:	9885883a 	add	r2,r19,r2
    9858:	45400015 	stw	r21,0(r8)
    985c:	44c00115 	stw	r19,4(r8)
    9860:	d8801c15 	stw	r2,112(sp)
    9864:	d9001b15 	stw	r4,108(sp)
    9868:	00c001c4 	movi	r3,7
    986c:	1901dd0e 	bge	r3,r4,9fe4 <___vfiprintf_internal_r+0xd88>
    9870:	1002401e 	bne	r2,zero,a174 <___vfiprintf_internal_r+0xf18>
    9874:	d8001b15 	stw	zero,108(sp)
    9878:	a2c0010c 	andi	r11,r20,4
    987c:	58000226 	beq	r11,zero,9888 <___vfiprintf_internal_r+0x62c>
    9880:	8ca7c83a 	sub	r19,r17,r18
    9884:	04c2f216 	blt	zero,r19,a450 <___vfiprintf_internal_r+0x11f4>
    9888:	8c80010e 	bge	r17,r18,9890 <___vfiprintf_internal_r+0x634>
    988c:	9023883a 	mov	r17,r18
    9890:	da802317 	ldw	r10,140(sp)
    9894:	5455883a 	add	r10,r10,r17
    9898:	da802315 	stw	r10,140(sp)
    989c:	d8001b15 	stw	zero,108(sp)
    98a0:	d811883a 	mov	r8,sp
    98a4:	003ea206 	br	9330 <__reset+0xfbf09330>
    98a8:	a5000814 	ori	r20,r20,32
    98ac:	80c00007 	ldb	r3,0(r16)
    98b0:	003ec906 	br	93d8 <__reset+0xfbf093d8>
    98b4:	80c00007 	ldb	r3,0(r16)
    98b8:	1b030926 	beq	r3,r12,a4e0 <___vfiprintf_internal_r+0x1284>
    98bc:	a5000414 	ori	r20,r20,16
    98c0:	003ec506 	br	93d8 <__reset+0xfbf093d8>
    98c4:	21003fcc 	andi	r4,r4,255
    98c8:	20035e1e 	bne	r4,zero,a644 <___vfiprintf_internal_r+0x13e8>
    98cc:	a080080c 	andi	r2,r20,32
    98d0:	1002a526 	beq	r2,zero,a368 <___vfiprintf_internal_r+0x110c>
    98d4:	da802217 	ldw	r10,136(sp)
    98d8:	50800017 	ldw	r2,0(r10)
    98dc:	da802317 	ldw	r10,140(sp)
    98e0:	5007d7fa 	srai	r3,r10,31
    98e4:	da802217 	ldw	r10,136(sp)
    98e8:	10c00115 	stw	r3,4(r2)
    98ec:	52800104 	addi	r10,r10,4
    98f0:	da802215 	stw	r10,136(sp)
    98f4:	da802317 	ldw	r10,140(sp)
    98f8:	12800015 	stw	r10,0(r2)
    98fc:	003e8c06 	br	9330 <__reset+0xfbf09330>
    9900:	21003fcc 	andi	r4,r4,255
    9904:	2003511e 	bne	r4,zero,a64c <___vfiprintf_internal_r+0x13f0>
    9908:	a080080c 	andi	r2,r20,32
    990c:	1000a126 	beq	r2,zero,9b94 <___vfiprintf_internal_r+0x938>
    9910:	da802217 	ldw	r10,136(sp)
    9914:	d8001d85 	stb	zero,118(sp)
    9918:	50800204 	addi	r2,r10,8
    991c:	54800017 	ldw	r18,0(r10)
    9920:	54c00117 	ldw	r19,4(r10)
    9924:	4802b416 	blt	r9,zero,a3f8 <___vfiprintf_internal_r+0x119c>
    9928:	013fdfc4 	movi	r4,-129
    992c:	94c6b03a 	or	r3,r18,r19
    9930:	d8802215 	stw	r2,136(sp)
    9934:	a128703a 	and	r20,r20,r4
    9938:	1800a226 	beq	r3,zero,9bc4 <___vfiprintf_internal_r+0x968>
    993c:	0039883a 	mov	fp,zero
    9940:	dd401a04 	addi	r21,sp,104
    9944:	9006d0fa 	srli	r3,r18,3
    9948:	9808977a 	slli	r4,r19,29
    994c:	9826d0fa 	srli	r19,r19,3
    9950:	948001cc 	andi	r18,r18,7
    9954:	90800c04 	addi	r2,r18,48
    9958:	ad7fffc4 	addi	r21,r21,-1
    995c:	20e4b03a 	or	r18,r4,r3
    9960:	a8800005 	stb	r2,0(r21)
    9964:	94c6b03a 	or	r3,r18,r19
    9968:	183ff61e 	bne	r3,zero,9944 <__reset+0xfbf09944>
    996c:	a0c0004c 	andi	r3,r20,1
    9970:	18005926 	beq	r3,zero,9ad8 <___vfiprintf_internal_r+0x87c>
    9974:	10803fcc 	andi	r2,r2,255
    9978:	1080201c 	xori	r2,r2,128
    997c:	10bfe004 	addi	r2,r2,-128
    9980:	00c00c04 	movi	r3,48
    9984:	10c05426 	beq	r2,r3,9ad8 <___vfiprintf_internal_r+0x87c>
    9988:	da801e17 	ldw	r10,120(sp)
    998c:	a8bfffc4 	addi	r2,r21,-1
    9990:	a8ffffc5 	stb	r3,-1(r21)
    9994:	50a7c83a 	sub	r19,r10,r2
    9998:	102b883a 	mov	r21,r2
    999c:	003f2f06 	br	965c <__reset+0xfbf0965c>
    99a0:	21003fcc 	andi	r4,r4,255
    99a4:	2003421e 	bne	r4,zero,a6b0 <___vfiprintf_internal_r+0x1454>
    99a8:	00800074 	movhi	r2,1
    99ac:	10813f04 	addi	r2,r2,1276
    99b0:	d8802615 	stw	r2,152(sp)
    99b4:	a080080c 	andi	r2,r20,32
    99b8:	1000aa26 	beq	r2,zero,9c64 <___vfiprintf_internal_r+0xa08>
    99bc:	da802217 	ldw	r10,136(sp)
    99c0:	54800017 	ldw	r18,0(r10)
    99c4:	54c00117 	ldw	r19,4(r10)
    99c8:	52800204 	addi	r10,r10,8
    99cc:	da802215 	stw	r10,136(sp)
    99d0:	a080004c 	andi	r2,r20,1
    99d4:	1001d226 	beq	r2,zero,a120 <___vfiprintf_internal_r+0xec4>
    99d8:	94c4b03a 	or	r2,r18,r19
    99dc:	1002351e 	bne	r2,zero,a2b4 <___vfiprintf_internal_r+0x1058>
    99e0:	d8001d85 	stb	zero,118(sp)
    99e4:	48022216 	blt	r9,zero,a270 <___vfiprintf_internal_r+0x1014>
    99e8:	00bfdfc4 	movi	r2,-129
    99ec:	a0a8703a 	and	r20,r20,r2
    99f0:	003f1506 	br	9648 <__reset+0xfbf09648>
    99f4:	da802217 	ldw	r10,136(sp)
    99f8:	04800044 	movi	r18,1
    99fc:	d8001d85 	stb	zero,118(sp)
    9a00:	50800017 	ldw	r2,0(r10)
    9a04:	52800104 	addi	r10,r10,4
    9a08:	da802215 	stw	r10,136(sp)
    9a0c:	d8801005 	stb	r2,64(sp)
    9a10:	9027883a 	mov	r19,r18
    9a14:	dd401004 	addi	r21,sp,64
    9a18:	0013883a 	mov	r9,zero
    9a1c:	003f1706 	br	967c <__reset+0xfbf0967c>
    9a20:	21003fcc 	andi	r4,r4,255
    9a24:	2003201e 	bne	r4,zero,a6a8 <___vfiprintf_internal_r+0x144c>
    9a28:	a080080c 	andi	r2,r20,32
    9a2c:	10004b26 	beq	r2,zero,9b5c <___vfiprintf_internal_r+0x900>
    9a30:	da802217 	ldw	r10,136(sp)
    9a34:	50800117 	ldw	r2,4(r10)
    9a38:	54800017 	ldw	r18,0(r10)
    9a3c:	52800204 	addi	r10,r10,8
    9a40:	da802215 	stw	r10,136(sp)
    9a44:	1027883a 	mov	r19,r2
    9a48:	10022c16 	blt	r2,zero,a2fc <___vfiprintf_internal_r+0x10a0>
    9a4c:	df001d83 	ldbu	fp,118(sp)
    9a50:	48007216 	blt	r9,zero,9c1c <___vfiprintf_internal_r+0x9c0>
    9a54:	00ffdfc4 	movi	r3,-129
    9a58:	94c4b03a 	or	r2,r18,r19
    9a5c:	a0e8703a 	and	r20,r20,r3
    9a60:	1000cc26 	beq	r2,zero,9d94 <___vfiprintf_internal_r+0xb38>
    9a64:	98021026 	beq	r19,zero,a2a8 <___vfiprintf_internal_r+0x104c>
    9a68:	dc402415 	stw	r17,144(sp)
    9a6c:	dc002515 	stw	r16,148(sp)
    9a70:	9823883a 	mov	r17,r19
    9a74:	9021883a 	mov	r16,r18
    9a78:	dd401a04 	addi	r21,sp,104
    9a7c:	4825883a 	mov	r18,r9
    9a80:	4027883a 	mov	r19,r8
    9a84:	8009883a 	mov	r4,r16
    9a88:	880b883a 	mov	r5,r17
    9a8c:	01800284 	movi	r6,10
    9a90:	000f883a 	mov	r7,zero
    9a94:	000b63c0 	call	b63c <__umoddi3>
    9a98:	10800c04 	addi	r2,r2,48
    9a9c:	ad7fffc4 	addi	r21,r21,-1
    9aa0:	8009883a 	mov	r4,r16
    9aa4:	880b883a 	mov	r5,r17
    9aa8:	a8800005 	stb	r2,0(r21)
    9aac:	01800284 	movi	r6,10
    9ab0:	000f883a 	mov	r7,zero
    9ab4:	000b0c40 	call	b0c4 <__udivdi3>
    9ab8:	1021883a 	mov	r16,r2
    9abc:	10c4b03a 	or	r2,r2,r3
    9ac0:	1823883a 	mov	r17,r3
    9ac4:	103fef1e 	bne	r2,zero,9a84 <__reset+0xfbf09a84>
    9ac8:	dc402417 	ldw	r17,144(sp)
    9acc:	dc002517 	ldw	r16,148(sp)
    9ad0:	9013883a 	mov	r9,r18
    9ad4:	9811883a 	mov	r8,r19
    9ad8:	da801e17 	ldw	r10,120(sp)
    9adc:	5567c83a 	sub	r19,r10,r21
    9ae0:	003ede06 	br	965c <__reset+0xfbf0965c>
    9ae4:	38803fcc 	andi	r2,r7,255
    9ae8:	1080201c 	xori	r2,r2,128
    9aec:	10bfe004 	addi	r2,r2,-128
    9af0:	1002371e 	bne	r2,zero,a3d0 <___vfiprintf_internal_r+0x1174>
    9af4:	01000044 	movi	r4,1
    9af8:	01c00804 	movi	r7,32
    9afc:	80c00007 	ldb	r3,0(r16)
    9b00:	003e3506 	br	93d8 <__reset+0xfbf093d8>
    9b04:	a5000054 	ori	r20,r20,1
    9b08:	80c00007 	ldb	r3,0(r16)
    9b0c:	003e3206 	br	93d8 <__reset+0xfbf093d8>
    9b10:	a5002014 	ori	r20,r20,128
    9b14:	80c00007 	ldb	r3,0(r16)
    9b18:	003e2f06 	br	93d8 <__reset+0xfbf093d8>
    9b1c:	8015883a 	mov	r10,r16
    9b20:	0023883a 	mov	r17,zero
    9b24:	18bff404 	addi	r2,r3,-48
    9b28:	50c00007 	ldb	r3,0(r10)
    9b2c:	8c4002a4 	muli	r17,r17,10
    9b30:	84000044 	addi	r16,r16,1
    9b34:	8015883a 	mov	r10,r16
    9b38:	1463883a 	add	r17,r2,r17
    9b3c:	18bff404 	addi	r2,r3,-48
    9b40:	30bff92e 	bgeu	r6,r2,9b28 <__reset+0xfbf09b28>
    9b44:	003e2506 	br	93dc <__reset+0xfbf093dc>
    9b48:	21003fcc 	andi	r4,r4,255
    9b4c:	2002d41e 	bne	r4,zero,a6a0 <___vfiprintf_internal_r+0x1444>
    9b50:	a5000414 	ori	r20,r20,16
    9b54:	a080080c 	andi	r2,r20,32
    9b58:	103fb51e 	bne	r2,zero,9a30 <__reset+0xfbf09a30>
    9b5c:	a080040c 	andi	r2,r20,16
    9b60:	1001f826 	beq	r2,zero,a344 <___vfiprintf_internal_r+0x10e8>
    9b64:	da802217 	ldw	r10,136(sp)
    9b68:	54800017 	ldw	r18,0(r10)
    9b6c:	52800104 	addi	r10,r10,4
    9b70:	da802215 	stw	r10,136(sp)
    9b74:	9027d7fa 	srai	r19,r18,31
    9b78:	9805883a 	mov	r2,r19
    9b7c:	003fb206 	br	9a48 <__reset+0xfbf09a48>
    9b80:	21003fcc 	andi	r4,r4,255
    9b84:	2002c41e 	bne	r4,zero,a698 <___vfiprintf_internal_r+0x143c>
    9b88:	a5000414 	ori	r20,r20,16
    9b8c:	a080080c 	andi	r2,r20,32
    9b90:	103f5f1e 	bne	r2,zero,9910 <__reset+0xfbf09910>
    9b94:	a080040c 	andi	r2,r20,16
    9b98:	10020f26 	beq	r2,zero,a3d8 <___vfiprintf_internal_r+0x117c>
    9b9c:	da802217 	ldw	r10,136(sp)
    9ba0:	d8001d85 	stb	zero,118(sp)
    9ba4:	0027883a 	mov	r19,zero
    9ba8:	50800104 	addi	r2,r10,4
    9bac:	54800017 	ldw	r18,0(r10)
    9bb0:	48021116 	blt	r9,zero,a3f8 <___vfiprintf_internal_r+0x119c>
    9bb4:	00ffdfc4 	movi	r3,-129
    9bb8:	d8802215 	stw	r2,136(sp)
    9bbc:	a0e8703a 	and	r20,r20,r3
    9bc0:	903f5e1e 	bne	r18,zero,993c <__reset+0xfbf0993c>
    9bc4:	0039883a 	mov	fp,zero
    9bc8:	4802a626 	beq	r9,zero,a664 <___vfiprintf_internal_r+0x1408>
    9bcc:	0025883a 	mov	r18,zero
    9bd0:	0027883a 	mov	r19,zero
    9bd4:	003f5a06 	br	9940 <__reset+0xfbf09940>
    9bd8:	21003fcc 	andi	r4,r4,255
    9bdc:	20029f1e 	bne	r4,zero,a65c <___vfiprintf_internal_r+0x1400>
    9be0:	a5000414 	ori	r20,r20,16
    9be4:	a080080c 	andi	r2,r20,32
    9be8:	10005e1e 	bne	r2,zero,9d64 <___vfiprintf_internal_r+0xb08>
    9bec:	a080040c 	andi	r2,r20,16
    9bf0:	1001a21e 	bne	r2,zero,a27c <___vfiprintf_internal_r+0x1020>
    9bf4:	a080100c 	andi	r2,r20,64
    9bf8:	d8001d85 	stb	zero,118(sp)
    9bfc:	da802217 	ldw	r10,136(sp)
    9c00:	1002231e 	bne	r2,zero,a490 <___vfiprintf_internal_r+0x1234>
    9c04:	50800104 	addi	r2,r10,4
    9c08:	54800017 	ldw	r18,0(r10)
    9c0c:	0027883a 	mov	r19,zero
    9c10:	4801a00e 	bge	r9,zero,a294 <___vfiprintf_internal_r+0x1038>
    9c14:	d8802215 	stw	r2,136(sp)
    9c18:	0039883a 	mov	fp,zero
    9c1c:	94c4b03a 	or	r2,r18,r19
    9c20:	103f901e 	bne	r2,zero,9a64 <__reset+0xfbf09a64>
    9c24:	00800044 	movi	r2,1
    9c28:	10803fcc 	andi	r2,r2,255
    9c2c:	00c00044 	movi	r3,1
    9c30:	10c05926 	beq	r2,r3,9d98 <___vfiprintf_internal_r+0xb3c>
    9c34:	00c00084 	movi	r3,2
    9c38:	10ffe41e 	bne	r2,r3,9bcc <__reset+0xfbf09bcc>
    9c3c:	0025883a 	mov	r18,zero
    9c40:	0027883a 	mov	r19,zero
    9c44:	00013d06 	br	a13c <___vfiprintf_internal_r+0xee0>
    9c48:	21003fcc 	andi	r4,r4,255
    9c4c:	2002811e 	bne	r4,zero,a654 <___vfiprintf_internal_r+0x13f8>
    9c50:	00800074 	movhi	r2,1
    9c54:	10813a04 	addi	r2,r2,1256
    9c58:	d8802615 	stw	r2,152(sp)
    9c5c:	a080080c 	andi	r2,r20,32
    9c60:	103f561e 	bne	r2,zero,99bc <__reset+0xfbf099bc>
    9c64:	a080040c 	andi	r2,r20,16
    9c68:	1001d126 	beq	r2,zero,a3b0 <___vfiprintf_internal_r+0x1154>
    9c6c:	da802217 	ldw	r10,136(sp)
    9c70:	0027883a 	mov	r19,zero
    9c74:	54800017 	ldw	r18,0(r10)
    9c78:	52800104 	addi	r10,r10,4
    9c7c:	da802215 	stw	r10,136(sp)
    9c80:	003f5306 	br	99d0 <__reset+0xfbf099d0>
    9c84:	da802217 	ldw	r10,136(sp)
    9c88:	d8001d85 	stb	zero,118(sp)
    9c8c:	55400017 	ldw	r21,0(r10)
    9c90:	50c00104 	addi	r3,r10,4
    9c94:	a8024226 	beq	r21,zero,a5a0 <___vfiprintf_internal_r+0x1344>
    9c98:	48021816 	blt	r9,zero,a4fc <___vfiprintf_internal_r+0x12a0>
    9c9c:	480d883a 	mov	r6,r9
    9ca0:	000b883a 	mov	r5,zero
    9ca4:	a809883a 	mov	r4,r21
    9ca8:	d8c02a15 	stw	r3,168(sp)
    9cac:	da002b15 	stw	r8,172(sp)
    9cb0:	da402c15 	stw	r9,176(sp)
    9cb4:	00075800 	call	7580 <memchr>
    9cb8:	d8c02a17 	ldw	r3,168(sp)
    9cbc:	da002b17 	ldw	r8,172(sp)
    9cc0:	da402c17 	ldw	r9,176(sp)
    9cc4:	10024826 	beq	r2,zero,a5e8 <___vfiprintf_internal_r+0x138c>
    9cc8:	1567c83a 	sub	r19,r2,r21
    9ccc:	df001d83 	ldbu	fp,118(sp)
    9cd0:	d8c02215 	stw	r3,136(sp)
    9cd4:	0013883a 	mov	r9,zero
    9cd8:	003e6006 	br	965c <__reset+0xfbf0965c>
    9cdc:	21003fcc 	andi	r4,r4,255
    9ce0:	203fc026 	beq	r4,zero,9be4 <__reset+0xfbf09be4>
    9ce4:	d9c01d85 	stb	r7,118(sp)
    9ce8:	003fbe06 	br	9be4 <__reset+0xfbf09be4>
    9cec:	da802217 	ldw	r10,136(sp)
    9cf0:	54400017 	ldw	r17,0(r10)
    9cf4:	50800104 	addi	r2,r10,4
    9cf8:	883e3b16 	blt	r17,zero,95e8 <__reset+0xfbf095e8>
    9cfc:	d8802215 	stw	r2,136(sp)
    9d00:	80c00007 	ldb	r3,0(r16)
    9d04:	003db406 	br	93d8 <__reset+0xfbf093d8>
    9d08:	01000044 	movi	r4,1
    9d0c:	01c00ac4 	movi	r7,43
    9d10:	80c00007 	ldb	r3,0(r16)
    9d14:	003db006 	br	93d8 <__reset+0xfbf093d8>
    9d18:	80c00007 	ldb	r3,0(r16)
    9d1c:	82800044 	addi	r10,r16,1
    9d20:	1b423c26 	beq	r3,r13,a614 <___vfiprintf_internal_r+0x13b8>
    9d24:	18bff404 	addi	r2,r3,-48
    9d28:	0013883a 	mov	r9,zero
    9d2c:	30822b36 	bltu	r6,r2,a5dc <___vfiprintf_internal_r+0x1380>
    9d30:	50c00007 	ldb	r3,0(r10)
    9d34:	4a4002a4 	muli	r9,r9,10
    9d38:	54000044 	addi	r16,r10,1
    9d3c:	8015883a 	mov	r10,r16
    9d40:	4893883a 	add	r9,r9,r2
    9d44:	18bff404 	addi	r2,r3,-48
    9d48:	30bff92e 	bgeu	r6,r2,9d30 <__reset+0xfbf09d30>
    9d4c:	483da30e 	bge	r9,zero,93dc <__reset+0xfbf093dc>
    9d50:	027fffc4 	movi	r9,-1
    9d54:	003da106 	br	93dc <__reset+0xfbf093dc>
    9d58:	a5001014 	ori	r20,r20,64
    9d5c:	80c00007 	ldb	r3,0(r16)
    9d60:	003d9d06 	br	93d8 <__reset+0xfbf093d8>
    9d64:	da802217 	ldw	r10,136(sp)
    9d68:	d8001d85 	stb	zero,118(sp)
    9d6c:	50c00204 	addi	r3,r10,8
    9d70:	54800017 	ldw	r18,0(r10)
    9d74:	54c00117 	ldw	r19,4(r10)
    9d78:	4801ca16 	blt	r9,zero,a4a4 <___vfiprintf_internal_r+0x1248>
    9d7c:	013fdfc4 	movi	r4,-129
    9d80:	94c4b03a 	or	r2,r18,r19
    9d84:	d8c02215 	stw	r3,136(sp)
    9d88:	a128703a 	and	r20,r20,r4
    9d8c:	0039883a 	mov	fp,zero
    9d90:	103f341e 	bne	r2,zero,9a64 <__reset+0xfbf09a64>
    9d94:	483e2e26 	beq	r9,zero,9650 <__reset+0xfbf09650>
    9d98:	0025883a 	mov	r18,zero
    9d9c:	94800c04 	addi	r18,r18,48
    9da0:	dc8019c5 	stb	r18,103(sp)
    9da4:	dcc02717 	ldw	r19,156(sp)
    9da8:	dd4019c4 	addi	r21,sp,103
    9dac:	003e2b06 	br	965c <__reset+0xfbf0965c>
    9db0:	21003fcc 	andi	r4,r4,255
    9db4:	2002361e 	bne	r4,zero,a690 <___vfiprintf_internal_r+0x1434>
    9db8:	1801c126 	beq	r3,zero,a4c0 <___vfiprintf_internal_r+0x1264>
    9dbc:	04800044 	movi	r18,1
    9dc0:	d8c01005 	stb	r3,64(sp)
    9dc4:	d8001d85 	stb	zero,118(sp)
    9dc8:	9027883a 	mov	r19,r18
    9dcc:	dd401004 	addi	r21,sp,64
    9dd0:	003f1106 	br	9a18 <__reset+0xfbf09a18>
    9dd4:	d9402117 	ldw	r5,132(sp)
    9dd8:	d9002017 	ldw	r4,128(sp)
    9ddc:	d9801a04 	addi	r6,sp,104
    9de0:	d9c02b15 	stw	r7,172(sp)
    9de4:	dbc02a15 	stw	r15,168(sp)
    9de8:	00091480 	call	9148 <__sprint_r.part.0>
    9dec:	d9c02b17 	ldw	r7,172(sp)
    9df0:	dbc02a17 	ldw	r15,168(sp)
    9df4:	10006d1e 	bne	r2,zero,9fac <___vfiprintf_internal_r+0xd50>
    9df8:	d9801b17 	ldw	r6,108(sp)
    9dfc:	d8801c17 	ldw	r2,112(sp)
    9e00:	d811883a 	mov	r8,sp
    9e04:	31400044 	addi	r5,r6,1
    9e08:	003e3306 	br	96d8 <__reset+0xfbf096d8>
    9e0c:	d9401b17 	ldw	r5,108(sp)
    9e10:	d8801c17 	ldw	r2,112(sp)
    9e14:	29000044 	addi	r4,r5,1
    9e18:	d8c01d87 	ldb	r3,118(sp)
    9e1c:	183e4d26 	beq	r3,zero,9754 <__reset+0xfbf09754>
    9e20:	00c00044 	movi	r3,1
    9e24:	d9401d84 	addi	r5,sp,118
    9e28:	10c5883a 	add	r2,r2,r3
    9e2c:	41400015 	stw	r5,0(r8)
    9e30:	40c00115 	stw	r3,4(r8)
    9e34:	d8801c15 	stw	r2,112(sp)
    9e38:	d9001b15 	stw	r4,108(sp)
    9e3c:	014001c4 	movi	r5,7
    9e40:	2900a90e 	bge	r5,r4,a0e8 <___vfiprintf_internal_r+0xe8c>
    9e44:	1000da1e 	bne	r2,zero,a1b0 <___vfiprintf_internal_r+0xf54>
    9e48:	7000ab1e 	bne	r14,zero,a0f8 <___vfiprintf_internal_r+0xe9c>
    9e4c:	000b883a 	mov	r5,zero
    9e50:	1809883a 	mov	r4,r3
    9e54:	d811883a 	mov	r8,sp
    9e58:	00c02004 	movi	r3,128
    9e5c:	e0fe4d26 	beq	fp,r3,9794 <__reset+0xfbf09794>
    9e60:	4cf9c83a 	sub	fp,r9,r19
    9e64:	073e7b0e 	bge	zero,fp,9854 <__reset+0xfbf09854>
    9e68:	01c00404 	movi	r7,16
    9e6c:	3f01900e 	bge	r7,fp,a4b0 <___vfiprintf_internal_r+0x1254>
    9e70:	00c00074 	movhi	r3,1
    9e74:	18c1a004 	addi	r3,r3,1664
    9e78:	d8c02415 	stw	r3,144(sp)
    9e7c:	034001c4 	movi	r13,7
    9e80:	00000506 	br	9e98 <___vfiprintf_internal_r+0xc3c>
    9e84:	29000084 	addi	r4,r5,2
    9e88:	42000204 	addi	r8,r8,8
    9e8c:	180b883a 	mov	r5,r3
    9e90:	e73ffc04 	addi	fp,fp,-16
    9e94:	3f000d0e 	bge	r7,fp,9ecc <___vfiprintf_internal_r+0xc70>
    9e98:	10800404 	addi	r2,r2,16
    9e9c:	28c00044 	addi	r3,r5,1
    9ea0:	45c00015 	stw	r23,0(r8)
    9ea4:	41c00115 	stw	r7,4(r8)
    9ea8:	d8801c15 	stw	r2,112(sp)
    9eac:	d8c01b15 	stw	r3,108(sp)
    9eb0:	68fff40e 	bge	r13,r3,9e84 <__reset+0xfbf09e84>
    9eb4:	1000101e 	bne	r2,zero,9ef8 <___vfiprintf_internal_r+0xc9c>
    9eb8:	e73ffc04 	addi	fp,fp,-16
    9ebc:	01000044 	movi	r4,1
    9ec0:	000b883a 	mov	r5,zero
    9ec4:	d811883a 	mov	r8,sp
    9ec8:	3f3ff316 	blt	r7,fp,9e98 <__reset+0xfbf09e98>
    9ecc:	da802417 	ldw	r10,144(sp)
    9ed0:	1705883a 	add	r2,r2,fp
    9ed4:	47000115 	stw	fp,4(r8)
    9ed8:	42800015 	stw	r10,0(r8)
    9edc:	d8801c15 	stw	r2,112(sp)
    9ee0:	d9001b15 	stw	r4,108(sp)
    9ee4:	00c001c4 	movi	r3,7
    9ee8:	19003616 	blt	r3,r4,9fc4 <___vfiprintf_internal_r+0xd68>
    9eec:	42000204 	addi	r8,r8,8
    9ef0:	21000044 	addi	r4,r4,1
    9ef4:	003e5706 	br	9854 <__reset+0xfbf09854>
    9ef8:	d9402117 	ldw	r5,132(sp)
    9efc:	d9002017 	ldw	r4,128(sp)
    9f00:	d9801a04 	addi	r6,sp,104
    9f04:	d9c02b15 	stw	r7,172(sp)
    9f08:	db402a15 	stw	r13,168(sp)
    9f0c:	00091480 	call	9148 <__sprint_r.part.0>
    9f10:	d9c02b17 	ldw	r7,172(sp)
    9f14:	db402a17 	ldw	r13,168(sp)
    9f18:	1000241e 	bne	r2,zero,9fac <___vfiprintf_internal_r+0xd50>
    9f1c:	d9401b17 	ldw	r5,108(sp)
    9f20:	d8801c17 	ldw	r2,112(sp)
    9f24:	d811883a 	mov	r8,sp
    9f28:	29000044 	addi	r4,r5,1
    9f2c:	003fd806 	br	9e90 <__reset+0xfbf09e90>
    9f30:	d9401b17 	ldw	r5,108(sp)
    9f34:	00c00074 	movhi	r3,1
    9f38:	18c1a404 	addi	r3,r3,1680
    9f3c:	d8c02415 	stw	r3,144(sp)
    9f40:	29400044 	addi	r5,r5,1
    9f44:	d8c02417 	ldw	r3,144(sp)
    9f48:	14c5883a 	add	r2,r2,r19
    9f4c:	44c00115 	stw	r19,4(r8)
    9f50:	40c00015 	stw	r3,0(r8)
    9f54:	d8801c15 	stw	r2,112(sp)
    9f58:	d9401b15 	stw	r5,108(sp)
    9f5c:	00c001c4 	movi	r3,7
    9f60:	1940070e 	bge	r3,r5,9f80 <___vfiprintf_internal_r+0xd24>
    9f64:	103e4826 	beq	r2,zero,9888 <__reset+0xfbf09888>
    9f68:	d9402117 	ldw	r5,132(sp)
    9f6c:	d9002017 	ldw	r4,128(sp)
    9f70:	d9801a04 	addi	r6,sp,104
    9f74:	00091480 	call	9148 <__sprint_r.part.0>
    9f78:	10000c1e 	bne	r2,zero,9fac <___vfiprintf_internal_r+0xd50>
    9f7c:	d8801c17 	ldw	r2,112(sp)
    9f80:	8c80010e 	bge	r17,r18,9f88 <___vfiprintf_internal_r+0xd2c>
    9f84:	9023883a 	mov	r17,r18
    9f88:	da802317 	ldw	r10,140(sp)
    9f8c:	5455883a 	add	r10,r10,r17
    9f90:	da802315 	stw	r10,140(sp)
    9f94:	103e4126 	beq	r2,zero,989c <__reset+0xfbf0989c>
    9f98:	d9402117 	ldw	r5,132(sp)
    9f9c:	d9002017 	ldw	r4,128(sp)
    9fa0:	d9801a04 	addi	r6,sp,104
    9fa4:	00091480 	call	9148 <__sprint_r.part.0>
    9fa8:	103e3c26 	beq	r2,zero,989c <__reset+0xfbf0989c>
    9fac:	dd002117 	ldw	r20,132(sp)
    9fb0:	a080030b 	ldhu	r2,12(r20)
    9fb4:	1080100c 	andi	r2,r2,64
    9fb8:	1001231e 	bne	r2,zero,a448 <___vfiprintf_internal_r+0x11ec>
    9fbc:	d8802317 	ldw	r2,140(sp)
    9fc0:	003d7b06 	br	95b0 <__reset+0xfbf095b0>
    9fc4:	1000991e 	bne	r2,zero,a22c <___vfiprintf_internal_r+0xfd0>
    9fc8:	00c00044 	movi	r3,1
    9fcc:	9805883a 	mov	r2,r19
    9fd0:	dd400015 	stw	r21,0(sp)
    9fd4:	dcc00115 	stw	r19,4(sp)
    9fd8:	dcc01c15 	stw	r19,112(sp)
    9fdc:	d8c01b15 	stw	r3,108(sp)
    9fe0:	d811883a 	mov	r8,sp
    9fe4:	42000204 	addi	r8,r8,8
    9fe8:	a2c0010c 	andi	r11,r20,4
    9fec:	583fe426 	beq	r11,zero,9f80 <__reset+0xfbf09f80>
    9ff0:	8ca7c83a 	sub	r19,r17,r18
    9ff4:	04ffe20e 	bge	zero,r19,9f80 <__reset+0xfbf09f80>
    9ff8:	01c00404 	movi	r7,16
    9ffc:	3cffcc0e 	bge	r7,r19,9f30 <__reset+0xfbf09f30>
    a000:	02800074 	movhi	r10,1
    a004:	5281a404 	addi	r10,r10,1680
    a008:	d9001b17 	ldw	r4,108(sp)
    a00c:	da802415 	stw	r10,144(sp)
    a010:	382b883a 	mov	r21,r7
    a014:	050001c4 	movi	r20,7
    a018:	df002017 	ldw	fp,128(sp)
    a01c:	00000506 	br	a034 <___vfiprintf_internal_r+0xdd8>
    a020:	21400084 	addi	r5,r4,2
    a024:	42000204 	addi	r8,r8,8
    a028:	1809883a 	mov	r4,r3
    a02c:	9cfffc04 	addi	r19,r19,-16
    a030:	acffc40e 	bge	r21,r19,9f44 <__reset+0xfbf09f44>
    a034:	10800404 	addi	r2,r2,16
    a038:	20c00044 	addi	r3,r4,1
    a03c:	45800015 	stw	r22,0(r8)
    a040:	45400115 	stw	r21,4(r8)
    a044:	d8801c15 	stw	r2,112(sp)
    a048:	d8c01b15 	stw	r3,108(sp)
    a04c:	a0fff40e 	bge	r20,r3,a020 <__reset+0xfbf0a020>
    a050:	1000041e 	bne	r2,zero,a064 <___vfiprintf_internal_r+0xe08>
    a054:	01400044 	movi	r5,1
    a058:	0009883a 	mov	r4,zero
    a05c:	d811883a 	mov	r8,sp
    a060:	003ff206 	br	a02c <__reset+0xfbf0a02c>
    a064:	d9402117 	ldw	r5,132(sp)
    a068:	d9801a04 	addi	r6,sp,104
    a06c:	e009883a 	mov	r4,fp
    a070:	00091480 	call	9148 <__sprint_r.part.0>
    a074:	103fcd1e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a078:	d9001b17 	ldw	r4,108(sp)
    a07c:	d8801c17 	ldw	r2,112(sp)
    a080:	d811883a 	mov	r8,sp
    a084:	21400044 	addi	r5,r4,1
    a088:	003fe806 	br	a02c <__reset+0xfbf0a02c>
    a08c:	d9402117 	ldw	r5,132(sp)
    a090:	d9002017 	ldw	r4,128(sp)
    a094:	d9801a04 	addi	r6,sp,104
    a098:	d9c02b15 	stw	r7,172(sp)
    a09c:	db402a15 	stw	r13,168(sp)
    a0a0:	00091480 	call	9148 <__sprint_r.part.0>
    a0a4:	d9c02b17 	ldw	r7,172(sp)
    a0a8:	db402a17 	ldw	r13,168(sp)
    a0ac:	103fbf1e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a0b0:	d9401b17 	ldw	r5,108(sp)
    a0b4:	d8801c17 	ldw	r2,112(sp)
    a0b8:	d811883a 	mov	r8,sp
    a0bc:	29800044 	addi	r6,r5,1
    a0c0:	003dc406 	br	97d4 <__reset+0xfbf097d4>
    a0c4:	1000d21e 	bne	r2,zero,a410 <___vfiprintf_internal_r+0x11b4>
    a0c8:	d8c01d87 	ldb	r3,118(sp)
    a0cc:	18009526 	beq	r3,zero,a324 <___vfiprintf_internal_r+0x10c8>
    a0d0:	00800044 	movi	r2,1
    a0d4:	d8c01d84 	addi	r3,sp,118
    a0d8:	1009883a 	mov	r4,r2
    a0dc:	d8c00015 	stw	r3,0(sp)
    a0e0:	d8800115 	stw	r2,4(sp)
    a0e4:	d811883a 	mov	r8,sp
    a0e8:	200b883a 	mov	r5,r4
    a0ec:	42000204 	addi	r8,r8,8
    a0f0:	21000044 	addi	r4,r4,1
    a0f4:	003d9706 	br	9754 <__reset+0xfbf09754>
    a0f8:	d9001d04 	addi	r4,sp,116
    a0fc:	00800084 	movi	r2,2
    a100:	d9000015 	stw	r4,0(sp)
    a104:	d8800115 	stw	r2,4(sp)
    a108:	1809883a 	mov	r4,r3
    a10c:	d811883a 	mov	r8,sp
    a110:	200b883a 	mov	r5,r4
    a114:	42000204 	addi	r8,r8,8
    a118:	21000044 	addi	r4,r4,1
    a11c:	003f4e06 	br	9e58 <__reset+0xfbf09e58>
    a120:	d8001d85 	stb	zero,118(sp)
    a124:	48005016 	blt	r9,zero,a268 <___vfiprintf_internal_r+0x100c>
    a128:	00ffdfc4 	movi	r3,-129
    a12c:	94c4b03a 	or	r2,r18,r19
    a130:	a0e8703a 	and	r20,r20,r3
    a134:	103d4426 	beq	r2,zero,9648 <__reset+0xfbf09648>
    a138:	0039883a 	mov	fp,zero
    a13c:	d9002617 	ldw	r4,152(sp)
    a140:	dd401a04 	addi	r21,sp,104
    a144:	908003cc 	andi	r2,r18,15
    a148:	9806973a 	slli	r3,r19,28
    a14c:	2085883a 	add	r2,r4,r2
    a150:	9024d13a 	srli	r18,r18,4
    a154:	10800003 	ldbu	r2,0(r2)
    a158:	9826d13a 	srli	r19,r19,4
    a15c:	ad7fffc4 	addi	r21,r21,-1
    a160:	1ca4b03a 	or	r18,r3,r18
    a164:	a8800005 	stb	r2,0(r21)
    a168:	94c4b03a 	or	r2,r18,r19
    a16c:	103ff51e 	bne	r2,zero,a144 <__reset+0xfbf0a144>
    a170:	003e5906 	br	9ad8 <__reset+0xfbf09ad8>
    a174:	d9402117 	ldw	r5,132(sp)
    a178:	d9002017 	ldw	r4,128(sp)
    a17c:	d9801a04 	addi	r6,sp,104
    a180:	00091480 	call	9148 <__sprint_r.part.0>
    a184:	103f891e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a188:	d8801c17 	ldw	r2,112(sp)
    a18c:	d811883a 	mov	r8,sp
    a190:	003f9506 	br	9fe8 <__reset+0xfbf09fe8>
    a194:	d9402117 	ldw	r5,132(sp)
    a198:	d9002017 	ldw	r4,128(sp)
    a19c:	d9801a04 	addi	r6,sp,104
    a1a0:	00091480 	call	9148 <__sprint_r.part.0>
    a1a4:	103f811e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a1a8:	d811883a 	mov	r8,sp
    a1ac:	003ced06 	br	9564 <__reset+0xfbf09564>
    a1b0:	d9402117 	ldw	r5,132(sp)
    a1b4:	d9002017 	ldw	r4,128(sp)
    a1b8:	d9801a04 	addi	r6,sp,104
    a1bc:	da402c15 	stw	r9,176(sp)
    a1c0:	db802a15 	stw	r14,168(sp)
    a1c4:	00091480 	call	9148 <__sprint_r.part.0>
    a1c8:	da402c17 	ldw	r9,176(sp)
    a1cc:	db802a17 	ldw	r14,168(sp)
    a1d0:	103f761e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a1d4:	d9401b17 	ldw	r5,108(sp)
    a1d8:	d8801c17 	ldw	r2,112(sp)
    a1dc:	d811883a 	mov	r8,sp
    a1e0:	29000044 	addi	r4,r5,1
    a1e4:	003d5b06 	br	9754 <__reset+0xfbf09754>
    a1e8:	d9402117 	ldw	r5,132(sp)
    a1ec:	d9002017 	ldw	r4,128(sp)
    a1f0:	d9801a04 	addi	r6,sp,104
    a1f4:	da402c15 	stw	r9,176(sp)
    a1f8:	00091480 	call	9148 <__sprint_r.part.0>
    a1fc:	da402c17 	ldw	r9,176(sp)
    a200:	103f6a1e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a204:	d9401b17 	ldw	r5,108(sp)
    a208:	d8801c17 	ldw	r2,112(sp)
    a20c:	d811883a 	mov	r8,sp
    a210:	29000044 	addi	r4,r5,1
    a214:	003f1006 	br	9e58 <__reset+0xfbf09e58>
    a218:	1000c31e 	bne	r2,zero,a528 <___vfiprintf_internal_r+0x12cc>
    a21c:	01000044 	movi	r4,1
    a220:	000b883a 	mov	r5,zero
    a224:	d811883a 	mov	r8,sp
    a228:	003f0d06 	br	9e60 <__reset+0xfbf09e60>
    a22c:	d9402117 	ldw	r5,132(sp)
    a230:	d9002017 	ldw	r4,128(sp)
    a234:	d9801a04 	addi	r6,sp,104
    a238:	00091480 	call	9148 <__sprint_r.part.0>
    a23c:	103f5b1e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a240:	d9001b17 	ldw	r4,108(sp)
    a244:	d8801c17 	ldw	r2,112(sp)
    a248:	d811883a 	mov	r8,sp
    a24c:	21000044 	addi	r4,r4,1
    a250:	003d8006 	br	9854 <__reset+0xfbf09854>
    a254:	01000074 	movhi	r4,1
    a258:	21013f04 	addi	r4,r4,1276
    a25c:	d9002615 	stw	r4,152(sp)
    a260:	d8c02215 	stw	r3,136(sp)
    a264:	1029883a 	mov	r20,r2
    a268:	94c4b03a 	or	r2,r18,r19
    a26c:	103fb21e 	bne	r2,zero,a138 <__reset+0xfbf0a138>
    a270:	0039883a 	mov	fp,zero
    a274:	00800084 	movi	r2,2
    a278:	003e6b06 	br	9c28 <__reset+0xfbf09c28>
    a27c:	da802217 	ldw	r10,136(sp)
    a280:	d8001d85 	stb	zero,118(sp)
    a284:	0027883a 	mov	r19,zero
    a288:	50800104 	addi	r2,r10,4
    a28c:	54800017 	ldw	r18,0(r10)
    a290:	483e6016 	blt	r9,zero,9c14 <__reset+0xfbf09c14>
    a294:	00ffdfc4 	movi	r3,-129
    a298:	d8802215 	stw	r2,136(sp)
    a29c:	a0e8703a 	and	r20,r20,r3
    a2a0:	0039883a 	mov	fp,zero
    a2a4:	903ebb26 	beq	r18,zero,9d94 <__reset+0xfbf09d94>
    a2a8:	00800244 	movi	r2,9
    a2ac:	14bdee36 	bltu	r2,r18,9a68 <__reset+0xfbf09a68>
    a2b0:	003eba06 	br	9d9c <__reset+0xfbf09d9c>
    a2b4:	00800c04 	movi	r2,48
    a2b8:	d8c01d45 	stb	r3,117(sp)
    a2bc:	d8801d05 	stb	r2,116(sp)
    a2c0:	d8001d85 	stb	zero,118(sp)
    a2c4:	a0c00094 	ori	r3,r20,2
    a2c8:	4800a916 	blt	r9,zero,a570 <___vfiprintf_internal_r+0x1314>
    a2cc:	00bfdfc4 	movi	r2,-129
    a2d0:	a096703a 	and	r11,r20,r2
    a2d4:	5d000094 	ori	r20,r11,2
    a2d8:	0039883a 	mov	fp,zero
    a2dc:	003f9706 	br	a13c <__reset+0xfbf0a13c>
    a2e0:	8025883a 	mov	r18,r16
    a2e4:	003c2e06 	br	93a0 <__reset+0xfbf093a0>
    a2e8:	00800074 	movhi	r2,1
    a2ec:	10813f04 	addi	r2,r2,1276
    a2f0:	0039883a 	mov	fp,zero
    a2f4:	d8802615 	stw	r2,152(sp)
    a2f8:	003f9006 	br	a13c <__reset+0xfbf0a13c>
    a2fc:	04a5c83a 	sub	r18,zero,r18
    a300:	07000b44 	movi	fp,45
    a304:	9004c03a 	cmpne	r2,r18,zero
    a308:	04e7c83a 	sub	r19,zero,r19
    a30c:	df001d85 	stb	fp,118(sp)
    a310:	98a7c83a 	sub	r19,r19,r2
    a314:	48009f16 	blt	r9,zero,a594 <___vfiprintf_internal_r+0x1338>
    a318:	00bfdfc4 	movi	r2,-129
    a31c:	a0a8703a 	and	r20,r20,r2
    a320:	003dd006 	br	9a64 <__reset+0xfbf09a64>
    a324:	70004c26 	beq	r14,zero,a458 <___vfiprintf_internal_r+0x11fc>
    a328:	00800084 	movi	r2,2
    a32c:	d8c01d04 	addi	r3,sp,116
    a330:	d8c00015 	stw	r3,0(sp)
    a334:	d8800115 	stw	r2,4(sp)
    a338:	01000044 	movi	r4,1
    a33c:	d811883a 	mov	r8,sp
    a340:	003f7306 	br	a110 <__reset+0xfbf0a110>
    a344:	a080100c 	andi	r2,r20,64
    a348:	da802217 	ldw	r10,136(sp)
    a34c:	103e0626 	beq	r2,zero,9b68 <__reset+0xfbf09b68>
    a350:	5480000f 	ldh	r18,0(r10)
    a354:	52800104 	addi	r10,r10,4
    a358:	da802215 	stw	r10,136(sp)
    a35c:	9027d7fa 	srai	r19,r18,31
    a360:	9805883a 	mov	r2,r19
    a364:	003db806 	br	9a48 <__reset+0xfbf09a48>
    a368:	a080040c 	andi	r2,r20,16
    a36c:	1000091e 	bne	r2,zero,a394 <___vfiprintf_internal_r+0x1138>
    a370:	a2c0100c 	andi	r11,r20,64
    a374:	58000726 	beq	r11,zero,a394 <___vfiprintf_internal_r+0x1138>
    a378:	da802217 	ldw	r10,136(sp)
    a37c:	50800017 	ldw	r2,0(r10)
    a380:	52800104 	addi	r10,r10,4
    a384:	da802215 	stw	r10,136(sp)
    a388:	da802317 	ldw	r10,140(sp)
    a38c:	1280000d 	sth	r10,0(r2)
    a390:	003be706 	br	9330 <__reset+0xfbf09330>
    a394:	da802217 	ldw	r10,136(sp)
    a398:	50800017 	ldw	r2,0(r10)
    a39c:	52800104 	addi	r10,r10,4
    a3a0:	da802215 	stw	r10,136(sp)
    a3a4:	da802317 	ldw	r10,140(sp)
    a3a8:	12800015 	stw	r10,0(r2)
    a3ac:	003be006 	br	9330 <__reset+0xfbf09330>
    a3b0:	a080100c 	andi	r2,r20,64
    a3b4:	da802217 	ldw	r10,136(sp)
    a3b8:	10003026 	beq	r2,zero,a47c <___vfiprintf_internal_r+0x1220>
    a3bc:	5480000b 	ldhu	r18,0(r10)
    a3c0:	52800104 	addi	r10,r10,4
    a3c4:	0027883a 	mov	r19,zero
    a3c8:	da802215 	stw	r10,136(sp)
    a3cc:	003d8006 	br	99d0 <__reset+0xfbf099d0>
    a3d0:	80c00007 	ldb	r3,0(r16)
    a3d4:	003c0006 	br	93d8 <__reset+0xfbf093d8>
    a3d8:	a080100c 	andi	r2,r20,64
    a3dc:	d8001d85 	stb	zero,118(sp)
    a3e0:	da802217 	ldw	r10,136(sp)
    a3e4:	1000201e 	bne	r2,zero,a468 <___vfiprintf_internal_r+0x120c>
    a3e8:	50800104 	addi	r2,r10,4
    a3ec:	54800017 	ldw	r18,0(r10)
    a3f0:	0027883a 	mov	r19,zero
    a3f4:	483def0e 	bge	r9,zero,9bb4 <__reset+0xfbf09bb4>
    a3f8:	94c6b03a 	or	r3,r18,r19
    a3fc:	d8802215 	stw	r2,136(sp)
    a400:	183d4e1e 	bne	r3,zero,993c <__reset+0xfbf0993c>
    a404:	0039883a 	mov	fp,zero
    a408:	0005883a 	mov	r2,zero
    a40c:	003e0606 	br	9c28 <__reset+0xfbf09c28>
    a410:	d9402117 	ldw	r5,132(sp)
    a414:	d9002017 	ldw	r4,128(sp)
    a418:	d9801a04 	addi	r6,sp,104
    a41c:	da402c15 	stw	r9,176(sp)
    a420:	db802a15 	stw	r14,168(sp)
    a424:	00091480 	call	9148 <__sprint_r.part.0>
    a428:	da402c17 	ldw	r9,176(sp)
    a42c:	db802a17 	ldw	r14,168(sp)
    a430:	103ede1e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a434:	d9401b17 	ldw	r5,108(sp)
    a438:	d8801c17 	ldw	r2,112(sp)
    a43c:	d811883a 	mov	r8,sp
    a440:	29000044 	addi	r4,r5,1
    a444:	003e7406 	br	9e18 <__reset+0xfbf09e18>
    a448:	00bfffc4 	movi	r2,-1
    a44c:	003c5806 	br	95b0 <__reset+0xfbf095b0>
    a450:	d811883a 	mov	r8,sp
    a454:	003ee806 	br	9ff8 <__reset+0xfbf09ff8>
    a458:	000b883a 	mov	r5,zero
    a45c:	01000044 	movi	r4,1
    a460:	d811883a 	mov	r8,sp
    a464:	003e7c06 	br	9e58 <__reset+0xfbf09e58>
    a468:	50800104 	addi	r2,r10,4
    a46c:	5480000b 	ldhu	r18,0(r10)
    a470:	0027883a 	mov	r19,zero
    a474:	483dcf0e 	bge	r9,zero,9bb4 <__reset+0xfbf09bb4>
    a478:	003fdf06 	br	a3f8 <__reset+0xfbf0a3f8>
    a47c:	54800017 	ldw	r18,0(r10)
    a480:	52800104 	addi	r10,r10,4
    a484:	0027883a 	mov	r19,zero
    a488:	da802215 	stw	r10,136(sp)
    a48c:	003d5006 	br	99d0 <__reset+0xfbf099d0>
    a490:	50800104 	addi	r2,r10,4
    a494:	5480000b 	ldhu	r18,0(r10)
    a498:	0027883a 	mov	r19,zero
    a49c:	483f7d0e 	bge	r9,zero,a294 <__reset+0xfbf0a294>
    a4a0:	003ddc06 	br	9c14 <__reset+0xfbf09c14>
    a4a4:	d8c02215 	stw	r3,136(sp)
    a4a8:	0039883a 	mov	fp,zero
    a4ac:	003ddb06 	br	9c1c <__reset+0xfbf09c1c>
    a4b0:	02800074 	movhi	r10,1
    a4b4:	5281a004 	addi	r10,r10,1664
    a4b8:	da802415 	stw	r10,144(sp)
    a4bc:	003e8306 	br	9ecc <__reset+0xfbf09ecc>
    a4c0:	d8801c17 	ldw	r2,112(sp)
    a4c4:	dd002117 	ldw	r20,132(sp)
    a4c8:	103eb926 	beq	r2,zero,9fb0 <__reset+0xfbf09fb0>
    a4cc:	d9002017 	ldw	r4,128(sp)
    a4d0:	d9801a04 	addi	r6,sp,104
    a4d4:	a00b883a 	mov	r5,r20
    a4d8:	00091480 	call	9148 <__sprint_r.part.0>
    a4dc:	003eb406 	br	9fb0 <__reset+0xfbf09fb0>
    a4e0:	80c00043 	ldbu	r3,1(r16)
    a4e4:	a5000814 	ori	r20,r20,32
    a4e8:	84000044 	addi	r16,r16,1
    a4ec:	18c03fcc 	andi	r3,r3,255
    a4f0:	18c0201c 	xori	r3,r3,128
    a4f4:	18ffe004 	addi	r3,r3,-128
    a4f8:	003bb706 	br	93d8 <__reset+0xfbf093d8>
    a4fc:	a809883a 	mov	r4,r21
    a500:	d8c02a15 	stw	r3,168(sp)
    a504:	da002b15 	stw	r8,172(sp)
    a508:	0001cd80 	call	1cd8 <strlen>
    a50c:	d8c02a17 	ldw	r3,168(sp)
    a510:	1027883a 	mov	r19,r2
    a514:	df001d83 	ldbu	fp,118(sp)
    a518:	d8c02215 	stw	r3,136(sp)
    a51c:	0013883a 	mov	r9,zero
    a520:	da002b17 	ldw	r8,172(sp)
    a524:	003c4d06 	br	965c <__reset+0xfbf0965c>
    a528:	d9402117 	ldw	r5,132(sp)
    a52c:	d9002017 	ldw	r4,128(sp)
    a530:	d9801a04 	addi	r6,sp,104
    a534:	da402c15 	stw	r9,176(sp)
    a538:	00091480 	call	9148 <__sprint_r.part.0>
    a53c:	da402c17 	ldw	r9,176(sp)
    a540:	103e9a1e 	bne	r2,zero,9fac <__reset+0xfbf09fac>
    a544:	d9401b17 	ldw	r5,108(sp)
    a548:	d8801c17 	ldw	r2,112(sp)
    a54c:	d811883a 	mov	r8,sp
    a550:	29000044 	addi	r4,r5,1
    a554:	003e4206 	br	9e60 <__reset+0xfbf09e60>
    a558:	d9401b17 	ldw	r5,108(sp)
    a55c:	01000074 	movhi	r4,1
    a560:	2101a404 	addi	r4,r4,1680
    a564:	d9002415 	stw	r4,144(sp)
    a568:	29400044 	addi	r5,r5,1
    a56c:	003c6d06 	br	9724 <__reset+0xfbf09724>
    a570:	0039883a 	mov	fp,zero
    a574:	00800084 	movi	r2,2
    a578:	10803fcc 	andi	r2,r2,255
    a57c:	01000044 	movi	r4,1
    a580:	11001e26 	beq	r2,r4,a5fc <___vfiprintf_internal_r+0x13a0>
    a584:	01000084 	movi	r4,2
    a588:	11001e1e 	bne	r2,r4,a604 <___vfiprintf_internal_r+0x13a8>
    a58c:	1829883a 	mov	r20,r3
    a590:	003eea06 	br	a13c <__reset+0xfbf0a13c>
    a594:	a007883a 	mov	r3,r20
    a598:	00800044 	movi	r2,1
    a59c:	003ff606 	br	a578 <__reset+0xfbf0a578>
    a5a0:	00800184 	movi	r2,6
    a5a4:	1240012e 	bgeu	r2,r9,a5ac <___vfiprintf_internal_r+0x1350>
    a5a8:	1013883a 	mov	r9,r2
    a5ac:	4827883a 	mov	r19,r9
    a5b0:	4825883a 	mov	r18,r9
    a5b4:	48001516 	blt	r9,zero,a60c <___vfiprintf_internal_r+0x13b0>
    a5b8:	05400074 	movhi	r21,1
    a5bc:	d8c02215 	stw	r3,136(sp)
    a5c0:	ad414404 	addi	r21,r21,1296
    a5c4:	003d1406 	br	9a18 <__reset+0xfbf09a18>
    a5c8:	02800074 	movhi	r10,1
    a5cc:	5281a004 	addi	r10,r10,1664
    a5d0:	da802415 	stw	r10,144(sp)
    a5d4:	200d883a 	mov	r6,r4
    a5d8:	003c9106 	br	9820 <__reset+0xfbf09820>
    a5dc:	5021883a 	mov	r16,r10
    a5e0:	0013883a 	mov	r9,zero
    a5e4:	003b7d06 	br	93dc <__reset+0xfbf093dc>
    a5e8:	4827883a 	mov	r19,r9
    a5ec:	df001d83 	ldbu	fp,118(sp)
    a5f0:	d8c02215 	stw	r3,136(sp)
    a5f4:	0013883a 	mov	r9,zero
    a5f8:	003c1806 	br	965c <__reset+0xfbf0965c>
    a5fc:	1829883a 	mov	r20,r3
    a600:	003d1806 	br	9a64 <__reset+0xfbf09a64>
    a604:	1829883a 	mov	r20,r3
    a608:	003ccd06 	br	9940 <__reset+0xfbf09940>
    a60c:	0025883a 	mov	r18,zero
    a610:	003fe906 	br	a5b8 <__reset+0xfbf0a5b8>
    a614:	d8802217 	ldw	r2,136(sp)
    a618:	80c00043 	ldbu	r3,1(r16)
    a61c:	5021883a 	mov	r16,r10
    a620:	12400017 	ldw	r9,0(r2)
    a624:	10800104 	addi	r2,r2,4
    a628:	d8802215 	stw	r2,136(sp)
    a62c:	483faf0e 	bge	r9,zero,a4ec <__reset+0xfbf0a4ec>
    a630:	18c03fcc 	andi	r3,r3,255
    a634:	18c0201c 	xori	r3,r3,128
    a638:	027fffc4 	movi	r9,-1
    a63c:	18ffe004 	addi	r3,r3,-128
    a640:	003b6506 	br	93d8 <__reset+0xfbf093d8>
    a644:	d9c01d85 	stb	r7,118(sp)
    a648:	003ca006 	br	98cc <__reset+0xfbf098cc>
    a64c:	d9c01d85 	stb	r7,118(sp)
    a650:	003cad06 	br	9908 <__reset+0xfbf09908>
    a654:	d9c01d85 	stb	r7,118(sp)
    a658:	003d7d06 	br	9c50 <__reset+0xfbf09c50>
    a65c:	d9c01d85 	stb	r7,118(sp)
    a660:	003d5f06 	br	9be0 <__reset+0xfbf09be0>
    a664:	a080004c 	andi	r2,r20,1
    a668:	0039883a 	mov	fp,zero
    a66c:	10000526 	beq	r2,zero,a684 <___vfiprintf_internal_r+0x1428>
    a670:	00800c04 	movi	r2,48
    a674:	d88019c5 	stb	r2,103(sp)
    a678:	dcc02717 	ldw	r19,156(sp)
    a67c:	dd4019c4 	addi	r21,sp,103
    a680:	003bf606 	br	965c <__reset+0xfbf0965c>
    a684:	0027883a 	mov	r19,zero
    a688:	dd401a04 	addi	r21,sp,104
    a68c:	003bf306 	br	965c <__reset+0xfbf0965c>
    a690:	d9c01d85 	stb	r7,118(sp)
    a694:	003dc806 	br	9db8 <__reset+0xfbf09db8>
    a698:	d9c01d85 	stb	r7,118(sp)
    a69c:	003d3a06 	br	9b88 <__reset+0xfbf09b88>
    a6a0:	d9c01d85 	stb	r7,118(sp)
    a6a4:	003d2a06 	br	9b50 <__reset+0xfbf09b50>
    a6a8:	d9c01d85 	stb	r7,118(sp)
    a6ac:	003cde06 	br	9a28 <__reset+0xfbf09a28>
    a6b0:	d9c01d85 	stb	r7,118(sp)
    a6b4:	003cbc06 	br	99a8 <__reset+0xfbf099a8>

0000a6b8 <__vfiprintf_internal>:
    a6b8:	00800074 	movhi	r2,1
    a6bc:	1089e504 	addi	r2,r2,10132
    a6c0:	300f883a 	mov	r7,r6
    a6c4:	280d883a 	mov	r6,r5
    a6c8:	200b883a 	mov	r5,r4
    a6cc:	11000017 	ldw	r4,0(r2)
    a6d0:	000925c1 	jmpi	925c <___vfiprintf_internal_r>

0000a6d4 <__sbprintf>:
    a6d4:	2880030b 	ldhu	r2,12(r5)
    a6d8:	2ac01917 	ldw	r11,100(r5)
    a6dc:	2a80038b 	ldhu	r10,14(r5)
    a6e0:	2a400717 	ldw	r9,28(r5)
    a6e4:	2a000917 	ldw	r8,36(r5)
    a6e8:	defee204 	addi	sp,sp,-1144
    a6ec:	00c10004 	movi	r3,1024
    a6f0:	dc011a15 	stw	r16,1128(sp)
    a6f4:	10bfff4c 	andi	r2,r2,65533
    a6f8:	2821883a 	mov	r16,r5
    a6fc:	d8cb883a 	add	r5,sp,r3
    a700:	dc811c15 	stw	r18,1136(sp)
    a704:	dc411b15 	stw	r17,1132(sp)
    a708:	dfc11d15 	stw	ra,1140(sp)
    a70c:	2025883a 	mov	r18,r4
    a710:	d881030d 	sth	r2,1036(sp)
    a714:	dac11915 	stw	r11,1124(sp)
    a718:	da81038d 	sth	r10,1038(sp)
    a71c:	da410715 	stw	r9,1052(sp)
    a720:	da010915 	stw	r8,1060(sp)
    a724:	dec10015 	stw	sp,1024(sp)
    a728:	dec10415 	stw	sp,1040(sp)
    a72c:	d8c10215 	stw	r3,1032(sp)
    a730:	d8c10515 	stw	r3,1044(sp)
    a734:	d8010615 	stw	zero,1048(sp)
    a738:	000925c0 	call	925c <___vfiprintf_internal_r>
    a73c:	1023883a 	mov	r17,r2
    a740:	10000416 	blt	r2,zero,a754 <__sbprintf+0x80>
    a744:	d9410004 	addi	r5,sp,1024
    a748:	9009883a 	mov	r4,r18
    a74c:	0005c380 	call	5c38 <_fflush_r>
    a750:	10000d1e 	bne	r2,zero,a788 <__sbprintf+0xb4>
    a754:	d881030b 	ldhu	r2,1036(sp)
    a758:	1080100c 	andi	r2,r2,64
    a75c:	10000326 	beq	r2,zero,a76c <__sbprintf+0x98>
    a760:	8080030b 	ldhu	r2,12(r16)
    a764:	10801014 	ori	r2,r2,64
    a768:	8080030d 	sth	r2,12(r16)
    a76c:	8805883a 	mov	r2,r17
    a770:	dfc11d17 	ldw	ra,1140(sp)
    a774:	dc811c17 	ldw	r18,1136(sp)
    a778:	dc411b17 	ldw	r17,1132(sp)
    a77c:	dc011a17 	ldw	r16,1128(sp)
    a780:	dec11e04 	addi	sp,sp,1144
    a784:	f800283a 	ret
    a788:	047fffc4 	movi	r17,-1
    a78c:	003ff106 	br	a754 <__reset+0xfbf0a754>

0000a790 <_write_r>:
    a790:	defffd04 	addi	sp,sp,-12
    a794:	2805883a 	mov	r2,r5
    a798:	dc000015 	stw	r16,0(sp)
    a79c:	04000074 	movhi	r16,1
    a7a0:	dc400115 	stw	r17,4(sp)
    a7a4:	300b883a 	mov	r5,r6
    a7a8:	840a0c04 	addi	r16,r16,10288
    a7ac:	2023883a 	mov	r17,r4
    a7b0:	380d883a 	mov	r6,r7
    a7b4:	1009883a 	mov	r4,r2
    a7b8:	dfc00215 	stw	ra,8(sp)
    a7bc:	80000015 	stw	zero,0(r16)
    a7c0:	000e63c0 	call	e63c <write>
    a7c4:	00ffffc4 	movi	r3,-1
    a7c8:	10c00526 	beq	r2,r3,a7e0 <_write_r+0x50>
    a7cc:	dfc00217 	ldw	ra,8(sp)
    a7d0:	dc400117 	ldw	r17,4(sp)
    a7d4:	dc000017 	ldw	r16,0(sp)
    a7d8:	dec00304 	addi	sp,sp,12
    a7dc:	f800283a 	ret
    a7e0:	80c00017 	ldw	r3,0(r16)
    a7e4:	183ff926 	beq	r3,zero,a7cc <__reset+0xfbf0a7cc>
    a7e8:	88c00015 	stw	r3,0(r17)
    a7ec:	003ff706 	br	a7cc <__reset+0xfbf0a7cc>

0000a7f0 <_close_r>:
    a7f0:	defffd04 	addi	sp,sp,-12
    a7f4:	dc000015 	stw	r16,0(sp)
    a7f8:	04000074 	movhi	r16,1
    a7fc:	dc400115 	stw	r17,4(sp)
    a800:	840a0c04 	addi	r16,r16,10288
    a804:	2023883a 	mov	r17,r4
    a808:	2809883a 	mov	r4,r5
    a80c:	dfc00215 	stw	ra,8(sp)
    a810:	80000015 	stw	zero,0(r16)
    a814:	000e3900 	call	e390 <close>
    a818:	00ffffc4 	movi	r3,-1
    a81c:	10c00526 	beq	r2,r3,a834 <_close_r+0x44>
    a820:	dfc00217 	ldw	ra,8(sp)
    a824:	dc400117 	ldw	r17,4(sp)
    a828:	dc000017 	ldw	r16,0(sp)
    a82c:	dec00304 	addi	sp,sp,12
    a830:	f800283a 	ret
    a834:	80c00017 	ldw	r3,0(r16)
    a838:	183ff926 	beq	r3,zero,a820 <__reset+0xfbf0a820>
    a83c:	88c00015 	stw	r3,0(r17)
    a840:	003ff706 	br	a820 <__reset+0xfbf0a820>

0000a844 <_calloc_r>:
    a844:	298b383a 	mul	r5,r5,r6
    a848:	defffe04 	addi	sp,sp,-8
    a84c:	dfc00115 	stw	ra,4(sp)
    a850:	dc000015 	stw	r16,0(sp)
    a854:	0006d740 	call	6d74 <_malloc_r>
    a858:	10002926 	beq	r2,zero,a900 <_calloc_r+0xbc>
    a85c:	11bfff17 	ldw	r6,-4(r2)
    a860:	1021883a 	mov	r16,r2
    a864:	00bfff04 	movi	r2,-4
    a868:	308c703a 	and	r6,r6,r2
    a86c:	00c00904 	movi	r3,36
    a870:	308d883a 	add	r6,r6,r2
    a874:	19801636 	bltu	r3,r6,a8d0 <_calloc_r+0x8c>
    a878:	008004c4 	movi	r2,19
    a87c:	11800b2e 	bgeu	r2,r6,a8ac <_calloc_r+0x68>
    a880:	80000015 	stw	zero,0(r16)
    a884:	80000115 	stw	zero,4(r16)
    a888:	008006c4 	movi	r2,27
    a88c:	11801a2e 	bgeu	r2,r6,a8f8 <_calloc_r+0xb4>
    a890:	80000215 	stw	zero,8(r16)
    a894:	80000315 	stw	zero,12(r16)
    a898:	30c0151e 	bne	r6,r3,a8f0 <_calloc_r+0xac>
    a89c:	80000415 	stw	zero,16(r16)
    a8a0:	80800604 	addi	r2,r16,24
    a8a4:	80000515 	stw	zero,20(r16)
    a8a8:	00000106 	br	a8b0 <_calloc_r+0x6c>
    a8ac:	8005883a 	mov	r2,r16
    a8b0:	10000015 	stw	zero,0(r2)
    a8b4:	10000115 	stw	zero,4(r2)
    a8b8:	10000215 	stw	zero,8(r2)
    a8bc:	8005883a 	mov	r2,r16
    a8c0:	dfc00117 	ldw	ra,4(sp)
    a8c4:	dc000017 	ldw	r16,0(sp)
    a8c8:	dec00204 	addi	sp,sp,8
    a8cc:	f800283a 	ret
    a8d0:	000b883a 	mov	r5,zero
    a8d4:	8009883a 	mov	r4,r16
    a8d8:	0001a700 	call	1a70 <memset>
    a8dc:	8005883a 	mov	r2,r16
    a8e0:	dfc00117 	ldw	ra,4(sp)
    a8e4:	dc000017 	ldw	r16,0(sp)
    a8e8:	dec00204 	addi	sp,sp,8
    a8ec:	f800283a 	ret
    a8f0:	80800404 	addi	r2,r16,16
    a8f4:	003fee06 	br	a8b0 <__reset+0xfbf0a8b0>
    a8f8:	80800204 	addi	r2,r16,8
    a8fc:	003fec06 	br	a8b0 <__reset+0xfbf0a8b0>
    a900:	0005883a 	mov	r2,zero
    a904:	003fee06 	br	a8c0 <__reset+0xfbf0a8c0>

0000a908 <_fclose_r>:
    a908:	28003926 	beq	r5,zero,a9f0 <_fclose_r+0xe8>
    a90c:	defffc04 	addi	sp,sp,-16
    a910:	dc400115 	stw	r17,4(sp)
    a914:	dc000015 	stw	r16,0(sp)
    a918:	dfc00315 	stw	ra,12(sp)
    a91c:	dc800215 	stw	r18,8(sp)
    a920:	2023883a 	mov	r17,r4
    a924:	2821883a 	mov	r16,r5
    a928:	20000226 	beq	r4,zero,a934 <_fclose_r+0x2c>
    a92c:	20800e17 	ldw	r2,56(r4)
    a930:	10002726 	beq	r2,zero,a9d0 <_fclose_r+0xc8>
    a934:	8080030f 	ldh	r2,12(r16)
    a938:	1000071e 	bne	r2,zero,a958 <_fclose_r+0x50>
    a93c:	0005883a 	mov	r2,zero
    a940:	dfc00317 	ldw	ra,12(sp)
    a944:	dc800217 	ldw	r18,8(sp)
    a948:	dc400117 	ldw	r17,4(sp)
    a94c:	dc000017 	ldw	r16,0(sp)
    a950:	dec00404 	addi	sp,sp,16
    a954:	f800283a 	ret
    a958:	800b883a 	mov	r5,r16
    a95c:	8809883a 	mov	r4,r17
    a960:	0005a1c0 	call	5a1c <__sflush_r>
    a964:	1025883a 	mov	r18,r2
    a968:	80800b17 	ldw	r2,44(r16)
    a96c:	10000426 	beq	r2,zero,a980 <_fclose_r+0x78>
    a970:	81400717 	ldw	r5,28(r16)
    a974:	8809883a 	mov	r4,r17
    a978:	103ee83a 	callr	r2
    a97c:	10001616 	blt	r2,zero,a9d8 <_fclose_r+0xd0>
    a980:	8080030b 	ldhu	r2,12(r16)
    a984:	1080200c 	andi	r2,r2,128
    a988:	1000151e 	bne	r2,zero,a9e0 <_fclose_r+0xd8>
    a98c:	81400c17 	ldw	r5,48(r16)
    a990:	28000526 	beq	r5,zero,a9a8 <_fclose_r+0xa0>
    a994:	80801004 	addi	r2,r16,64
    a998:	28800226 	beq	r5,r2,a9a4 <_fclose_r+0x9c>
    a99c:	8809883a 	mov	r4,r17
    a9a0:	00061880 	call	6188 <_free_r>
    a9a4:	80000c15 	stw	zero,48(r16)
    a9a8:	81401117 	ldw	r5,68(r16)
    a9ac:	28000326 	beq	r5,zero,a9bc <_fclose_r+0xb4>
    a9b0:	8809883a 	mov	r4,r17
    a9b4:	00061880 	call	6188 <_free_r>
    a9b8:	80001115 	stw	zero,68(r16)
    a9bc:	00060240 	call	6024 <__sfp_lock_acquire>
    a9c0:	8000030d 	sth	zero,12(r16)
    a9c4:	00060280 	call	6028 <__sfp_lock_release>
    a9c8:	9005883a 	mov	r2,r18
    a9cc:	003fdc06 	br	a940 <__reset+0xfbf0a940>
    a9d0:	00060140 	call	6014 <__sinit>
    a9d4:	003fd706 	br	a934 <__reset+0xfbf0a934>
    a9d8:	04bfffc4 	movi	r18,-1
    a9dc:	003fe806 	br	a980 <__reset+0xfbf0a980>
    a9e0:	81400417 	ldw	r5,16(r16)
    a9e4:	8809883a 	mov	r4,r17
    a9e8:	00061880 	call	6188 <_free_r>
    a9ec:	003fe706 	br	a98c <__reset+0xfbf0a98c>
    a9f0:	0005883a 	mov	r2,zero
    a9f4:	f800283a 	ret

0000a9f8 <fclose>:
    a9f8:	00800074 	movhi	r2,1
    a9fc:	1089e504 	addi	r2,r2,10132
    aa00:	200b883a 	mov	r5,r4
    aa04:	11000017 	ldw	r4,0(r2)
    aa08:	000a9081 	jmpi	a908 <_fclose_r>

0000aa0c <__fputwc>:
    aa0c:	defff804 	addi	sp,sp,-32
    aa10:	dcc00415 	stw	r19,16(sp)
    aa14:	dc800315 	stw	r18,12(sp)
    aa18:	dc000115 	stw	r16,4(sp)
    aa1c:	dfc00715 	stw	ra,28(sp)
    aa20:	dd400615 	stw	r21,24(sp)
    aa24:	dd000515 	stw	r20,20(sp)
    aa28:	dc400215 	stw	r17,8(sp)
    aa2c:	2027883a 	mov	r19,r4
    aa30:	2825883a 	mov	r18,r5
    aa34:	3021883a 	mov	r16,r6
    aa38:	0006b640 	call	6b64 <__locale_mb_cur_max>
    aa3c:	00c00044 	movi	r3,1
    aa40:	10c03e26 	beq	r2,r3,ab3c <__fputwc+0x130>
    aa44:	81c01704 	addi	r7,r16,92
    aa48:	900d883a 	mov	r6,r18
    aa4c:	d80b883a 	mov	r5,sp
    aa50:	9809883a 	mov	r4,r19
    aa54:	000aedc0 	call	aedc <_wcrtomb_r>
    aa58:	1029883a 	mov	r20,r2
    aa5c:	00bfffc4 	movi	r2,-1
    aa60:	a0802026 	beq	r20,r2,aae4 <__fputwc+0xd8>
    aa64:	d9400003 	ldbu	r5,0(sp)
    aa68:	a0001c26 	beq	r20,zero,aadc <__fputwc+0xd0>
    aa6c:	0023883a 	mov	r17,zero
    aa70:	05400284 	movi	r21,10
    aa74:	00000906 	br	aa9c <__fputwc+0x90>
    aa78:	80800017 	ldw	r2,0(r16)
    aa7c:	11400005 	stb	r5,0(r2)
    aa80:	80c00017 	ldw	r3,0(r16)
    aa84:	18c00044 	addi	r3,r3,1
    aa88:	80c00015 	stw	r3,0(r16)
    aa8c:	8c400044 	addi	r17,r17,1
    aa90:	dc45883a 	add	r2,sp,r17
    aa94:	8d00112e 	bgeu	r17,r20,aadc <__fputwc+0xd0>
    aa98:	11400003 	ldbu	r5,0(r2)
    aa9c:	80c00217 	ldw	r3,8(r16)
    aaa0:	18ffffc4 	addi	r3,r3,-1
    aaa4:	80c00215 	stw	r3,8(r16)
    aaa8:	183ff30e 	bge	r3,zero,aa78 <__reset+0xfbf0aa78>
    aaac:	80800617 	ldw	r2,24(r16)
    aab0:	18801916 	blt	r3,r2,ab18 <__fputwc+0x10c>
    aab4:	80800017 	ldw	r2,0(r16)
    aab8:	11400005 	stb	r5,0(r2)
    aabc:	80800017 	ldw	r2,0(r16)
    aac0:	10c00003 	ldbu	r3,0(r2)
    aac4:	10800044 	addi	r2,r2,1
    aac8:	1d402326 	beq	r3,r21,ab58 <__fputwc+0x14c>
    aacc:	80800015 	stw	r2,0(r16)
    aad0:	8c400044 	addi	r17,r17,1
    aad4:	dc45883a 	add	r2,sp,r17
    aad8:	8d3fef36 	bltu	r17,r20,aa98 <__reset+0xfbf0aa98>
    aadc:	9005883a 	mov	r2,r18
    aae0:	00000406 	br	aaf4 <__fputwc+0xe8>
    aae4:	80c0030b 	ldhu	r3,12(r16)
    aae8:	a005883a 	mov	r2,r20
    aaec:	18c01014 	ori	r3,r3,64
    aaf0:	80c0030d 	sth	r3,12(r16)
    aaf4:	dfc00717 	ldw	ra,28(sp)
    aaf8:	dd400617 	ldw	r21,24(sp)
    aafc:	dd000517 	ldw	r20,20(sp)
    ab00:	dcc00417 	ldw	r19,16(sp)
    ab04:	dc800317 	ldw	r18,12(sp)
    ab08:	dc400217 	ldw	r17,8(sp)
    ab0c:	dc000117 	ldw	r16,4(sp)
    ab10:	dec00804 	addi	sp,sp,32
    ab14:	f800283a 	ret
    ab18:	800d883a 	mov	r6,r16
    ab1c:	29403fcc 	andi	r5,r5,255
    ab20:	9809883a 	mov	r4,r19
    ab24:	000ad840 	call	ad84 <__swbuf_r>
    ab28:	10bfffe0 	cmpeqi	r2,r2,-1
    ab2c:	10803fcc 	andi	r2,r2,255
    ab30:	103fd626 	beq	r2,zero,aa8c <__reset+0xfbf0aa8c>
    ab34:	00bfffc4 	movi	r2,-1
    ab38:	003fee06 	br	aaf4 <__reset+0xfbf0aaf4>
    ab3c:	90ffffc4 	addi	r3,r18,-1
    ab40:	01003f84 	movi	r4,254
    ab44:	20ffbf36 	bltu	r4,r3,aa44 <__reset+0xfbf0aa44>
    ab48:	900b883a 	mov	r5,r18
    ab4c:	dc800005 	stb	r18,0(sp)
    ab50:	1029883a 	mov	r20,r2
    ab54:	003fc506 	br	aa6c <__reset+0xfbf0aa6c>
    ab58:	800d883a 	mov	r6,r16
    ab5c:	a80b883a 	mov	r5,r21
    ab60:	9809883a 	mov	r4,r19
    ab64:	000ad840 	call	ad84 <__swbuf_r>
    ab68:	10bfffe0 	cmpeqi	r2,r2,-1
    ab6c:	003fef06 	br	ab2c <__reset+0xfbf0ab2c>

0000ab70 <_fputwc_r>:
    ab70:	3080030b 	ldhu	r2,12(r6)
    ab74:	10c8000c 	andi	r3,r2,8192
    ab78:	1800051e 	bne	r3,zero,ab90 <_fputwc_r+0x20>
    ab7c:	30c01917 	ldw	r3,100(r6)
    ab80:	10880014 	ori	r2,r2,8192
    ab84:	3080030d 	sth	r2,12(r6)
    ab88:	18880014 	ori	r2,r3,8192
    ab8c:	30801915 	stw	r2,100(r6)
    ab90:	000aa0c1 	jmpi	aa0c <__fputwc>

0000ab94 <fputwc>:
    ab94:	00800074 	movhi	r2,1
    ab98:	defffc04 	addi	sp,sp,-16
    ab9c:	1089e504 	addi	r2,r2,10132
    aba0:	dc000115 	stw	r16,4(sp)
    aba4:	14000017 	ldw	r16,0(r2)
    aba8:	dc400215 	stw	r17,8(sp)
    abac:	dfc00315 	stw	ra,12(sp)
    abb0:	2023883a 	mov	r17,r4
    abb4:	80000226 	beq	r16,zero,abc0 <fputwc+0x2c>
    abb8:	80800e17 	ldw	r2,56(r16)
    abbc:	10001026 	beq	r2,zero,ac00 <fputwc+0x6c>
    abc0:	2880030b 	ldhu	r2,12(r5)
    abc4:	10c8000c 	andi	r3,r2,8192
    abc8:	1800051e 	bne	r3,zero,abe0 <fputwc+0x4c>
    abcc:	28c01917 	ldw	r3,100(r5)
    abd0:	10880014 	ori	r2,r2,8192
    abd4:	2880030d 	sth	r2,12(r5)
    abd8:	18880014 	ori	r2,r3,8192
    abdc:	28801915 	stw	r2,100(r5)
    abe0:	280d883a 	mov	r6,r5
    abe4:	8009883a 	mov	r4,r16
    abe8:	880b883a 	mov	r5,r17
    abec:	dfc00317 	ldw	ra,12(sp)
    abf0:	dc400217 	ldw	r17,8(sp)
    abf4:	dc000117 	ldw	r16,4(sp)
    abf8:	dec00404 	addi	sp,sp,16
    abfc:	000aa0c1 	jmpi	aa0c <__fputwc>
    ac00:	8009883a 	mov	r4,r16
    ac04:	d9400015 	stw	r5,0(sp)
    ac08:	00060140 	call	6014 <__sinit>
    ac0c:	d9400017 	ldw	r5,0(sp)
    ac10:	003feb06 	br	abc0 <__reset+0xfbf0abc0>

0000ac14 <_fstat_r>:
    ac14:	defffd04 	addi	sp,sp,-12
    ac18:	2805883a 	mov	r2,r5
    ac1c:	dc000015 	stw	r16,0(sp)
    ac20:	04000074 	movhi	r16,1
    ac24:	dc400115 	stw	r17,4(sp)
    ac28:	840a0c04 	addi	r16,r16,10288
    ac2c:	2023883a 	mov	r17,r4
    ac30:	300b883a 	mov	r5,r6
    ac34:	1009883a 	mov	r4,r2
    ac38:	dfc00215 	stw	ra,8(sp)
    ac3c:	80000015 	stw	zero,0(r16)
    ac40:	000e4dc0 	call	e4dc <fstat>
    ac44:	00ffffc4 	movi	r3,-1
    ac48:	10c00526 	beq	r2,r3,ac60 <_fstat_r+0x4c>
    ac4c:	dfc00217 	ldw	ra,8(sp)
    ac50:	dc400117 	ldw	r17,4(sp)
    ac54:	dc000017 	ldw	r16,0(sp)
    ac58:	dec00304 	addi	sp,sp,12
    ac5c:	f800283a 	ret
    ac60:	80c00017 	ldw	r3,0(r16)
    ac64:	183ff926 	beq	r3,zero,ac4c <__reset+0xfbf0ac4c>
    ac68:	88c00015 	stw	r3,0(r17)
    ac6c:	003ff706 	br	ac4c <__reset+0xfbf0ac4c>

0000ac70 <_isatty_r>:
    ac70:	defffd04 	addi	sp,sp,-12
    ac74:	dc000015 	stw	r16,0(sp)
    ac78:	04000074 	movhi	r16,1
    ac7c:	dc400115 	stw	r17,4(sp)
    ac80:	840a0c04 	addi	r16,r16,10288
    ac84:	2023883a 	mov	r17,r4
    ac88:	2809883a 	mov	r4,r5
    ac8c:	dfc00215 	stw	ra,8(sp)
    ac90:	80000015 	stw	zero,0(r16)
    ac94:	000e4fc0 	call	e4fc <isatty>
    ac98:	00ffffc4 	movi	r3,-1
    ac9c:	10c00526 	beq	r2,r3,acb4 <_isatty_r+0x44>
    aca0:	dfc00217 	ldw	ra,8(sp)
    aca4:	dc400117 	ldw	r17,4(sp)
    aca8:	dc000017 	ldw	r16,0(sp)
    acac:	dec00304 	addi	sp,sp,12
    acb0:	f800283a 	ret
    acb4:	80c00017 	ldw	r3,0(r16)
    acb8:	183ff926 	beq	r3,zero,aca0 <__reset+0xfbf0aca0>
    acbc:	88c00015 	stw	r3,0(r17)
    acc0:	003ff706 	br	aca0 <__reset+0xfbf0aca0>

0000acc4 <_lseek_r>:
    acc4:	defffd04 	addi	sp,sp,-12
    acc8:	2805883a 	mov	r2,r5
    accc:	dc000015 	stw	r16,0(sp)
    acd0:	04000074 	movhi	r16,1
    acd4:	dc400115 	stw	r17,4(sp)
    acd8:	300b883a 	mov	r5,r6
    acdc:	840a0c04 	addi	r16,r16,10288
    ace0:	2023883a 	mov	r17,r4
    ace4:	380d883a 	mov	r6,r7
    ace8:	1009883a 	mov	r4,r2
    acec:	dfc00215 	stw	ra,8(sp)
    acf0:	80000015 	stw	zero,0(r16)
    acf4:	000e5080 	call	e508 <lseek>
    acf8:	00ffffc4 	movi	r3,-1
    acfc:	10c00526 	beq	r2,r3,ad14 <_lseek_r+0x50>
    ad00:	dfc00217 	ldw	ra,8(sp)
    ad04:	dc400117 	ldw	r17,4(sp)
    ad08:	dc000017 	ldw	r16,0(sp)
    ad0c:	dec00304 	addi	sp,sp,12
    ad10:	f800283a 	ret
    ad14:	80c00017 	ldw	r3,0(r16)
    ad18:	183ff926 	beq	r3,zero,ad00 <__reset+0xfbf0ad00>
    ad1c:	88c00015 	stw	r3,0(r17)
    ad20:	003ff706 	br	ad00 <__reset+0xfbf0ad00>

0000ad24 <_read_r>:
    ad24:	defffd04 	addi	sp,sp,-12
    ad28:	2805883a 	mov	r2,r5
    ad2c:	dc000015 	stw	r16,0(sp)
    ad30:	04000074 	movhi	r16,1
    ad34:	dc400115 	stw	r17,4(sp)
    ad38:	300b883a 	mov	r5,r6
    ad3c:	840a0c04 	addi	r16,r16,10288
    ad40:	2023883a 	mov	r17,r4
    ad44:	380d883a 	mov	r6,r7
    ad48:	1009883a 	mov	r4,r2
    ad4c:	dfc00215 	stw	ra,8(sp)
    ad50:	80000015 	stw	zero,0(r16)
    ad54:	000e57c0 	call	e57c <read>
    ad58:	00ffffc4 	movi	r3,-1
    ad5c:	10c00526 	beq	r2,r3,ad74 <_read_r+0x50>
    ad60:	dfc00217 	ldw	ra,8(sp)
    ad64:	dc400117 	ldw	r17,4(sp)
    ad68:	dc000017 	ldw	r16,0(sp)
    ad6c:	dec00304 	addi	sp,sp,12
    ad70:	f800283a 	ret
    ad74:	80c00017 	ldw	r3,0(r16)
    ad78:	183ff926 	beq	r3,zero,ad60 <__reset+0xfbf0ad60>
    ad7c:	88c00015 	stw	r3,0(r17)
    ad80:	003ff706 	br	ad60 <__reset+0xfbf0ad60>

0000ad84 <__swbuf_r>:
    ad84:	defffb04 	addi	sp,sp,-20
    ad88:	dcc00315 	stw	r19,12(sp)
    ad8c:	dc800215 	stw	r18,8(sp)
    ad90:	dc000015 	stw	r16,0(sp)
    ad94:	dfc00415 	stw	ra,16(sp)
    ad98:	dc400115 	stw	r17,4(sp)
    ad9c:	2025883a 	mov	r18,r4
    ada0:	2827883a 	mov	r19,r5
    ada4:	3021883a 	mov	r16,r6
    ada8:	20000226 	beq	r4,zero,adb4 <__swbuf_r+0x30>
    adac:	20800e17 	ldw	r2,56(r4)
    adb0:	10004226 	beq	r2,zero,aebc <__swbuf_r+0x138>
    adb4:	80800617 	ldw	r2,24(r16)
    adb8:	8100030b 	ldhu	r4,12(r16)
    adbc:	80800215 	stw	r2,8(r16)
    adc0:	2080020c 	andi	r2,r4,8
    adc4:	10003626 	beq	r2,zero,aea0 <__swbuf_r+0x11c>
    adc8:	80c00417 	ldw	r3,16(r16)
    adcc:	18003426 	beq	r3,zero,aea0 <__swbuf_r+0x11c>
    add0:	2088000c 	andi	r2,r4,8192
    add4:	9c403fcc 	andi	r17,r19,255
    add8:	10001a26 	beq	r2,zero,ae44 <__swbuf_r+0xc0>
    addc:	80800017 	ldw	r2,0(r16)
    ade0:	81000517 	ldw	r4,20(r16)
    ade4:	10c7c83a 	sub	r3,r2,r3
    ade8:	1900200e 	bge	r3,r4,ae6c <__swbuf_r+0xe8>
    adec:	18c00044 	addi	r3,r3,1
    adf0:	81000217 	ldw	r4,8(r16)
    adf4:	11400044 	addi	r5,r2,1
    adf8:	81400015 	stw	r5,0(r16)
    adfc:	213fffc4 	addi	r4,r4,-1
    ae00:	81000215 	stw	r4,8(r16)
    ae04:	14c00005 	stb	r19,0(r2)
    ae08:	80800517 	ldw	r2,20(r16)
    ae0c:	10c01e26 	beq	r2,r3,ae88 <__swbuf_r+0x104>
    ae10:	8080030b 	ldhu	r2,12(r16)
    ae14:	1080004c 	andi	r2,r2,1
    ae18:	10000226 	beq	r2,zero,ae24 <__swbuf_r+0xa0>
    ae1c:	00800284 	movi	r2,10
    ae20:	88801926 	beq	r17,r2,ae88 <__swbuf_r+0x104>
    ae24:	8805883a 	mov	r2,r17
    ae28:	dfc00417 	ldw	ra,16(sp)
    ae2c:	dcc00317 	ldw	r19,12(sp)
    ae30:	dc800217 	ldw	r18,8(sp)
    ae34:	dc400117 	ldw	r17,4(sp)
    ae38:	dc000017 	ldw	r16,0(sp)
    ae3c:	dec00504 	addi	sp,sp,20
    ae40:	f800283a 	ret
    ae44:	81401917 	ldw	r5,100(r16)
    ae48:	00b7ffc4 	movi	r2,-8193
    ae4c:	21080014 	ori	r4,r4,8192
    ae50:	2884703a 	and	r2,r5,r2
    ae54:	80801915 	stw	r2,100(r16)
    ae58:	80800017 	ldw	r2,0(r16)
    ae5c:	8100030d 	sth	r4,12(r16)
    ae60:	81000517 	ldw	r4,20(r16)
    ae64:	10c7c83a 	sub	r3,r2,r3
    ae68:	193fe016 	blt	r3,r4,adec <__reset+0xfbf0adec>
    ae6c:	800b883a 	mov	r5,r16
    ae70:	9009883a 	mov	r4,r18
    ae74:	0005c380 	call	5c38 <_fflush_r>
    ae78:	1000071e 	bne	r2,zero,ae98 <__swbuf_r+0x114>
    ae7c:	80800017 	ldw	r2,0(r16)
    ae80:	00c00044 	movi	r3,1
    ae84:	003fda06 	br	adf0 <__reset+0xfbf0adf0>
    ae88:	800b883a 	mov	r5,r16
    ae8c:	9009883a 	mov	r4,r18
    ae90:	0005c380 	call	5c38 <_fflush_r>
    ae94:	103fe326 	beq	r2,zero,ae24 <__reset+0xfbf0ae24>
    ae98:	00bfffc4 	movi	r2,-1
    ae9c:	003fe206 	br	ae28 <__reset+0xfbf0ae28>
    aea0:	800b883a 	mov	r5,r16
    aea4:	9009883a 	mov	r4,r18
    aea8:	00040400 	call	4040 <__swsetup_r>
    aeac:	103ffa1e 	bne	r2,zero,ae98 <__reset+0xfbf0ae98>
    aeb0:	8100030b 	ldhu	r4,12(r16)
    aeb4:	80c00417 	ldw	r3,16(r16)
    aeb8:	003fc506 	br	add0 <__reset+0xfbf0add0>
    aebc:	00060140 	call	6014 <__sinit>
    aec0:	003fbc06 	br	adb4 <__reset+0xfbf0adb4>

0000aec4 <__swbuf>:
    aec4:	00800074 	movhi	r2,1
    aec8:	1089e504 	addi	r2,r2,10132
    aecc:	280d883a 	mov	r6,r5
    aed0:	200b883a 	mov	r5,r4
    aed4:	11000017 	ldw	r4,0(r2)
    aed8:	000ad841 	jmpi	ad84 <__swbuf_r>

0000aedc <_wcrtomb_r>:
    aedc:	defff604 	addi	sp,sp,-40
    aee0:	00800074 	movhi	r2,1
    aee4:	dc800815 	stw	r18,32(sp)
    aee8:	dc400715 	stw	r17,28(sp)
    aeec:	dc000615 	stw	r16,24(sp)
    aef0:	1089e904 	addi	r2,r2,10148
    aef4:	dfc00915 	stw	ra,36(sp)
    aef8:	2021883a 	mov	r16,r4
    aefc:	3823883a 	mov	r17,r7
    af00:	14800017 	ldw	r18,0(r2)
    af04:	28001426 	beq	r5,zero,af58 <_wcrtomb_r+0x7c>
    af08:	d9400415 	stw	r5,16(sp)
    af0c:	d9800515 	stw	r6,20(sp)
    af10:	0006b580 	call	6b58 <__locale_charset>
    af14:	d9800517 	ldw	r6,20(sp)
    af18:	d9400417 	ldw	r5,16(sp)
    af1c:	100f883a 	mov	r7,r2
    af20:	dc400015 	stw	r17,0(sp)
    af24:	8009883a 	mov	r4,r16
    af28:	903ee83a 	callr	r18
    af2c:	00ffffc4 	movi	r3,-1
    af30:	10c0031e 	bne	r2,r3,af40 <_wcrtomb_r+0x64>
    af34:	88000015 	stw	zero,0(r17)
    af38:	00c02284 	movi	r3,138
    af3c:	80c00015 	stw	r3,0(r16)
    af40:	dfc00917 	ldw	ra,36(sp)
    af44:	dc800817 	ldw	r18,32(sp)
    af48:	dc400717 	ldw	r17,28(sp)
    af4c:	dc000617 	ldw	r16,24(sp)
    af50:	dec00a04 	addi	sp,sp,40
    af54:	f800283a 	ret
    af58:	0006b580 	call	6b58 <__locale_charset>
    af5c:	100f883a 	mov	r7,r2
    af60:	dc400015 	stw	r17,0(sp)
    af64:	000d883a 	mov	r6,zero
    af68:	d9400104 	addi	r5,sp,4
    af6c:	8009883a 	mov	r4,r16
    af70:	903ee83a 	callr	r18
    af74:	003fed06 	br	af2c <__reset+0xfbf0af2c>

0000af78 <wcrtomb>:
    af78:	defff604 	addi	sp,sp,-40
    af7c:	00800074 	movhi	r2,1
    af80:	dc800615 	stw	r18,24(sp)
    af84:	dc400515 	stw	r17,20(sp)
    af88:	1089e504 	addi	r2,r2,10132
    af8c:	dfc00915 	stw	ra,36(sp)
    af90:	dd000815 	stw	r20,32(sp)
    af94:	dcc00715 	stw	r19,28(sp)
    af98:	dc000415 	stw	r16,16(sp)
    af9c:	3025883a 	mov	r18,r6
    afa0:	14400017 	ldw	r17,0(r2)
    afa4:	20001926 	beq	r4,zero,b00c <wcrtomb+0x94>
    afa8:	00800074 	movhi	r2,1
    afac:	1089e904 	addi	r2,r2,10148
    afb0:	15000017 	ldw	r20,0(r2)
    afb4:	2021883a 	mov	r16,r4
    afb8:	2827883a 	mov	r19,r5
    afbc:	0006b580 	call	6b58 <__locale_charset>
    afc0:	100f883a 	mov	r7,r2
    afc4:	dc800015 	stw	r18,0(sp)
    afc8:	980d883a 	mov	r6,r19
    afcc:	800b883a 	mov	r5,r16
    afd0:	8809883a 	mov	r4,r17
    afd4:	a03ee83a 	callr	r20
    afd8:	00ffffc4 	movi	r3,-1
    afdc:	10c0031e 	bne	r2,r3,afec <wcrtomb+0x74>
    afe0:	90000015 	stw	zero,0(r18)
    afe4:	00c02284 	movi	r3,138
    afe8:	88c00015 	stw	r3,0(r17)
    afec:	dfc00917 	ldw	ra,36(sp)
    aff0:	dd000817 	ldw	r20,32(sp)
    aff4:	dcc00717 	ldw	r19,28(sp)
    aff8:	dc800617 	ldw	r18,24(sp)
    affc:	dc400517 	ldw	r17,20(sp)
    b000:	dc000417 	ldw	r16,16(sp)
    b004:	dec00a04 	addi	sp,sp,40
    b008:	f800283a 	ret
    b00c:	00800074 	movhi	r2,1
    b010:	1089e904 	addi	r2,r2,10148
    b014:	14000017 	ldw	r16,0(r2)
    b018:	0006b580 	call	6b58 <__locale_charset>
    b01c:	100f883a 	mov	r7,r2
    b020:	dc800015 	stw	r18,0(sp)
    b024:	000d883a 	mov	r6,zero
    b028:	d9400104 	addi	r5,sp,4
    b02c:	8809883a 	mov	r4,r17
    b030:	803ee83a 	callr	r16
    b034:	003fe806 	br	afd8 <__reset+0xfbf0afd8>

0000b038 <__ascii_wctomb>:
    b038:	28000526 	beq	r5,zero,b050 <__ascii_wctomb+0x18>
    b03c:	00803fc4 	movi	r2,255
    b040:	11800536 	bltu	r2,r6,b058 <__ascii_wctomb+0x20>
    b044:	29800005 	stb	r6,0(r5)
    b048:	00800044 	movi	r2,1
    b04c:	f800283a 	ret
    b050:	0005883a 	mov	r2,zero
    b054:	f800283a 	ret
    b058:	00802284 	movi	r2,138
    b05c:	20800015 	stw	r2,0(r4)
    b060:	00bfffc4 	movi	r2,-1
    b064:	f800283a 	ret

0000b068 <_wctomb_r>:
    b068:	00800074 	movhi	r2,1
    b06c:	defff904 	addi	sp,sp,-28
    b070:	1089e904 	addi	r2,r2,10148
    b074:	dfc00615 	stw	ra,24(sp)
    b078:	dc400515 	stw	r17,20(sp)
    b07c:	dc000415 	stw	r16,16(sp)
    b080:	3823883a 	mov	r17,r7
    b084:	14000017 	ldw	r16,0(r2)
    b088:	d9000115 	stw	r4,4(sp)
    b08c:	d9400215 	stw	r5,8(sp)
    b090:	d9800315 	stw	r6,12(sp)
    b094:	0006b580 	call	6b58 <__locale_charset>
    b098:	d9800317 	ldw	r6,12(sp)
    b09c:	d9400217 	ldw	r5,8(sp)
    b0a0:	d9000117 	ldw	r4,4(sp)
    b0a4:	100f883a 	mov	r7,r2
    b0a8:	dc400015 	stw	r17,0(sp)
    b0ac:	803ee83a 	callr	r16
    b0b0:	dfc00617 	ldw	ra,24(sp)
    b0b4:	dc400517 	ldw	r17,20(sp)
    b0b8:	dc000417 	ldw	r16,16(sp)
    b0bc:	dec00704 	addi	sp,sp,28
    b0c0:	f800283a 	ret

0000b0c4 <__udivdi3>:
    b0c4:	defff504 	addi	sp,sp,-44
    b0c8:	dcc00415 	stw	r19,16(sp)
    b0cc:	dc000115 	stw	r16,4(sp)
    b0d0:	dfc00a15 	stw	ra,40(sp)
    b0d4:	df000915 	stw	fp,36(sp)
    b0d8:	ddc00815 	stw	r23,32(sp)
    b0dc:	dd800715 	stw	r22,28(sp)
    b0e0:	dd400615 	stw	r21,24(sp)
    b0e4:	dd000515 	stw	r20,20(sp)
    b0e8:	dc800315 	stw	r18,12(sp)
    b0ec:	dc400215 	stw	r17,8(sp)
    b0f0:	2027883a 	mov	r19,r4
    b0f4:	2821883a 	mov	r16,r5
    b0f8:	3800411e 	bne	r7,zero,b200 <__udivdi3+0x13c>
    b0fc:	3023883a 	mov	r17,r6
    b100:	2025883a 	mov	r18,r4
    b104:	2980522e 	bgeu	r5,r6,b250 <__udivdi3+0x18c>
    b108:	00bfffd4 	movui	r2,65535
    b10c:	282d883a 	mov	r22,r5
    b110:	1180a836 	bltu	r2,r6,b3b4 <__udivdi3+0x2f0>
    b114:	00803fc4 	movi	r2,255
    b118:	1185803a 	cmpltu	r2,r2,r6
    b11c:	100490fa 	slli	r2,r2,3
    b120:	3086d83a 	srl	r3,r6,r2
    b124:	01000074 	movhi	r4,1
    b128:	2101a804 	addi	r4,r4,1696
    b12c:	20c7883a 	add	r3,r4,r3
    b130:	18c00003 	ldbu	r3,0(r3)
    b134:	1885883a 	add	r2,r3,r2
    b138:	00c00804 	movi	r3,32
    b13c:	1887c83a 	sub	r3,r3,r2
    b140:	18000526 	beq	r3,zero,b158 <__udivdi3+0x94>
    b144:	80e0983a 	sll	r16,r16,r3
    b148:	9884d83a 	srl	r2,r19,r2
    b14c:	30e2983a 	sll	r17,r6,r3
    b150:	98e4983a 	sll	r18,r19,r3
    b154:	142cb03a 	or	r22,r2,r16
    b158:	882ad43a 	srli	r21,r17,16
    b15c:	b009883a 	mov	r4,r22
    b160:	8d3fffcc 	andi	r20,r17,65535
    b164:	a80b883a 	mov	r5,r21
    b168:	000bcd00 	call	bcd0 <__umodsi3>
    b16c:	b009883a 	mov	r4,r22
    b170:	a80b883a 	mov	r5,r21
    b174:	1027883a 	mov	r19,r2
    b178:	000bc6c0 	call	bc6c <__udivsi3>
    b17c:	102d883a 	mov	r22,r2
    b180:	9826943a 	slli	r19,r19,16
    b184:	9004d43a 	srli	r2,r18,16
    b188:	a5a1383a 	mul	r16,r20,r22
    b18c:	14c4b03a 	or	r2,r2,r19
    b190:	1400052e 	bgeu	r2,r16,b1a8 <__udivdi3+0xe4>
    b194:	1445883a 	add	r2,r2,r17
    b198:	b0ffffc4 	addi	r3,r22,-1
    b19c:	14400136 	bltu	r2,r17,b1a4 <__udivdi3+0xe0>
    b1a0:	14012336 	bltu	r2,r16,b630 <__udivdi3+0x56c>
    b1a4:	182d883a 	mov	r22,r3
    b1a8:	1421c83a 	sub	r16,r2,r16
    b1ac:	a80b883a 	mov	r5,r21
    b1b0:	8009883a 	mov	r4,r16
    b1b4:	000bcd00 	call	bcd0 <__umodsi3>
    b1b8:	1027883a 	mov	r19,r2
    b1bc:	a80b883a 	mov	r5,r21
    b1c0:	8009883a 	mov	r4,r16
    b1c4:	000bc6c0 	call	bc6c <__udivsi3>
    b1c8:	9826943a 	slli	r19,r19,16
    b1cc:	a0a9383a 	mul	r20,r20,r2
    b1d0:	94bfffcc 	andi	r18,r18,65535
    b1d4:	94e4b03a 	or	r18,r18,r19
    b1d8:	9500052e 	bgeu	r18,r20,b1f0 <__udivdi3+0x12c>
    b1dc:	8ca5883a 	add	r18,r17,r18
    b1e0:	10ffffc4 	addi	r3,r2,-1
    b1e4:	9440f136 	bltu	r18,r17,b5ac <__udivdi3+0x4e8>
    b1e8:	9500f02e 	bgeu	r18,r20,b5ac <__udivdi3+0x4e8>
    b1ec:	10bfff84 	addi	r2,r2,-2
    b1f0:	b00c943a 	slli	r6,r22,16
    b1f4:	0007883a 	mov	r3,zero
    b1f8:	3084b03a 	or	r2,r6,r2
    b1fc:	00005906 	br	b364 <__udivdi3+0x2a0>
    b200:	29c05636 	bltu	r5,r7,b35c <__udivdi3+0x298>
    b204:	00bfffd4 	movui	r2,65535
    b208:	11c0622e 	bgeu	r2,r7,b394 <__udivdi3+0x2d0>
    b20c:	00804034 	movhi	r2,256
    b210:	10bfffc4 	addi	r2,r2,-1
    b214:	11c0ee36 	bltu	r2,r7,b5d0 <__udivdi3+0x50c>
    b218:	00800404 	movi	r2,16
    b21c:	3886d83a 	srl	r3,r7,r2
    b220:	01000074 	movhi	r4,1
    b224:	2101a804 	addi	r4,r4,1696
    b228:	20c7883a 	add	r3,r4,r3
    b22c:	18c00003 	ldbu	r3,0(r3)
    b230:	05400804 	movi	r21,32
    b234:	1885883a 	add	r2,r3,r2
    b238:	a8abc83a 	sub	r21,r21,r2
    b23c:	a800621e 	bne	r21,zero,b3c8 <__udivdi3+0x304>
    b240:	3c00e936 	bltu	r7,r16,b5e8 <__udivdi3+0x524>
    b244:	9985403a 	cmpgeu	r2,r19,r6
    b248:	0007883a 	mov	r3,zero
    b24c:	00004506 	br	b364 <__udivdi3+0x2a0>
    b250:	3000041e 	bne	r6,zero,b264 <__udivdi3+0x1a0>
    b254:	000b883a 	mov	r5,zero
    b258:	01000044 	movi	r4,1
    b25c:	000bc6c0 	call	bc6c <__udivsi3>
    b260:	1023883a 	mov	r17,r2
    b264:	00bfffd4 	movui	r2,65535
    b268:	14404e2e 	bgeu	r2,r17,b3a4 <__udivdi3+0x2e0>
    b26c:	00804034 	movhi	r2,256
    b270:	10bfffc4 	addi	r2,r2,-1
    b274:	1440d836 	bltu	r2,r17,b5d8 <__udivdi3+0x514>
    b278:	00800404 	movi	r2,16
    b27c:	8886d83a 	srl	r3,r17,r2
    b280:	01000074 	movhi	r4,1
    b284:	2101a804 	addi	r4,r4,1696
    b288:	20c7883a 	add	r3,r4,r3
    b28c:	18c00003 	ldbu	r3,0(r3)
    b290:	1885883a 	add	r2,r3,r2
    b294:	00c00804 	movi	r3,32
    b298:	1887c83a 	sub	r3,r3,r2
    b29c:	18008f1e 	bne	r3,zero,b4dc <__udivdi3+0x418>
    b2a0:	882ad43a 	srli	r21,r17,16
    b2a4:	8461c83a 	sub	r16,r16,r17
    b2a8:	8d3fffcc 	andi	r20,r17,65535
    b2ac:	00c00044 	movi	r3,1
    b2b0:	8009883a 	mov	r4,r16
    b2b4:	a80b883a 	mov	r5,r21
    b2b8:	d8c00015 	stw	r3,0(sp)
    b2bc:	000bcd00 	call	bcd0 <__umodsi3>
    b2c0:	8009883a 	mov	r4,r16
    b2c4:	a80b883a 	mov	r5,r21
    b2c8:	1027883a 	mov	r19,r2
    b2cc:	000bc6c0 	call	bc6c <__udivsi3>
    b2d0:	9826943a 	slli	r19,r19,16
    b2d4:	9008d43a 	srli	r4,r18,16
    b2d8:	1521383a 	mul	r16,r2,r20
    b2dc:	102d883a 	mov	r22,r2
    b2e0:	24c8b03a 	or	r4,r4,r19
    b2e4:	d8c00017 	ldw	r3,0(sp)
    b2e8:	2400052e 	bgeu	r4,r16,b300 <__udivdi3+0x23c>
    b2ec:	2449883a 	add	r4,r4,r17
    b2f0:	b0bfffc4 	addi	r2,r22,-1
    b2f4:	24400136 	bltu	r4,r17,b2fc <__udivdi3+0x238>
    b2f8:	2400ca36 	bltu	r4,r16,b624 <__udivdi3+0x560>
    b2fc:	102d883a 	mov	r22,r2
    b300:	2421c83a 	sub	r16,r4,r16
    b304:	a80b883a 	mov	r5,r21
    b308:	8009883a 	mov	r4,r16
    b30c:	d8c00015 	stw	r3,0(sp)
    b310:	000bcd00 	call	bcd0 <__umodsi3>
    b314:	1027883a 	mov	r19,r2
    b318:	a80b883a 	mov	r5,r21
    b31c:	8009883a 	mov	r4,r16
    b320:	000bc6c0 	call	bc6c <__udivsi3>
    b324:	9826943a 	slli	r19,r19,16
    b328:	1529383a 	mul	r20,r2,r20
    b32c:	94bfffcc 	andi	r18,r18,65535
    b330:	94e4b03a 	or	r18,r18,r19
    b334:	d8c00017 	ldw	r3,0(sp)
    b338:	9500052e 	bgeu	r18,r20,b350 <__udivdi3+0x28c>
    b33c:	8ca5883a 	add	r18,r17,r18
    b340:	113fffc4 	addi	r4,r2,-1
    b344:	94409736 	bltu	r18,r17,b5a4 <__udivdi3+0x4e0>
    b348:	9500962e 	bgeu	r18,r20,b5a4 <__udivdi3+0x4e0>
    b34c:	10bfff84 	addi	r2,r2,-2
    b350:	b00c943a 	slli	r6,r22,16
    b354:	3084b03a 	or	r2,r6,r2
    b358:	00000206 	br	b364 <__udivdi3+0x2a0>
    b35c:	0007883a 	mov	r3,zero
    b360:	0005883a 	mov	r2,zero
    b364:	dfc00a17 	ldw	ra,40(sp)
    b368:	df000917 	ldw	fp,36(sp)
    b36c:	ddc00817 	ldw	r23,32(sp)
    b370:	dd800717 	ldw	r22,28(sp)
    b374:	dd400617 	ldw	r21,24(sp)
    b378:	dd000517 	ldw	r20,20(sp)
    b37c:	dcc00417 	ldw	r19,16(sp)
    b380:	dc800317 	ldw	r18,12(sp)
    b384:	dc400217 	ldw	r17,8(sp)
    b388:	dc000117 	ldw	r16,4(sp)
    b38c:	dec00b04 	addi	sp,sp,44
    b390:	f800283a 	ret
    b394:	00803fc4 	movi	r2,255
    b398:	11c5803a 	cmpltu	r2,r2,r7
    b39c:	100490fa 	slli	r2,r2,3
    b3a0:	003f9e06 	br	b21c <__reset+0xfbf0b21c>
    b3a4:	00803fc4 	movi	r2,255
    b3a8:	1445803a 	cmpltu	r2,r2,r17
    b3ac:	100490fa 	slli	r2,r2,3
    b3b0:	003fb206 	br	b27c <__reset+0xfbf0b27c>
    b3b4:	00804034 	movhi	r2,256
    b3b8:	10bfffc4 	addi	r2,r2,-1
    b3bc:	11808836 	bltu	r2,r6,b5e0 <__udivdi3+0x51c>
    b3c0:	00800404 	movi	r2,16
    b3c4:	003f5606 	br	b120 <__reset+0xfbf0b120>
    b3c8:	30aed83a 	srl	r23,r6,r2
    b3cc:	3d4e983a 	sll	r7,r7,r21
    b3d0:	80acd83a 	srl	r22,r16,r2
    b3d4:	9884d83a 	srl	r2,r19,r2
    b3d8:	3deeb03a 	or	r23,r7,r23
    b3dc:	b824d43a 	srli	r18,r23,16
    b3e0:	8560983a 	sll	r16,r16,r21
    b3e4:	b009883a 	mov	r4,r22
    b3e8:	900b883a 	mov	r5,r18
    b3ec:	3568983a 	sll	r20,r6,r21
    b3f0:	1420b03a 	or	r16,r2,r16
    b3f4:	000bcd00 	call	bcd0 <__umodsi3>
    b3f8:	b009883a 	mov	r4,r22
    b3fc:	900b883a 	mov	r5,r18
    b400:	1023883a 	mov	r17,r2
    b404:	000bc6c0 	call	bc6c <__udivsi3>
    b408:	8808943a 	slli	r4,r17,16
    b40c:	bf3fffcc 	andi	fp,r23,65535
    b410:	8006d43a 	srli	r3,r16,16
    b414:	e0a3383a 	mul	r17,fp,r2
    b418:	100d883a 	mov	r6,r2
    b41c:	1906b03a 	or	r3,r3,r4
    b420:	1c40042e 	bgeu	r3,r17,b434 <__udivdi3+0x370>
    b424:	1dc7883a 	add	r3,r3,r23
    b428:	10bfffc4 	addi	r2,r2,-1
    b42c:	1dc0752e 	bgeu	r3,r23,b604 <__udivdi3+0x540>
    b430:	100d883a 	mov	r6,r2
    b434:	1c63c83a 	sub	r17,r3,r17
    b438:	900b883a 	mov	r5,r18
    b43c:	8809883a 	mov	r4,r17
    b440:	d9800015 	stw	r6,0(sp)
    b444:	000bcd00 	call	bcd0 <__umodsi3>
    b448:	102d883a 	mov	r22,r2
    b44c:	8809883a 	mov	r4,r17
    b450:	900b883a 	mov	r5,r18
    b454:	000bc6c0 	call	bc6c <__udivsi3>
    b458:	b02c943a 	slli	r22,r22,16
    b45c:	e089383a 	mul	r4,fp,r2
    b460:	843fffcc 	andi	r16,r16,65535
    b464:	85a0b03a 	or	r16,r16,r22
    b468:	d9800017 	ldw	r6,0(sp)
    b46c:	8100042e 	bgeu	r16,r4,b480 <__udivdi3+0x3bc>
    b470:	85e1883a 	add	r16,r16,r23
    b474:	10ffffc4 	addi	r3,r2,-1
    b478:	85c05e2e 	bgeu	r16,r23,b5f4 <__udivdi3+0x530>
    b47c:	1805883a 	mov	r2,r3
    b480:	300c943a 	slli	r6,r6,16
    b484:	a17fffcc 	andi	r5,r20,65535
    b488:	a028d43a 	srli	r20,r20,16
    b48c:	3084b03a 	or	r2,r6,r2
    b490:	10ffffcc 	andi	r3,r2,65535
    b494:	100cd43a 	srli	r6,r2,16
    b498:	194f383a 	mul	r7,r3,r5
    b49c:	1d07383a 	mul	r3,r3,r20
    b4a0:	314b383a 	mul	r5,r6,r5
    b4a4:	3810d43a 	srli	r8,r7,16
    b4a8:	8121c83a 	sub	r16,r16,r4
    b4ac:	1947883a 	add	r3,r3,r5
    b4b0:	40c7883a 	add	r3,r8,r3
    b4b4:	350d383a 	mul	r6,r6,r20
    b4b8:	1940022e 	bgeu	r3,r5,b4c4 <__udivdi3+0x400>
    b4bc:	01000074 	movhi	r4,1
    b4c0:	310d883a 	add	r6,r6,r4
    b4c4:	1828d43a 	srli	r20,r3,16
    b4c8:	a18d883a 	add	r6,r20,r6
    b4cc:	81803e36 	bltu	r16,r6,b5c8 <__udivdi3+0x504>
    b4d0:	81803826 	beq	r16,r6,b5b4 <__udivdi3+0x4f0>
    b4d4:	0007883a 	mov	r3,zero
    b4d8:	003fa206 	br	b364 <__reset+0xfbf0b364>
    b4dc:	88e2983a 	sll	r17,r17,r3
    b4e0:	80a8d83a 	srl	r20,r16,r2
    b4e4:	80e0983a 	sll	r16,r16,r3
    b4e8:	882ad43a 	srli	r21,r17,16
    b4ec:	9884d83a 	srl	r2,r19,r2
    b4f0:	a009883a 	mov	r4,r20
    b4f4:	a80b883a 	mov	r5,r21
    b4f8:	142eb03a 	or	r23,r2,r16
    b4fc:	98e4983a 	sll	r18,r19,r3
    b500:	000bcd00 	call	bcd0 <__umodsi3>
    b504:	a009883a 	mov	r4,r20
    b508:	a80b883a 	mov	r5,r21
    b50c:	1021883a 	mov	r16,r2
    b510:	000bc6c0 	call	bc6c <__udivsi3>
    b514:	1039883a 	mov	fp,r2
    b518:	8d3fffcc 	andi	r20,r17,65535
    b51c:	8020943a 	slli	r16,r16,16
    b520:	b804d43a 	srli	r2,r23,16
    b524:	a72d383a 	mul	r22,r20,fp
    b528:	1404b03a 	or	r2,r2,r16
    b52c:	1580062e 	bgeu	r2,r22,b548 <__udivdi3+0x484>
    b530:	1445883a 	add	r2,r2,r17
    b534:	e0ffffc4 	addi	r3,fp,-1
    b538:	14403836 	bltu	r2,r17,b61c <__udivdi3+0x558>
    b53c:	1580372e 	bgeu	r2,r22,b61c <__udivdi3+0x558>
    b540:	e73fff84 	addi	fp,fp,-2
    b544:	1445883a 	add	r2,r2,r17
    b548:	15adc83a 	sub	r22,r2,r22
    b54c:	a80b883a 	mov	r5,r21
    b550:	b009883a 	mov	r4,r22
    b554:	000bcd00 	call	bcd0 <__umodsi3>
    b558:	1027883a 	mov	r19,r2
    b55c:	b009883a 	mov	r4,r22
    b560:	a80b883a 	mov	r5,r21
    b564:	000bc6c0 	call	bc6c <__udivsi3>
    b568:	9826943a 	slli	r19,r19,16
    b56c:	a0a1383a 	mul	r16,r20,r2
    b570:	b93fffcc 	andi	r4,r23,65535
    b574:	24c8b03a 	or	r4,r4,r19
    b578:	2400062e 	bgeu	r4,r16,b594 <__udivdi3+0x4d0>
    b57c:	2449883a 	add	r4,r4,r17
    b580:	10ffffc4 	addi	r3,r2,-1
    b584:	24402336 	bltu	r4,r17,b614 <__udivdi3+0x550>
    b588:	2400222e 	bgeu	r4,r16,b614 <__udivdi3+0x550>
    b58c:	10bfff84 	addi	r2,r2,-2
    b590:	2449883a 	add	r4,r4,r17
    b594:	e038943a 	slli	fp,fp,16
    b598:	2421c83a 	sub	r16,r4,r16
    b59c:	e086b03a 	or	r3,fp,r2
    b5a0:	003f4306 	br	b2b0 <__reset+0xfbf0b2b0>
    b5a4:	2005883a 	mov	r2,r4
    b5a8:	003f6906 	br	b350 <__reset+0xfbf0b350>
    b5ac:	1805883a 	mov	r2,r3
    b5b0:	003f0f06 	br	b1f0 <__reset+0xfbf0b1f0>
    b5b4:	1806943a 	slli	r3,r3,16
    b5b8:	9d66983a 	sll	r19,r19,r21
    b5bc:	39ffffcc 	andi	r7,r7,65535
    b5c0:	19c7883a 	add	r3,r3,r7
    b5c4:	98ffc32e 	bgeu	r19,r3,b4d4 <__reset+0xfbf0b4d4>
    b5c8:	10bfffc4 	addi	r2,r2,-1
    b5cc:	003fc106 	br	b4d4 <__reset+0xfbf0b4d4>
    b5d0:	00800604 	movi	r2,24
    b5d4:	003f1106 	br	b21c <__reset+0xfbf0b21c>
    b5d8:	00800604 	movi	r2,24
    b5dc:	003f2706 	br	b27c <__reset+0xfbf0b27c>
    b5e0:	00800604 	movi	r2,24
    b5e4:	003ece06 	br	b120 <__reset+0xfbf0b120>
    b5e8:	0007883a 	mov	r3,zero
    b5ec:	00800044 	movi	r2,1
    b5f0:	003f5c06 	br	b364 <__reset+0xfbf0b364>
    b5f4:	813fa12e 	bgeu	r16,r4,b47c <__reset+0xfbf0b47c>
    b5f8:	10bfff84 	addi	r2,r2,-2
    b5fc:	85e1883a 	add	r16,r16,r23
    b600:	003f9f06 	br	b480 <__reset+0xfbf0b480>
    b604:	1c7f8a2e 	bgeu	r3,r17,b430 <__reset+0xfbf0b430>
    b608:	31bfff84 	addi	r6,r6,-2
    b60c:	1dc7883a 	add	r3,r3,r23
    b610:	003f8806 	br	b434 <__reset+0xfbf0b434>
    b614:	1805883a 	mov	r2,r3
    b618:	003fde06 	br	b594 <__reset+0xfbf0b594>
    b61c:	1839883a 	mov	fp,r3
    b620:	003fc906 	br	b548 <__reset+0xfbf0b548>
    b624:	b5bfff84 	addi	r22,r22,-2
    b628:	2449883a 	add	r4,r4,r17
    b62c:	003f3406 	br	b300 <__reset+0xfbf0b300>
    b630:	b5bfff84 	addi	r22,r22,-2
    b634:	1445883a 	add	r2,r2,r17
    b638:	003edb06 	br	b1a8 <__reset+0xfbf0b1a8>

0000b63c <__umoddi3>:
    b63c:	defff404 	addi	sp,sp,-48
    b640:	df000a15 	stw	fp,40(sp)
    b644:	dc400315 	stw	r17,12(sp)
    b648:	dc000215 	stw	r16,8(sp)
    b64c:	dfc00b15 	stw	ra,44(sp)
    b650:	ddc00915 	stw	r23,36(sp)
    b654:	dd800815 	stw	r22,32(sp)
    b658:	dd400715 	stw	r21,28(sp)
    b65c:	dd000615 	stw	r20,24(sp)
    b660:	dcc00515 	stw	r19,20(sp)
    b664:	dc800415 	stw	r18,16(sp)
    b668:	2021883a 	mov	r16,r4
    b66c:	2823883a 	mov	r17,r5
    b670:	2839883a 	mov	fp,r5
    b674:	38003c1e 	bne	r7,zero,b768 <__umoddi3+0x12c>
    b678:	3027883a 	mov	r19,r6
    b67c:	2029883a 	mov	r20,r4
    b680:	2980512e 	bgeu	r5,r6,b7c8 <__umoddi3+0x18c>
    b684:	00bfffd4 	movui	r2,65535
    b688:	11809a36 	bltu	r2,r6,b8f4 <__umoddi3+0x2b8>
    b68c:	01003fc4 	movi	r4,255
    b690:	2189803a 	cmpltu	r4,r4,r6
    b694:	200890fa 	slli	r4,r4,3
    b698:	3104d83a 	srl	r2,r6,r4
    b69c:	00c00074 	movhi	r3,1
    b6a0:	18c1a804 	addi	r3,r3,1696
    b6a4:	1885883a 	add	r2,r3,r2
    b6a8:	10c00003 	ldbu	r3,0(r2)
    b6ac:	00800804 	movi	r2,32
    b6b0:	1909883a 	add	r4,r3,r4
    b6b4:	1125c83a 	sub	r18,r2,r4
    b6b8:	90000526 	beq	r18,zero,b6d0 <__umoddi3+0x94>
    b6bc:	8ca2983a 	sll	r17,r17,r18
    b6c0:	8108d83a 	srl	r4,r16,r4
    b6c4:	34a6983a 	sll	r19,r6,r18
    b6c8:	84a8983a 	sll	r20,r16,r18
    b6cc:	2478b03a 	or	fp,r4,r17
    b6d0:	982ed43a 	srli	r23,r19,16
    b6d4:	e009883a 	mov	r4,fp
    b6d8:	9dbfffcc 	andi	r22,r19,65535
    b6dc:	b80b883a 	mov	r5,r23
    b6e0:	000bcd00 	call	bcd0 <__umodsi3>
    b6e4:	e009883a 	mov	r4,fp
    b6e8:	b80b883a 	mov	r5,r23
    b6ec:	102b883a 	mov	r21,r2
    b6f0:	000bc6c0 	call	bc6c <__udivsi3>
    b6f4:	a806943a 	slli	r3,r21,16
    b6f8:	a008d43a 	srli	r4,r20,16
    b6fc:	b085383a 	mul	r2,r22,r2
    b700:	20c8b03a 	or	r4,r4,r3
    b704:	2080032e 	bgeu	r4,r2,b714 <__umoddi3+0xd8>
    b708:	24c9883a 	add	r4,r4,r19
    b70c:	24c00136 	bltu	r4,r19,b714 <__umoddi3+0xd8>
    b710:	20811036 	bltu	r4,r2,bb54 <__umoddi3+0x518>
    b714:	20abc83a 	sub	r21,r4,r2
    b718:	b80b883a 	mov	r5,r23
    b71c:	a809883a 	mov	r4,r21
    b720:	000bcd00 	call	bcd0 <__umodsi3>
    b724:	1023883a 	mov	r17,r2
    b728:	b80b883a 	mov	r5,r23
    b72c:	a809883a 	mov	r4,r21
    b730:	000bc6c0 	call	bc6c <__udivsi3>
    b734:	8822943a 	slli	r17,r17,16
    b738:	b085383a 	mul	r2,r22,r2
    b73c:	a0ffffcc 	andi	r3,r20,65535
    b740:	1c46b03a 	or	r3,r3,r17
    b744:	1880042e 	bgeu	r3,r2,b758 <__umoddi3+0x11c>
    b748:	1cc7883a 	add	r3,r3,r19
    b74c:	1cc00236 	bltu	r3,r19,b758 <__umoddi3+0x11c>
    b750:	1880012e 	bgeu	r3,r2,b758 <__umoddi3+0x11c>
    b754:	1cc7883a 	add	r3,r3,r19
    b758:	1885c83a 	sub	r2,r3,r2
    b75c:	1484d83a 	srl	r2,r2,r18
    b760:	0007883a 	mov	r3,zero
    b764:	00004f06 	br	b8a4 <__umoddi3+0x268>
    b768:	29c04c36 	bltu	r5,r7,b89c <__umoddi3+0x260>
    b76c:	00bfffd4 	movui	r2,65535
    b770:	11c0582e 	bgeu	r2,r7,b8d4 <__umoddi3+0x298>
    b774:	00804034 	movhi	r2,256
    b778:	10bfffc4 	addi	r2,r2,-1
    b77c:	11c0e736 	bltu	r2,r7,bb1c <__umoddi3+0x4e0>
    b780:	01000404 	movi	r4,16
    b784:	3904d83a 	srl	r2,r7,r4
    b788:	00c00074 	movhi	r3,1
    b78c:	18c1a804 	addi	r3,r3,1696
    b790:	1885883a 	add	r2,r3,r2
    b794:	14c00003 	ldbu	r19,0(r2)
    b798:	00c00804 	movi	r3,32
    b79c:	9927883a 	add	r19,r19,r4
    b7a0:	1ce9c83a 	sub	r20,r3,r19
    b7a4:	a000581e 	bne	r20,zero,b908 <__umoddi3+0x2cc>
    b7a8:	3c400136 	bltu	r7,r17,b7b0 <__umoddi3+0x174>
    b7ac:	8180eb36 	bltu	r16,r6,bb5c <__umoddi3+0x520>
    b7b0:	8185c83a 	sub	r2,r16,r6
    b7b4:	89e3c83a 	sub	r17,r17,r7
    b7b8:	8089803a 	cmpltu	r4,r16,r2
    b7bc:	8939c83a 	sub	fp,r17,r4
    b7c0:	e007883a 	mov	r3,fp
    b7c4:	00003706 	br	b8a4 <__umoddi3+0x268>
    b7c8:	3000041e 	bne	r6,zero,b7dc <__umoddi3+0x1a0>
    b7cc:	000b883a 	mov	r5,zero
    b7d0:	01000044 	movi	r4,1
    b7d4:	000bc6c0 	call	bc6c <__udivsi3>
    b7d8:	1027883a 	mov	r19,r2
    b7dc:	00bfffd4 	movui	r2,65535
    b7e0:	14c0402e 	bgeu	r2,r19,b8e4 <__umoddi3+0x2a8>
    b7e4:	00804034 	movhi	r2,256
    b7e8:	10bfffc4 	addi	r2,r2,-1
    b7ec:	14c0cd36 	bltu	r2,r19,bb24 <__umoddi3+0x4e8>
    b7f0:	00800404 	movi	r2,16
    b7f4:	9886d83a 	srl	r3,r19,r2
    b7f8:	01000074 	movhi	r4,1
    b7fc:	2101a804 	addi	r4,r4,1696
    b800:	20c7883a 	add	r3,r4,r3
    b804:	18c00003 	ldbu	r3,0(r3)
    b808:	1887883a 	add	r3,r3,r2
    b80c:	00800804 	movi	r2,32
    b810:	10e5c83a 	sub	r18,r2,r3
    b814:	9000901e 	bne	r18,zero,ba58 <__umoddi3+0x41c>
    b818:	982cd43a 	srli	r22,r19,16
    b81c:	8ce3c83a 	sub	r17,r17,r19
    b820:	9d7fffcc 	andi	r21,r19,65535
    b824:	b00b883a 	mov	r5,r22
    b828:	8809883a 	mov	r4,r17
    b82c:	000bcd00 	call	bcd0 <__umodsi3>
    b830:	8809883a 	mov	r4,r17
    b834:	b00b883a 	mov	r5,r22
    b838:	1021883a 	mov	r16,r2
    b83c:	000bc6c0 	call	bc6c <__udivsi3>
    b840:	8006943a 	slli	r3,r16,16
    b844:	a008d43a 	srli	r4,r20,16
    b848:	1545383a 	mul	r2,r2,r21
    b84c:	20c8b03a 	or	r4,r4,r3
    b850:	2080042e 	bgeu	r4,r2,b864 <__umoddi3+0x228>
    b854:	24c9883a 	add	r4,r4,r19
    b858:	24c00236 	bltu	r4,r19,b864 <__umoddi3+0x228>
    b85c:	2080012e 	bgeu	r4,r2,b864 <__umoddi3+0x228>
    b860:	24c9883a 	add	r4,r4,r19
    b864:	20a1c83a 	sub	r16,r4,r2
    b868:	b00b883a 	mov	r5,r22
    b86c:	8009883a 	mov	r4,r16
    b870:	000bcd00 	call	bcd0 <__umodsi3>
    b874:	1023883a 	mov	r17,r2
    b878:	b00b883a 	mov	r5,r22
    b87c:	8009883a 	mov	r4,r16
    b880:	000bc6c0 	call	bc6c <__udivsi3>
    b884:	8822943a 	slli	r17,r17,16
    b888:	1545383a 	mul	r2,r2,r21
    b88c:	a53fffcc 	andi	r20,r20,65535
    b890:	a446b03a 	or	r3,r20,r17
    b894:	18bfb02e 	bgeu	r3,r2,b758 <__reset+0xfbf0b758>
    b898:	003fab06 	br	b748 <__reset+0xfbf0b748>
    b89c:	2005883a 	mov	r2,r4
    b8a0:	2807883a 	mov	r3,r5
    b8a4:	dfc00b17 	ldw	ra,44(sp)
    b8a8:	df000a17 	ldw	fp,40(sp)
    b8ac:	ddc00917 	ldw	r23,36(sp)
    b8b0:	dd800817 	ldw	r22,32(sp)
    b8b4:	dd400717 	ldw	r21,28(sp)
    b8b8:	dd000617 	ldw	r20,24(sp)
    b8bc:	dcc00517 	ldw	r19,20(sp)
    b8c0:	dc800417 	ldw	r18,16(sp)
    b8c4:	dc400317 	ldw	r17,12(sp)
    b8c8:	dc000217 	ldw	r16,8(sp)
    b8cc:	dec00c04 	addi	sp,sp,48
    b8d0:	f800283a 	ret
    b8d4:	04c03fc4 	movi	r19,255
    b8d8:	99c9803a 	cmpltu	r4,r19,r7
    b8dc:	200890fa 	slli	r4,r4,3
    b8e0:	003fa806 	br	b784 <__reset+0xfbf0b784>
    b8e4:	00803fc4 	movi	r2,255
    b8e8:	14c5803a 	cmpltu	r2,r2,r19
    b8ec:	100490fa 	slli	r2,r2,3
    b8f0:	003fc006 	br	b7f4 <__reset+0xfbf0b7f4>
    b8f4:	00804034 	movhi	r2,256
    b8f8:	10bfffc4 	addi	r2,r2,-1
    b8fc:	11808b36 	bltu	r2,r6,bb2c <__umoddi3+0x4f0>
    b900:	01000404 	movi	r4,16
    b904:	003f6406 	br	b698 <__reset+0xfbf0b698>
    b908:	34c4d83a 	srl	r2,r6,r19
    b90c:	3d0e983a 	sll	r7,r7,r20
    b910:	8cf8d83a 	srl	fp,r17,r19
    b914:	8d10983a 	sll	r8,r17,r20
    b918:	38aab03a 	or	r21,r7,r2
    b91c:	a82cd43a 	srli	r22,r21,16
    b920:	84e2d83a 	srl	r17,r16,r19
    b924:	e009883a 	mov	r4,fp
    b928:	b00b883a 	mov	r5,r22
    b92c:	8a22b03a 	or	r17,r17,r8
    b930:	3524983a 	sll	r18,r6,r20
    b934:	000bcd00 	call	bcd0 <__umodsi3>
    b938:	e009883a 	mov	r4,fp
    b93c:	b00b883a 	mov	r5,r22
    b940:	102f883a 	mov	r23,r2
    b944:	000bc6c0 	call	bc6c <__udivsi3>
    b948:	100d883a 	mov	r6,r2
    b94c:	b808943a 	slli	r4,r23,16
    b950:	aa3fffcc 	andi	r8,r21,65535
    b954:	8804d43a 	srli	r2,r17,16
    b958:	41af383a 	mul	r23,r8,r6
    b95c:	8520983a 	sll	r16,r16,r20
    b960:	1104b03a 	or	r2,r2,r4
    b964:	15c0042e 	bgeu	r2,r23,b978 <__umoddi3+0x33c>
    b968:	1545883a 	add	r2,r2,r21
    b96c:	30ffffc4 	addi	r3,r6,-1
    b970:	1540742e 	bgeu	r2,r21,bb44 <__umoddi3+0x508>
    b974:	180d883a 	mov	r6,r3
    b978:	15efc83a 	sub	r23,r2,r23
    b97c:	b00b883a 	mov	r5,r22
    b980:	b809883a 	mov	r4,r23
    b984:	d9800115 	stw	r6,4(sp)
    b988:	da000015 	stw	r8,0(sp)
    b98c:	000bcd00 	call	bcd0 <__umodsi3>
    b990:	b00b883a 	mov	r5,r22
    b994:	b809883a 	mov	r4,r23
    b998:	1039883a 	mov	fp,r2
    b99c:	000bc6c0 	call	bc6c <__udivsi3>
    b9a0:	da000017 	ldw	r8,0(sp)
    b9a4:	e038943a 	slli	fp,fp,16
    b9a8:	100b883a 	mov	r5,r2
    b9ac:	4089383a 	mul	r4,r8,r2
    b9b0:	8a3fffcc 	andi	r8,r17,65535
    b9b4:	4710b03a 	or	r8,r8,fp
    b9b8:	d9800117 	ldw	r6,4(sp)
    b9bc:	4100042e 	bgeu	r8,r4,b9d0 <__umoddi3+0x394>
    b9c0:	4551883a 	add	r8,r8,r21
    b9c4:	10bfffc4 	addi	r2,r2,-1
    b9c8:	45405a2e 	bgeu	r8,r21,bb34 <__umoddi3+0x4f8>
    b9cc:	100b883a 	mov	r5,r2
    b9d0:	300c943a 	slli	r6,r6,16
    b9d4:	91ffffcc 	andi	r7,r18,65535
    b9d8:	9004d43a 	srli	r2,r18,16
    b9dc:	314cb03a 	or	r6,r6,r5
    b9e0:	317fffcc 	andi	r5,r6,65535
    b9e4:	300cd43a 	srli	r6,r6,16
    b9e8:	29d3383a 	mul	r9,r5,r7
    b9ec:	288b383a 	mul	r5,r5,r2
    b9f0:	31cf383a 	mul	r7,r6,r7
    b9f4:	4806d43a 	srli	r3,r9,16
    b9f8:	4111c83a 	sub	r8,r8,r4
    b9fc:	29cb883a 	add	r5,r5,r7
    ba00:	194b883a 	add	r5,r3,r5
    ba04:	3085383a 	mul	r2,r6,r2
    ba08:	29c0022e 	bgeu	r5,r7,ba14 <__umoddi3+0x3d8>
    ba0c:	00c00074 	movhi	r3,1
    ba10:	10c5883a 	add	r2,r2,r3
    ba14:	2808d43a 	srli	r4,r5,16
    ba18:	280a943a 	slli	r5,r5,16
    ba1c:	4a7fffcc 	andi	r9,r9,65535
    ba20:	2085883a 	add	r2,r4,r2
    ba24:	2a4b883a 	add	r5,r5,r9
    ba28:	40803636 	bltu	r8,r2,bb04 <__umoddi3+0x4c8>
    ba2c:	40804d26 	beq	r8,r2,bb64 <__umoddi3+0x528>
    ba30:	4089c83a 	sub	r4,r8,r2
    ba34:	280f883a 	mov	r7,r5
    ba38:	81cfc83a 	sub	r7,r16,r7
    ba3c:	81c7803a 	cmpltu	r3,r16,r7
    ba40:	20c7c83a 	sub	r3,r4,r3
    ba44:	1cc4983a 	sll	r2,r3,r19
    ba48:	3d0ed83a 	srl	r7,r7,r20
    ba4c:	1d06d83a 	srl	r3,r3,r20
    ba50:	11c4b03a 	or	r2,r2,r7
    ba54:	003f9306 	br	b8a4 <__reset+0xfbf0b8a4>
    ba58:	9ca6983a 	sll	r19,r19,r18
    ba5c:	88e8d83a 	srl	r20,r17,r3
    ba60:	80c4d83a 	srl	r2,r16,r3
    ba64:	982cd43a 	srli	r22,r19,16
    ba68:	8ca2983a 	sll	r17,r17,r18
    ba6c:	a009883a 	mov	r4,r20
    ba70:	b00b883a 	mov	r5,r22
    ba74:	1478b03a 	or	fp,r2,r17
    ba78:	000bcd00 	call	bcd0 <__umodsi3>
    ba7c:	a009883a 	mov	r4,r20
    ba80:	b00b883a 	mov	r5,r22
    ba84:	1023883a 	mov	r17,r2
    ba88:	000bc6c0 	call	bc6c <__udivsi3>
    ba8c:	9d7fffcc 	andi	r21,r19,65535
    ba90:	880a943a 	slli	r5,r17,16
    ba94:	e008d43a 	srli	r4,fp,16
    ba98:	a885383a 	mul	r2,r21,r2
    ba9c:	84a8983a 	sll	r20,r16,r18
    baa0:	2148b03a 	or	r4,r4,r5
    baa4:	2080042e 	bgeu	r4,r2,bab8 <__umoddi3+0x47c>
    baa8:	24c9883a 	add	r4,r4,r19
    baac:	24c00236 	bltu	r4,r19,bab8 <__umoddi3+0x47c>
    bab0:	2080012e 	bgeu	r4,r2,bab8 <__umoddi3+0x47c>
    bab4:	24c9883a 	add	r4,r4,r19
    bab8:	20a3c83a 	sub	r17,r4,r2
    babc:	b00b883a 	mov	r5,r22
    bac0:	8809883a 	mov	r4,r17
    bac4:	000bcd00 	call	bcd0 <__umodsi3>
    bac8:	102f883a 	mov	r23,r2
    bacc:	8809883a 	mov	r4,r17
    bad0:	b00b883a 	mov	r5,r22
    bad4:	000bc6c0 	call	bc6c <__udivsi3>
    bad8:	b82e943a 	slli	r23,r23,16
    badc:	a885383a 	mul	r2,r21,r2
    bae0:	e13fffcc 	andi	r4,fp,65535
    bae4:	25c8b03a 	or	r4,r4,r23
    bae8:	2080042e 	bgeu	r4,r2,bafc <__umoddi3+0x4c0>
    baec:	24c9883a 	add	r4,r4,r19
    baf0:	24c00236 	bltu	r4,r19,bafc <__umoddi3+0x4c0>
    baf4:	2080012e 	bgeu	r4,r2,bafc <__umoddi3+0x4c0>
    baf8:	24c9883a 	add	r4,r4,r19
    bafc:	20a3c83a 	sub	r17,r4,r2
    bb00:	003f4806 	br	b824 <__reset+0xfbf0b824>
    bb04:	2c8fc83a 	sub	r7,r5,r18
    bb08:	1545c83a 	sub	r2,r2,r21
    bb0c:	29cb803a 	cmpltu	r5,r5,r7
    bb10:	1145c83a 	sub	r2,r2,r5
    bb14:	4089c83a 	sub	r4,r8,r2
    bb18:	003fc706 	br	ba38 <__reset+0xfbf0ba38>
    bb1c:	01000604 	movi	r4,24
    bb20:	003f1806 	br	b784 <__reset+0xfbf0b784>
    bb24:	00800604 	movi	r2,24
    bb28:	003f3206 	br	b7f4 <__reset+0xfbf0b7f4>
    bb2c:	01000604 	movi	r4,24
    bb30:	003ed906 	br	b698 <__reset+0xfbf0b698>
    bb34:	413fa52e 	bgeu	r8,r4,b9cc <__reset+0xfbf0b9cc>
    bb38:	297fff84 	addi	r5,r5,-2
    bb3c:	4551883a 	add	r8,r8,r21
    bb40:	003fa306 	br	b9d0 <__reset+0xfbf0b9d0>
    bb44:	15ff8b2e 	bgeu	r2,r23,b974 <__reset+0xfbf0b974>
    bb48:	31bfff84 	addi	r6,r6,-2
    bb4c:	1545883a 	add	r2,r2,r21
    bb50:	003f8906 	br	b978 <__reset+0xfbf0b978>
    bb54:	24c9883a 	add	r4,r4,r19
    bb58:	003eee06 	br	b714 <__reset+0xfbf0b714>
    bb5c:	8005883a 	mov	r2,r16
    bb60:	003f1706 	br	b7c0 <__reset+0xfbf0b7c0>
    bb64:	817fe736 	bltu	r16,r5,bb04 <__reset+0xfbf0bb04>
    bb68:	280f883a 	mov	r7,r5
    bb6c:	0009883a 	mov	r4,zero
    bb70:	003fb106 	br	ba38 <__reset+0xfbf0ba38>

0000bb74 <__divsi3>:
    bb74:	20001b16 	blt	r4,zero,bbe4 <__divsi3+0x70>
    bb78:	000f883a 	mov	r7,zero
    bb7c:	28001616 	blt	r5,zero,bbd8 <__divsi3+0x64>
    bb80:	200d883a 	mov	r6,r4
    bb84:	29001a2e 	bgeu	r5,r4,bbf0 <__divsi3+0x7c>
    bb88:	00800804 	movi	r2,32
    bb8c:	00c00044 	movi	r3,1
    bb90:	00000106 	br	bb98 <__divsi3+0x24>
    bb94:	10000d26 	beq	r2,zero,bbcc <__divsi3+0x58>
    bb98:	294b883a 	add	r5,r5,r5
    bb9c:	10bfffc4 	addi	r2,r2,-1
    bba0:	18c7883a 	add	r3,r3,r3
    bba4:	293ffb36 	bltu	r5,r4,bb94 <__reset+0xfbf0bb94>
    bba8:	0005883a 	mov	r2,zero
    bbac:	18000726 	beq	r3,zero,bbcc <__divsi3+0x58>
    bbb0:	0005883a 	mov	r2,zero
    bbb4:	31400236 	bltu	r6,r5,bbc0 <__divsi3+0x4c>
    bbb8:	314dc83a 	sub	r6,r6,r5
    bbbc:	10c4b03a 	or	r2,r2,r3
    bbc0:	1806d07a 	srli	r3,r3,1
    bbc4:	280ad07a 	srli	r5,r5,1
    bbc8:	183ffa1e 	bne	r3,zero,bbb4 <__reset+0xfbf0bbb4>
    bbcc:	38000126 	beq	r7,zero,bbd4 <__divsi3+0x60>
    bbd0:	0085c83a 	sub	r2,zero,r2
    bbd4:	f800283a 	ret
    bbd8:	014bc83a 	sub	r5,zero,r5
    bbdc:	39c0005c 	xori	r7,r7,1
    bbe0:	003fe706 	br	bb80 <__reset+0xfbf0bb80>
    bbe4:	0109c83a 	sub	r4,zero,r4
    bbe8:	01c00044 	movi	r7,1
    bbec:	003fe306 	br	bb7c <__reset+0xfbf0bb7c>
    bbf0:	00c00044 	movi	r3,1
    bbf4:	003fee06 	br	bbb0 <__reset+0xfbf0bbb0>

0000bbf8 <__modsi3>:
    bbf8:	20001716 	blt	r4,zero,bc58 <__modsi3+0x60>
    bbfc:	000f883a 	mov	r7,zero
    bc00:	2005883a 	mov	r2,r4
    bc04:	28001216 	blt	r5,zero,bc50 <__modsi3+0x58>
    bc08:	2900162e 	bgeu	r5,r4,bc64 <__modsi3+0x6c>
    bc0c:	01800804 	movi	r6,32
    bc10:	00c00044 	movi	r3,1
    bc14:	00000106 	br	bc1c <__modsi3+0x24>
    bc18:	30000a26 	beq	r6,zero,bc44 <__modsi3+0x4c>
    bc1c:	294b883a 	add	r5,r5,r5
    bc20:	31bfffc4 	addi	r6,r6,-1
    bc24:	18c7883a 	add	r3,r3,r3
    bc28:	293ffb36 	bltu	r5,r4,bc18 <__reset+0xfbf0bc18>
    bc2c:	18000526 	beq	r3,zero,bc44 <__modsi3+0x4c>
    bc30:	1806d07a 	srli	r3,r3,1
    bc34:	11400136 	bltu	r2,r5,bc3c <__modsi3+0x44>
    bc38:	1145c83a 	sub	r2,r2,r5
    bc3c:	280ad07a 	srli	r5,r5,1
    bc40:	183ffb1e 	bne	r3,zero,bc30 <__reset+0xfbf0bc30>
    bc44:	38000126 	beq	r7,zero,bc4c <__modsi3+0x54>
    bc48:	0085c83a 	sub	r2,zero,r2
    bc4c:	f800283a 	ret
    bc50:	014bc83a 	sub	r5,zero,r5
    bc54:	003fec06 	br	bc08 <__reset+0xfbf0bc08>
    bc58:	0109c83a 	sub	r4,zero,r4
    bc5c:	01c00044 	movi	r7,1
    bc60:	003fe706 	br	bc00 <__reset+0xfbf0bc00>
    bc64:	00c00044 	movi	r3,1
    bc68:	003ff106 	br	bc30 <__reset+0xfbf0bc30>

0000bc6c <__udivsi3>:
    bc6c:	200d883a 	mov	r6,r4
    bc70:	2900152e 	bgeu	r5,r4,bcc8 <__udivsi3+0x5c>
    bc74:	28001416 	blt	r5,zero,bcc8 <__udivsi3+0x5c>
    bc78:	00800804 	movi	r2,32
    bc7c:	00c00044 	movi	r3,1
    bc80:	00000206 	br	bc8c <__udivsi3+0x20>
    bc84:	10000e26 	beq	r2,zero,bcc0 <__udivsi3+0x54>
    bc88:	28000516 	blt	r5,zero,bca0 <__udivsi3+0x34>
    bc8c:	294b883a 	add	r5,r5,r5
    bc90:	10bfffc4 	addi	r2,r2,-1
    bc94:	18c7883a 	add	r3,r3,r3
    bc98:	293ffa36 	bltu	r5,r4,bc84 <__reset+0xfbf0bc84>
    bc9c:	18000826 	beq	r3,zero,bcc0 <__udivsi3+0x54>
    bca0:	0005883a 	mov	r2,zero
    bca4:	31400236 	bltu	r6,r5,bcb0 <__udivsi3+0x44>
    bca8:	314dc83a 	sub	r6,r6,r5
    bcac:	10c4b03a 	or	r2,r2,r3
    bcb0:	1806d07a 	srli	r3,r3,1
    bcb4:	280ad07a 	srli	r5,r5,1
    bcb8:	183ffa1e 	bne	r3,zero,bca4 <__reset+0xfbf0bca4>
    bcbc:	f800283a 	ret
    bcc0:	0005883a 	mov	r2,zero
    bcc4:	f800283a 	ret
    bcc8:	00c00044 	movi	r3,1
    bccc:	003ff406 	br	bca0 <__reset+0xfbf0bca0>

0000bcd0 <__umodsi3>:
    bcd0:	2005883a 	mov	r2,r4
    bcd4:	2900122e 	bgeu	r5,r4,bd20 <__umodsi3+0x50>
    bcd8:	28001116 	blt	r5,zero,bd20 <__umodsi3+0x50>
    bcdc:	01800804 	movi	r6,32
    bce0:	00c00044 	movi	r3,1
    bce4:	00000206 	br	bcf0 <__umodsi3+0x20>
    bce8:	30000c26 	beq	r6,zero,bd1c <__umodsi3+0x4c>
    bcec:	28000516 	blt	r5,zero,bd04 <__umodsi3+0x34>
    bcf0:	294b883a 	add	r5,r5,r5
    bcf4:	31bfffc4 	addi	r6,r6,-1
    bcf8:	18c7883a 	add	r3,r3,r3
    bcfc:	293ffa36 	bltu	r5,r4,bce8 <__reset+0xfbf0bce8>
    bd00:	18000626 	beq	r3,zero,bd1c <__umodsi3+0x4c>
    bd04:	1806d07a 	srli	r3,r3,1
    bd08:	11400136 	bltu	r2,r5,bd10 <__umodsi3+0x40>
    bd0c:	1145c83a 	sub	r2,r2,r5
    bd10:	280ad07a 	srli	r5,r5,1
    bd14:	183ffb1e 	bne	r3,zero,bd04 <__reset+0xfbf0bd04>
    bd18:	f800283a 	ret
    bd1c:	f800283a 	ret
    bd20:	00c00044 	movi	r3,1
    bd24:	003ff706 	br	bd04 <__reset+0xfbf0bd04>

0000bd28 <__adddf3>:
    bd28:	02c00434 	movhi	r11,16
    bd2c:	5affffc4 	addi	r11,r11,-1
    bd30:	2806d7fa 	srli	r3,r5,31
    bd34:	2ad4703a 	and	r10,r5,r11
    bd38:	3ad2703a 	and	r9,r7,r11
    bd3c:	3804d53a 	srli	r2,r7,20
    bd40:	3018d77a 	srli	r12,r6,29
    bd44:	280ad53a 	srli	r5,r5,20
    bd48:	501490fa 	slli	r10,r10,3
    bd4c:	2010d77a 	srli	r8,r4,29
    bd50:	481290fa 	slli	r9,r9,3
    bd54:	380ed7fa 	srli	r7,r7,31
    bd58:	defffb04 	addi	sp,sp,-20
    bd5c:	dc800215 	stw	r18,8(sp)
    bd60:	dc400115 	stw	r17,4(sp)
    bd64:	dc000015 	stw	r16,0(sp)
    bd68:	dfc00415 	stw	ra,16(sp)
    bd6c:	dcc00315 	stw	r19,12(sp)
    bd70:	1c803fcc 	andi	r18,r3,255
    bd74:	2c01ffcc 	andi	r16,r5,2047
    bd78:	5210b03a 	or	r8,r10,r8
    bd7c:	202290fa 	slli	r17,r4,3
    bd80:	1081ffcc 	andi	r2,r2,2047
    bd84:	4b12b03a 	or	r9,r9,r12
    bd88:	300c90fa 	slli	r6,r6,3
    bd8c:	91c07526 	beq	r18,r7,bf64 <__adddf3+0x23c>
    bd90:	8087c83a 	sub	r3,r16,r2
    bd94:	00c0ab0e 	bge	zero,r3,c044 <__adddf3+0x31c>
    bd98:	10002a1e 	bne	r2,zero,be44 <__adddf3+0x11c>
    bd9c:	4984b03a 	or	r2,r9,r6
    bda0:	1000961e 	bne	r2,zero,bffc <__adddf3+0x2d4>
    bda4:	888001cc 	andi	r2,r17,7
    bda8:	10000726 	beq	r2,zero,bdc8 <__adddf3+0xa0>
    bdac:	888003cc 	andi	r2,r17,15
    bdb0:	00c00104 	movi	r3,4
    bdb4:	10c00426 	beq	r2,r3,bdc8 <__adddf3+0xa0>
    bdb8:	88c7883a 	add	r3,r17,r3
    bdbc:	1c63803a 	cmpltu	r17,r3,r17
    bdc0:	4451883a 	add	r8,r8,r17
    bdc4:	1823883a 	mov	r17,r3
    bdc8:	4080202c 	andhi	r2,r8,128
    bdcc:	10005926 	beq	r2,zero,bf34 <__adddf3+0x20c>
    bdd0:	84000044 	addi	r16,r16,1
    bdd4:	0081ffc4 	movi	r2,2047
    bdd8:	8080ba26 	beq	r16,r2,c0c4 <__adddf3+0x39c>
    bddc:	00bfe034 	movhi	r2,65408
    bde0:	10bfffc4 	addi	r2,r2,-1
    bde4:	4090703a 	and	r8,r8,r2
    bde8:	4004977a 	slli	r2,r8,29
    bdec:	4010927a 	slli	r8,r8,9
    bdf0:	8822d0fa 	srli	r17,r17,3
    bdf4:	8401ffcc 	andi	r16,r16,2047
    bdf8:	4010d33a 	srli	r8,r8,12
    bdfc:	9007883a 	mov	r3,r18
    be00:	1444b03a 	or	r2,r2,r17
    be04:	8401ffcc 	andi	r16,r16,2047
    be08:	8020953a 	slli	r16,r16,20
    be0c:	18c03fcc 	andi	r3,r3,255
    be10:	01000434 	movhi	r4,16
    be14:	213fffc4 	addi	r4,r4,-1
    be18:	180697fa 	slli	r3,r3,31
    be1c:	4110703a 	and	r8,r8,r4
    be20:	4410b03a 	or	r8,r8,r16
    be24:	40c6b03a 	or	r3,r8,r3
    be28:	dfc00417 	ldw	ra,16(sp)
    be2c:	dcc00317 	ldw	r19,12(sp)
    be30:	dc800217 	ldw	r18,8(sp)
    be34:	dc400117 	ldw	r17,4(sp)
    be38:	dc000017 	ldw	r16,0(sp)
    be3c:	dec00504 	addi	sp,sp,20
    be40:	f800283a 	ret
    be44:	0081ffc4 	movi	r2,2047
    be48:	80bfd626 	beq	r16,r2,bda4 <__reset+0xfbf0bda4>
    be4c:	4a402034 	orhi	r9,r9,128
    be50:	00800e04 	movi	r2,56
    be54:	10c09f16 	blt	r2,r3,c0d4 <__adddf3+0x3ac>
    be58:	008007c4 	movi	r2,31
    be5c:	10c0c216 	blt	r2,r3,c168 <__adddf3+0x440>
    be60:	00800804 	movi	r2,32
    be64:	10c5c83a 	sub	r2,r2,r3
    be68:	488a983a 	sll	r5,r9,r2
    be6c:	30c8d83a 	srl	r4,r6,r3
    be70:	3084983a 	sll	r2,r6,r2
    be74:	48c6d83a 	srl	r3,r9,r3
    be78:	290cb03a 	or	r6,r5,r4
    be7c:	1004c03a 	cmpne	r2,r2,zero
    be80:	308cb03a 	or	r6,r6,r2
    be84:	898dc83a 	sub	r6,r17,r6
    be88:	89a3803a 	cmpltu	r17,r17,r6
    be8c:	40d1c83a 	sub	r8,r8,r3
    be90:	4451c83a 	sub	r8,r8,r17
    be94:	3023883a 	mov	r17,r6
    be98:	4080202c 	andhi	r2,r8,128
    be9c:	10002326 	beq	r2,zero,bf2c <__adddf3+0x204>
    bea0:	04c02034 	movhi	r19,128
    bea4:	9cffffc4 	addi	r19,r19,-1
    bea8:	44e6703a 	and	r19,r8,r19
    beac:	98007626 	beq	r19,zero,c088 <__adddf3+0x360>
    beb0:	9809883a 	mov	r4,r19
    beb4:	000e32c0 	call	e32c <__clzsi2>
    beb8:	10fffe04 	addi	r3,r2,-8
    bebc:	010007c4 	movi	r4,31
    bec0:	20c07716 	blt	r4,r3,c0a0 <__adddf3+0x378>
    bec4:	00800804 	movi	r2,32
    bec8:	10c5c83a 	sub	r2,r2,r3
    becc:	8884d83a 	srl	r2,r17,r2
    bed0:	98d0983a 	sll	r8,r19,r3
    bed4:	88e2983a 	sll	r17,r17,r3
    bed8:	1204b03a 	or	r2,r2,r8
    bedc:	1c007416 	blt	r3,r16,c0b0 <__adddf3+0x388>
    bee0:	1c21c83a 	sub	r16,r3,r16
    bee4:	82000044 	addi	r8,r16,1
    bee8:	00c007c4 	movi	r3,31
    beec:	1a009116 	blt	r3,r8,c134 <__adddf3+0x40c>
    bef0:	00c00804 	movi	r3,32
    bef4:	1a07c83a 	sub	r3,r3,r8
    bef8:	8a08d83a 	srl	r4,r17,r8
    befc:	88e2983a 	sll	r17,r17,r3
    bf00:	10c6983a 	sll	r3,r2,r3
    bf04:	1210d83a 	srl	r8,r2,r8
    bf08:	8804c03a 	cmpne	r2,r17,zero
    bf0c:	1906b03a 	or	r3,r3,r4
    bf10:	18a2b03a 	or	r17,r3,r2
    bf14:	0021883a 	mov	r16,zero
    bf18:	003fa206 	br	bda4 <__reset+0xfbf0bda4>
    bf1c:	1890b03a 	or	r8,r3,r2
    bf20:	40017d26 	beq	r8,zero,c518 <__adddf3+0x7f0>
    bf24:	1011883a 	mov	r8,r2
    bf28:	1823883a 	mov	r17,r3
    bf2c:	888001cc 	andi	r2,r17,7
    bf30:	103f9e1e 	bne	r2,zero,bdac <__reset+0xfbf0bdac>
    bf34:	4004977a 	slli	r2,r8,29
    bf38:	8822d0fa 	srli	r17,r17,3
    bf3c:	4010d0fa 	srli	r8,r8,3
    bf40:	9007883a 	mov	r3,r18
    bf44:	1444b03a 	or	r2,r2,r17
    bf48:	0101ffc4 	movi	r4,2047
    bf4c:	81002426 	beq	r16,r4,bfe0 <__adddf3+0x2b8>
    bf50:	8120703a 	and	r16,r16,r4
    bf54:	01000434 	movhi	r4,16
    bf58:	213fffc4 	addi	r4,r4,-1
    bf5c:	4110703a 	and	r8,r8,r4
    bf60:	003fa806 	br	be04 <__reset+0xfbf0be04>
    bf64:	8089c83a 	sub	r4,r16,r2
    bf68:	01005e0e 	bge	zero,r4,c0e4 <__adddf3+0x3bc>
    bf6c:	10002b26 	beq	r2,zero,c01c <__adddf3+0x2f4>
    bf70:	0081ffc4 	movi	r2,2047
    bf74:	80bf8b26 	beq	r16,r2,bda4 <__reset+0xfbf0bda4>
    bf78:	4a402034 	orhi	r9,r9,128
    bf7c:	00800e04 	movi	r2,56
    bf80:	1100a40e 	bge	r2,r4,c214 <__adddf3+0x4ec>
    bf84:	498cb03a 	or	r6,r9,r6
    bf88:	300ac03a 	cmpne	r5,r6,zero
    bf8c:	0013883a 	mov	r9,zero
    bf90:	2c4b883a 	add	r5,r5,r17
    bf94:	2c63803a 	cmpltu	r17,r5,r17
    bf98:	4a11883a 	add	r8,r9,r8
    bf9c:	8a11883a 	add	r8,r17,r8
    bfa0:	2823883a 	mov	r17,r5
    bfa4:	4080202c 	andhi	r2,r8,128
    bfa8:	103fe026 	beq	r2,zero,bf2c <__reset+0xfbf0bf2c>
    bfac:	84000044 	addi	r16,r16,1
    bfb0:	0081ffc4 	movi	r2,2047
    bfb4:	8080d226 	beq	r16,r2,c300 <__adddf3+0x5d8>
    bfb8:	00bfe034 	movhi	r2,65408
    bfbc:	10bfffc4 	addi	r2,r2,-1
    bfc0:	4090703a 	and	r8,r8,r2
    bfc4:	880ad07a 	srli	r5,r17,1
    bfc8:	400897fa 	slli	r4,r8,31
    bfcc:	88c0004c 	andi	r3,r17,1
    bfd0:	28e2b03a 	or	r17,r5,r3
    bfd4:	4010d07a 	srli	r8,r8,1
    bfd8:	2462b03a 	or	r17,r4,r17
    bfdc:	003f7106 	br	bda4 <__reset+0xfbf0bda4>
    bfe0:	4088b03a 	or	r4,r8,r2
    bfe4:	20014526 	beq	r4,zero,c4fc <__adddf3+0x7d4>
    bfe8:	01000434 	movhi	r4,16
    bfec:	42000234 	orhi	r8,r8,8
    bff0:	213fffc4 	addi	r4,r4,-1
    bff4:	4110703a 	and	r8,r8,r4
    bff8:	003f8206 	br	be04 <__reset+0xfbf0be04>
    bffc:	18ffffc4 	addi	r3,r3,-1
    c000:	1800491e 	bne	r3,zero,c128 <__adddf3+0x400>
    c004:	898bc83a 	sub	r5,r17,r6
    c008:	8963803a 	cmpltu	r17,r17,r5
    c00c:	4251c83a 	sub	r8,r8,r9
    c010:	4451c83a 	sub	r8,r8,r17
    c014:	2823883a 	mov	r17,r5
    c018:	003f9f06 	br	be98 <__reset+0xfbf0be98>
    c01c:	4984b03a 	or	r2,r9,r6
    c020:	103f6026 	beq	r2,zero,bda4 <__reset+0xfbf0bda4>
    c024:	213fffc4 	addi	r4,r4,-1
    c028:	2000931e 	bne	r4,zero,c278 <__adddf3+0x550>
    c02c:	898d883a 	add	r6,r17,r6
    c030:	3463803a 	cmpltu	r17,r6,r17
    c034:	4251883a 	add	r8,r8,r9
    c038:	8a11883a 	add	r8,r17,r8
    c03c:	3023883a 	mov	r17,r6
    c040:	003fd806 	br	bfa4 <__reset+0xfbf0bfa4>
    c044:	1800541e 	bne	r3,zero,c198 <__adddf3+0x470>
    c048:	80800044 	addi	r2,r16,1
    c04c:	1081ffcc 	andi	r2,r2,2047
    c050:	00c00044 	movi	r3,1
    c054:	1880a00e 	bge	r3,r2,c2d8 <__adddf3+0x5b0>
    c058:	8989c83a 	sub	r4,r17,r6
    c05c:	8905803a 	cmpltu	r2,r17,r4
    c060:	4267c83a 	sub	r19,r8,r9
    c064:	98a7c83a 	sub	r19,r19,r2
    c068:	9880202c 	andhi	r2,r19,128
    c06c:	10006326 	beq	r2,zero,c1fc <__adddf3+0x4d4>
    c070:	3463c83a 	sub	r17,r6,r17
    c074:	4a07c83a 	sub	r3,r9,r8
    c078:	344d803a 	cmpltu	r6,r6,r17
    c07c:	19a7c83a 	sub	r19,r3,r6
    c080:	3825883a 	mov	r18,r7
    c084:	983f8a1e 	bne	r19,zero,beb0 <__reset+0xfbf0beb0>
    c088:	8809883a 	mov	r4,r17
    c08c:	000e32c0 	call	e32c <__clzsi2>
    c090:	10800804 	addi	r2,r2,32
    c094:	10fffe04 	addi	r3,r2,-8
    c098:	010007c4 	movi	r4,31
    c09c:	20ff890e 	bge	r4,r3,bec4 <__reset+0xfbf0bec4>
    c0a0:	10bff604 	addi	r2,r2,-40
    c0a4:	8884983a 	sll	r2,r17,r2
    c0a8:	0023883a 	mov	r17,zero
    c0ac:	1c3f8c0e 	bge	r3,r16,bee0 <__reset+0xfbf0bee0>
    c0b0:	023fe034 	movhi	r8,65408
    c0b4:	423fffc4 	addi	r8,r8,-1
    c0b8:	80e1c83a 	sub	r16,r16,r3
    c0bc:	1210703a 	and	r8,r2,r8
    c0c0:	003f3806 	br	bda4 <__reset+0xfbf0bda4>
    c0c4:	9007883a 	mov	r3,r18
    c0c8:	0011883a 	mov	r8,zero
    c0cc:	0005883a 	mov	r2,zero
    c0d0:	003f4c06 	br	be04 <__reset+0xfbf0be04>
    c0d4:	498cb03a 	or	r6,r9,r6
    c0d8:	300cc03a 	cmpne	r6,r6,zero
    c0dc:	0007883a 	mov	r3,zero
    c0e0:	003f6806 	br	be84 <__reset+0xfbf0be84>
    c0e4:	20009c1e 	bne	r4,zero,c358 <__adddf3+0x630>
    c0e8:	80800044 	addi	r2,r16,1
    c0ec:	1141ffcc 	andi	r5,r2,2047
    c0f0:	01000044 	movi	r4,1
    c0f4:	2140670e 	bge	r4,r5,c294 <__adddf3+0x56c>
    c0f8:	0101ffc4 	movi	r4,2047
    c0fc:	11007f26 	beq	r2,r4,c2fc <__adddf3+0x5d4>
    c100:	898d883a 	add	r6,r17,r6
    c104:	4247883a 	add	r3,r8,r9
    c108:	3451803a 	cmpltu	r8,r6,r17
    c10c:	40d1883a 	add	r8,r8,r3
    c110:	402297fa 	slli	r17,r8,31
    c114:	300cd07a 	srli	r6,r6,1
    c118:	4010d07a 	srli	r8,r8,1
    c11c:	1021883a 	mov	r16,r2
    c120:	89a2b03a 	or	r17,r17,r6
    c124:	003f1f06 	br	bda4 <__reset+0xfbf0bda4>
    c128:	0081ffc4 	movi	r2,2047
    c12c:	80bf481e 	bne	r16,r2,be50 <__reset+0xfbf0be50>
    c130:	003f1c06 	br	bda4 <__reset+0xfbf0bda4>
    c134:	843ff844 	addi	r16,r16,-31
    c138:	01000804 	movi	r4,32
    c13c:	1406d83a 	srl	r3,r2,r16
    c140:	41005026 	beq	r8,r4,c284 <__adddf3+0x55c>
    c144:	01001004 	movi	r4,64
    c148:	2211c83a 	sub	r8,r4,r8
    c14c:	1204983a 	sll	r2,r2,r8
    c150:	88a2b03a 	or	r17,r17,r2
    c154:	8822c03a 	cmpne	r17,r17,zero
    c158:	1c62b03a 	or	r17,r3,r17
    c15c:	0011883a 	mov	r8,zero
    c160:	0021883a 	mov	r16,zero
    c164:	003f7106 	br	bf2c <__reset+0xfbf0bf2c>
    c168:	193ff804 	addi	r4,r3,-32
    c16c:	00800804 	movi	r2,32
    c170:	4908d83a 	srl	r4,r9,r4
    c174:	18804526 	beq	r3,r2,c28c <__adddf3+0x564>
    c178:	00801004 	movi	r2,64
    c17c:	10c5c83a 	sub	r2,r2,r3
    c180:	4886983a 	sll	r3,r9,r2
    c184:	198cb03a 	or	r6,r3,r6
    c188:	300cc03a 	cmpne	r6,r6,zero
    c18c:	218cb03a 	or	r6,r4,r6
    c190:	0007883a 	mov	r3,zero
    c194:	003f3b06 	br	be84 <__reset+0xfbf0be84>
    c198:	80002a26 	beq	r16,zero,c244 <__adddf3+0x51c>
    c19c:	0101ffc4 	movi	r4,2047
    c1a0:	11006826 	beq	r2,r4,c344 <__adddf3+0x61c>
    c1a4:	00c7c83a 	sub	r3,zero,r3
    c1a8:	42002034 	orhi	r8,r8,128
    c1ac:	01000e04 	movi	r4,56
    c1b0:	20c07c16 	blt	r4,r3,c3a4 <__adddf3+0x67c>
    c1b4:	010007c4 	movi	r4,31
    c1b8:	20c0da16 	blt	r4,r3,c524 <__adddf3+0x7fc>
    c1bc:	01000804 	movi	r4,32
    c1c0:	20c9c83a 	sub	r4,r4,r3
    c1c4:	4114983a 	sll	r10,r8,r4
    c1c8:	88cad83a 	srl	r5,r17,r3
    c1cc:	8908983a 	sll	r4,r17,r4
    c1d0:	40c6d83a 	srl	r3,r8,r3
    c1d4:	5162b03a 	or	r17,r10,r5
    c1d8:	2008c03a 	cmpne	r4,r4,zero
    c1dc:	8922b03a 	or	r17,r17,r4
    c1e0:	3463c83a 	sub	r17,r6,r17
    c1e4:	48c7c83a 	sub	r3,r9,r3
    c1e8:	344d803a 	cmpltu	r6,r6,r17
    c1ec:	1991c83a 	sub	r8,r3,r6
    c1f0:	1021883a 	mov	r16,r2
    c1f4:	3825883a 	mov	r18,r7
    c1f8:	003f2706 	br	be98 <__reset+0xfbf0be98>
    c1fc:	24d0b03a 	or	r8,r4,r19
    c200:	40001b1e 	bne	r8,zero,c270 <__adddf3+0x548>
    c204:	0005883a 	mov	r2,zero
    c208:	0007883a 	mov	r3,zero
    c20c:	0021883a 	mov	r16,zero
    c210:	003f4d06 	br	bf48 <__reset+0xfbf0bf48>
    c214:	008007c4 	movi	r2,31
    c218:	11003c16 	blt	r2,r4,c30c <__adddf3+0x5e4>
    c21c:	00800804 	movi	r2,32
    c220:	1105c83a 	sub	r2,r2,r4
    c224:	488e983a 	sll	r7,r9,r2
    c228:	310ad83a 	srl	r5,r6,r4
    c22c:	3084983a 	sll	r2,r6,r2
    c230:	4912d83a 	srl	r9,r9,r4
    c234:	394ab03a 	or	r5,r7,r5
    c238:	1004c03a 	cmpne	r2,r2,zero
    c23c:	288ab03a 	or	r5,r5,r2
    c240:	003f5306 	br	bf90 <__reset+0xfbf0bf90>
    c244:	4448b03a 	or	r4,r8,r17
    c248:	20003e26 	beq	r4,zero,c344 <__adddf3+0x61c>
    c24c:	00c6303a 	nor	r3,zero,r3
    c250:	18003a1e 	bne	r3,zero,c33c <__adddf3+0x614>
    c254:	3463c83a 	sub	r17,r6,r17
    c258:	4a07c83a 	sub	r3,r9,r8
    c25c:	344d803a 	cmpltu	r6,r6,r17
    c260:	1991c83a 	sub	r8,r3,r6
    c264:	1021883a 	mov	r16,r2
    c268:	3825883a 	mov	r18,r7
    c26c:	003f0a06 	br	be98 <__reset+0xfbf0be98>
    c270:	2023883a 	mov	r17,r4
    c274:	003f0d06 	br	beac <__reset+0xfbf0beac>
    c278:	0081ffc4 	movi	r2,2047
    c27c:	80bf3f1e 	bne	r16,r2,bf7c <__reset+0xfbf0bf7c>
    c280:	003ec806 	br	bda4 <__reset+0xfbf0bda4>
    c284:	0005883a 	mov	r2,zero
    c288:	003fb106 	br	c150 <__reset+0xfbf0c150>
    c28c:	0007883a 	mov	r3,zero
    c290:	003fbc06 	br	c184 <__reset+0xfbf0c184>
    c294:	4444b03a 	or	r2,r8,r17
    c298:	8000871e 	bne	r16,zero,c4b8 <__adddf3+0x790>
    c29c:	1000ba26 	beq	r2,zero,c588 <__adddf3+0x860>
    c2a0:	4984b03a 	or	r2,r9,r6
    c2a4:	103ebf26 	beq	r2,zero,bda4 <__reset+0xfbf0bda4>
    c2a8:	8985883a 	add	r2,r17,r6
    c2ac:	4247883a 	add	r3,r8,r9
    c2b0:	1451803a 	cmpltu	r8,r2,r17
    c2b4:	40d1883a 	add	r8,r8,r3
    c2b8:	40c0202c 	andhi	r3,r8,128
    c2bc:	1023883a 	mov	r17,r2
    c2c0:	183f1a26 	beq	r3,zero,bf2c <__reset+0xfbf0bf2c>
    c2c4:	00bfe034 	movhi	r2,65408
    c2c8:	10bfffc4 	addi	r2,r2,-1
    c2cc:	2021883a 	mov	r16,r4
    c2d0:	4090703a 	and	r8,r8,r2
    c2d4:	003eb306 	br	bda4 <__reset+0xfbf0bda4>
    c2d8:	4444b03a 	or	r2,r8,r17
    c2dc:	8000291e 	bne	r16,zero,c384 <__adddf3+0x65c>
    c2e0:	10004b1e 	bne	r2,zero,c410 <__adddf3+0x6e8>
    c2e4:	4990b03a 	or	r8,r9,r6
    c2e8:	40008b26 	beq	r8,zero,c518 <__adddf3+0x7f0>
    c2ec:	4811883a 	mov	r8,r9
    c2f0:	3023883a 	mov	r17,r6
    c2f4:	3825883a 	mov	r18,r7
    c2f8:	003eaa06 	br	bda4 <__reset+0xfbf0bda4>
    c2fc:	1021883a 	mov	r16,r2
    c300:	0011883a 	mov	r8,zero
    c304:	0005883a 	mov	r2,zero
    c308:	003f0f06 	br	bf48 <__reset+0xfbf0bf48>
    c30c:	217ff804 	addi	r5,r4,-32
    c310:	00800804 	movi	r2,32
    c314:	494ad83a 	srl	r5,r9,r5
    c318:	20807d26 	beq	r4,r2,c510 <__adddf3+0x7e8>
    c31c:	00801004 	movi	r2,64
    c320:	1109c83a 	sub	r4,r2,r4
    c324:	4912983a 	sll	r9,r9,r4
    c328:	498cb03a 	or	r6,r9,r6
    c32c:	300cc03a 	cmpne	r6,r6,zero
    c330:	298ab03a 	or	r5,r5,r6
    c334:	0013883a 	mov	r9,zero
    c338:	003f1506 	br	bf90 <__reset+0xfbf0bf90>
    c33c:	0101ffc4 	movi	r4,2047
    c340:	113f9a1e 	bne	r2,r4,c1ac <__reset+0xfbf0c1ac>
    c344:	4811883a 	mov	r8,r9
    c348:	3023883a 	mov	r17,r6
    c34c:	1021883a 	mov	r16,r2
    c350:	3825883a 	mov	r18,r7
    c354:	003e9306 	br	bda4 <__reset+0xfbf0bda4>
    c358:	8000161e 	bne	r16,zero,c3b4 <__adddf3+0x68c>
    c35c:	444ab03a 	or	r5,r8,r17
    c360:	28005126 	beq	r5,zero,c4a8 <__adddf3+0x780>
    c364:	0108303a 	nor	r4,zero,r4
    c368:	20004d1e 	bne	r4,zero,c4a0 <__adddf3+0x778>
    c36c:	89a3883a 	add	r17,r17,r6
    c370:	4253883a 	add	r9,r8,r9
    c374:	898d803a 	cmpltu	r6,r17,r6
    c378:	3251883a 	add	r8,r6,r9
    c37c:	1021883a 	mov	r16,r2
    c380:	003f0806 	br	bfa4 <__reset+0xfbf0bfa4>
    c384:	1000301e 	bne	r2,zero,c448 <__adddf3+0x720>
    c388:	4984b03a 	or	r2,r9,r6
    c38c:	10007126 	beq	r2,zero,c554 <__adddf3+0x82c>
    c390:	4811883a 	mov	r8,r9
    c394:	3023883a 	mov	r17,r6
    c398:	3825883a 	mov	r18,r7
    c39c:	0401ffc4 	movi	r16,2047
    c3a0:	003e8006 	br	bda4 <__reset+0xfbf0bda4>
    c3a4:	4462b03a 	or	r17,r8,r17
    c3a8:	8822c03a 	cmpne	r17,r17,zero
    c3ac:	0007883a 	mov	r3,zero
    c3b0:	003f8b06 	br	c1e0 <__reset+0xfbf0c1e0>
    c3b4:	0141ffc4 	movi	r5,2047
    c3b8:	11403b26 	beq	r2,r5,c4a8 <__adddf3+0x780>
    c3bc:	0109c83a 	sub	r4,zero,r4
    c3c0:	42002034 	orhi	r8,r8,128
    c3c4:	01400e04 	movi	r5,56
    c3c8:	29006716 	blt	r5,r4,c568 <__adddf3+0x840>
    c3cc:	014007c4 	movi	r5,31
    c3d0:	29007016 	blt	r5,r4,c594 <__adddf3+0x86c>
    c3d4:	01400804 	movi	r5,32
    c3d8:	290bc83a 	sub	r5,r5,r4
    c3dc:	4154983a 	sll	r10,r8,r5
    c3e0:	890ed83a 	srl	r7,r17,r4
    c3e4:	894a983a 	sll	r5,r17,r5
    c3e8:	4108d83a 	srl	r4,r8,r4
    c3ec:	51e2b03a 	or	r17,r10,r7
    c3f0:	280ac03a 	cmpne	r5,r5,zero
    c3f4:	8962b03a 	or	r17,r17,r5
    c3f8:	89a3883a 	add	r17,r17,r6
    c3fc:	2253883a 	add	r9,r4,r9
    c400:	898d803a 	cmpltu	r6,r17,r6
    c404:	3251883a 	add	r8,r6,r9
    c408:	1021883a 	mov	r16,r2
    c40c:	003ee506 	br	bfa4 <__reset+0xfbf0bfa4>
    c410:	4984b03a 	or	r2,r9,r6
    c414:	103e6326 	beq	r2,zero,bda4 <__reset+0xfbf0bda4>
    c418:	8987c83a 	sub	r3,r17,r6
    c41c:	88c9803a 	cmpltu	r4,r17,r3
    c420:	4245c83a 	sub	r2,r8,r9
    c424:	1105c83a 	sub	r2,r2,r4
    c428:	1100202c 	andhi	r4,r2,128
    c42c:	203ebb26 	beq	r4,zero,bf1c <__reset+0xfbf0bf1c>
    c430:	3463c83a 	sub	r17,r6,r17
    c434:	4a07c83a 	sub	r3,r9,r8
    c438:	344d803a 	cmpltu	r6,r6,r17
    c43c:	1991c83a 	sub	r8,r3,r6
    c440:	3825883a 	mov	r18,r7
    c444:	003e5706 	br	bda4 <__reset+0xfbf0bda4>
    c448:	4984b03a 	or	r2,r9,r6
    c44c:	10002e26 	beq	r2,zero,c508 <__adddf3+0x7e0>
    c450:	4004d0fa 	srli	r2,r8,3
    c454:	8822d0fa 	srli	r17,r17,3
    c458:	4010977a 	slli	r8,r8,29
    c45c:	10c0022c 	andhi	r3,r2,8
    c460:	4462b03a 	or	r17,r8,r17
    c464:	18000826 	beq	r3,zero,c488 <__adddf3+0x760>
    c468:	4808d0fa 	srli	r4,r9,3
    c46c:	20c0022c 	andhi	r3,r4,8
    c470:	1800051e 	bne	r3,zero,c488 <__adddf3+0x760>
    c474:	300cd0fa 	srli	r6,r6,3
    c478:	4806977a 	slli	r3,r9,29
    c47c:	2005883a 	mov	r2,r4
    c480:	3825883a 	mov	r18,r7
    c484:	19a2b03a 	or	r17,r3,r6
    c488:	8810d77a 	srli	r8,r17,29
    c48c:	100490fa 	slli	r2,r2,3
    c490:	882290fa 	slli	r17,r17,3
    c494:	0401ffc4 	movi	r16,2047
    c498:	4090b03a 	or	r8,r8,r2
    c49c:	003e4106 	br	bda4 <__reset+0xfbf0bda4>
    c4a0:	0141ffc4 	movi	r5,2047
    c4a4:	117fc71e 	bne	r2,r5,c3c4 <__reset+0xfbf0c3c4>
    c4a8:	4811883a 	mov	r8,r9
    c4ac:	3023883a 	mov	r17,r6
    c4b0:	1021883a 	mov	r16,r2
    c4b4:	003e3b06 	br	bda4 <__reset+0xfbf0bda4>
    c4b8:	10002f26 	beq	r2,zero,c578 <__adddf3+0x850>
    c4bc:	4984b03a 	or	r2,r9,r6
    c4c0:	10001126 	beq	r2,zero,c508 <__adddf3+0x7e0>
    c4c4:	4004d0fa 	srli	r2,r8,3
    c4c8:	8822d0fa 	srli	r17,r17,3
    c4cc:	4010977a 	slli	r8,r8,29
    c4d0:	10c0022c 	andhi	r3,r2,8
    c4d4:	4462b03a 	or	r17,r8,r17
    c4d8:	183feb26 	beq	r3,zero,c488 <__reset+0xfbf0c488>
    c4dc:	4808d0fa 	srli	r4,r9,3
    c4e0:	20c0022c 	andhi	r3,r4,8
    c4e4:	183fe81e 	bne	r3,zero,c488 <__reset+0xfbf0c488>
    c4e8:	300cd0fa 	srli	r6,r6,3
    c4ec:	4806977a 	slli	r3,r9,29
    c4f0:	2005883a 	mov	r2,r4
    c4f4:	19a2b03a 	or	r17,r3,r6
    c4f8:	003fe306 	br	c488 <__reset+0xfbf0c488>
    c4fc:	0011883a 	mov	r8,zero
    c500:	0005883a 	mov	r2,zero
    c504:	003e3f06 	br	be04 <__reset+0xfbf0be04>
    c508:	0401ffc4 	movi	r16,2047
    c50c:	003e2506 	br	bda4 <__reset+0xfbf0bda4>
    c510:	0013883a 	mov	r9,zero
    c514:	003f8406 	br	c328 <__reset+0xfbf0c328>
    c518:	0005883a 	mov	r2,zero
    c51c:	0007883a 	mov	r3,zero
    c520:	003e8906 	br	bf48 <__reset+0xfbf0bf48>
    c524:	197ff804 	addi	r5,r3,-32
    c528:	01000804 	movi	r4,32
    c52c:	414ad83a 	srl	r5,r8,r5
    c530:	19002426 	beq	r3,r4,c5c4 <__adddf3+0x89c>
    c534:	01001004 	movi	r4,64
    c538:	20c7c83a 	sub	r3,r4,r3
    c53c:	40c6983a 	sll	r3,r8,r3
    c540:	1c46b03a 	or	r3,r3,r17
    c544:	1806c03a 	cmpne	r3,r3,zero
    c548:	28e2b03a 	or	r17,r5,r3
    c54c:	0007883a 	mov	r3,zero
    c550:	003f2306 	br	c1e0 <__reset+0xfbf0c1e0>
    c554:	0007883a 	mov	r3,zero
    c558:	5811883a 	mov	r8,r11
    c55c:	00bfffc4 	movi	r2,-1
    c560:	0401ffc4 	movi	r16,2047
    c564:	003e7806 	br	bf48 <__reset+0xfbf0bf48>
    c568:	4462b03a 	or	r17,r8,r17
    c56c:	8822c03a 	cmpne	r17,r17,zero
    c570:	0009883a 	mov	r4,zero
    c574:	003fa006 	br	c3f8 <__reset+0xfbf0c3f8>
    c578:	4811883a 	mov	r8,r9
    c57c:	3023883a 	mov	r17,r6
    c580:	0401ffc4 	movi	r16,2047
    c584:	003e0706 	br	bda4 <__reset+0xfbf0bda4>
    c588:	4811883a 	mov	r8,r9
    c58c:	3023883a 	mov	r17,r6
    c590:	003e0406 	br	bda4 <__reset+0xfbf0bda4>
    c594:	21fff804 	addi	r7,r4,-32
    c598:	01400804 	movi	r5,32
    c59c:	41ced83a 	srl	r7,r8,r7
    c5a0:	21400a26 	beq	r4,r5,c5cc <__adddf3+0x8a4>
    c5a4:	01401004 	movi	r5,64
    c5a8:	2909c83a 	sub	r4,r5,r4
    c5ac:	4108983a 	sll	r4,r8,r4
    c5b0:	2448b03a 	or	r4,r4,r17
    c5b4:	2008c03a 	cmpne	r4,r4,zero
    c5b8:	3922b03a 	or	r17,r7,r4
    c5bc:	0009883a 	mov	r4,zero
    c5c0:	003f8d06 	br	c3f8 <__reset+0xfbf0c3f8>
    c5c4:	0007883a 	mov	r3,zero
    c5c8:	003fdd06 	br	c540 <__reset+0xfbf0c540>
    c5cc:	0009883a 	mov	r4,zero
    c5d0:	003ff706 	br	c5b0 <__reset+0xfbf0c5b0>

0000c5d4 <__divdf3>:
    c5d4:	defff204 	addi	sp,sp,-56
    c5d8:	dd400915 	stw	r21,36(sp)
    c5dc:	282ad53a 	srli	r21,r5,20
    c5e0:	dd000815 	stw	r20,32(sp)
    c5e4:	2828d7fa 	srli	r20,r5,31
    c5e8:	dc000415 	stw	r16,16(sp)
    c5ec:	04000434 	movhi	r16,16
    c5f0:	df000c15 	stw	fp,48(sp)
    c5f4:	843fffc4 	addi	r16,r16,-1
    c5f8:	dfc00d15 	stw	ra,52(sp)
    c5fc:	ddc00b15 	stw	r23,44(sp)
    c600:	dd800a15 	stw	r22,40(sp)
    c604:	dcc00715 	stw	r19,28(sp)
    c608:	dc800615 	stw	r18,24(sp)
    c60c:	dc400515 	stw	r17,20(sp)
    c610:	ad41ffcc 	andi	r21,r21,2047
    c614:	2c20703a 	and	r16,r5,r16
    c618:	a7003fcc 	andi	fp,r20,255
    c61c:	a8006126 	beq	r21,zero,c7a4 <__divdf3+0x1d0>
    c620:	0081ffc4 	movi	r2,2047
    c624:	2025883a 	mov	r18,r4
    c628:	a8803726 	beq	r21,r2,c708 <__divdf3+0x134>
    c62c:	80800434 	orhi	r2,r16,16
    c630:	100490fa 	slli	r2,r2,3
    c634:	2020d77a 	srli	r16,r4,29
    c638:	202490fa 	slli	r18,r4,3
    c63c:	ad7f0044 	addi	r21,r21,-1023
    c640:	80a0b03a 	or	r16,r16,r2
    c644:	0027883a 	mov	r19,zero
    c648:	0013883a 	mov	r9,zero
    c64c:	3804d53a 	srli	r2,r7,20
    c650:	382cd7fa 	srli	r22,r7,31
    c654:	04400434 	movhi	r17,16
    c658:	8c7fffc4 	addi	r17,r17,-1
    c65c:	1081ffcc 	andi	r2,r2,2047
    c660:	3011883a 	mov	r8,r6
    c664:	3c62703a 	and	r17,r7,r17
    c668:	b5c03fcc 	andi	r23,r22,255
    c66c:	10006c26 	beq	r2,zero,c820 <__divdf3+0x24c>
    c670:	00c1ffc4 	movi	r3,2047
    c674:	10c06426 	beq	r2,r3,c808 <__divdf3+0x234>
    c678:	88c00434 	orhi	r3,r17,16
    c67c:	180690fa 	slli	r3,r3,3
    c680:	3022d77a 	srli	r17,r6,29
    c684:	301090fa 	slli	r8,r6,3
    c688:	10bf0044 	addi	r2,r2,-1023
    c68c:	88e2b03a 	or	r17,r17,r3
    c690:	000f883a 	mov	r7,zero
    c694:	a58cf03a 	xor	r6,r20,r22
    c698:	3cc8b03a 	or	r4,r7,r19
    c69c:	a8abc83a 	sub	r21,r21,r2
    c6a0:	008003c4 	movi	r2,15
    c6a4:	3007883a 	mov	r3,r6
    c6a8:	34c03fcc 	andi	r19,r6,255
    c6ac:	11009036 	bltu	r2,r4,c8f0 <__divdf3+0x31c>
    c6b0:	200890ba 	slli	r4,r4,2
    c6b4:	00800074 	movhi	r2,1
    c6b8:	10b1b204 	addi	r2,r2,-14648
    c6bc:	2089883a 	add	r4,r4,r2
    c6c0:	20800017 	ldw	r2,0(r4)
    c6c4:	1000683a 	jmp	r2
    c6c8:	0000c8f0 	cmpltui	zero,zero,803
    c6cc:	0000c740 	call	c74 <read_status_register+0x20>
    c6d0:	0000c8e0 	cmpeqi	zero,zero,803
    c6d4:	0000c734 	movhi	zero,796
    c6d8:	0000c8e0 	cmpeqi	zero,zero,803
    c6dc:	0000c8b4 	movhi	zero,802
    c6e0:	0000c8e0 	cmpeqi	zero,zero,803
    c6e4:	0000c734 	movhi	zero,796
    c6e8:	0000c740 	call	c74 <read_status_register+0x20>
    c6ec:	0000c740 	call	c74 <read_status_register+0x20>
    c6f0:	0000c8b4 	movhi	zero,802
    c6f4:	0000c734 	movhi	zero,796
    c6f8:	0000c724 	muli	zero,zero,796
    c6fc:	0000c724 	muli	zero,zero,796
    c700:	0000c724 	muli	zero,zero,796
    c704:	0000cbd4 	movui	zero,815
    c708:	2404b03a 	or	r2,r4,r16
    c70c:	1000661e 	bne	r2,zero,c8a8 <__divdf3+0x2d4>
    c710:	04c00204 	movi	r19,8
    c714:	0021883a 	mov	r16,zero
    c718:	0025883a 	mov	r18,zero
    c71c:	02400084 	movi	r9,2
    c720:	003fca06 	br	c64c <__reset+0xfbf0c64c>
    c724:	8023883a 	mov	r17,r16
    c728:	9011883a 	mov	r8,r18
    c72c:	e02f883a 	mov	r23,fp
    c730:	480f883a 	mov	r7,r9
    c734:	00800084 	movi	r2,2
    c738:	3881311e 	bne	r7,r2,cc00 <__divdf3+0x62c>
    c73c:	b827883a 	mov	r19,r23
    c740:	98c0004c 	andi	r3,r19,1
    c744:	0081ffc4 	movi	r2,2047
    c748:	000b883a 	mov	r5,zero
    c74c:	0025883a 	mov	r18,zero
    c750:	1004953a 	slli	r2,r2,20
    c754:	18c03fcc 	andi	r3,r3,255
    c758:	04400434 	movhi	r17,16
    c75c:	8c7fffc4 	addi	r17,r17,-1
    c760:	180697fa 	slli	r3,r3,31
    c764:	2c4a703a 	and	r5,r5,r17
    c768:	288ab03a 	or	r5,r5,r2
    c76c:	28c6b03a 	or	r3,r5,r3
    c770:	9005883a 	mov	r2,r18
    c774:	dfc00d17 	ldw	ra,52(sp)
    c778:	df000c17 	ldw	fp,48(sp)
    c77c:	ddc00b17 	ldw	r23,44(sp)
    c780:	dd800a17 	ldw	r22,40(sp)
    c784:	dd400917 	ldw	r21,36(sp)
    c788:	dd000817 	ldw	r20,32(sp)
    c78c:	dcc00717 	ldw	r19,28(sp)
    c790:	dc800617 	ldw	r18,24(sp)
    c794:	dc400517 	ldw	r17,20(sp)
    c798:	dc000417 	ldw	r16,16(sp)
    c79c:	dec00e04 	addi	sp,sp,56
    c7a0:	f800283a 	ret
    c7a4:	2404b03a 	or	r2,r4,r16
    c7a8:	2027883a 	mov	r19,r4
    c7ac:	10003926 	beq	r2,zero,c894 <__divdf3+0x2c0>
    c7b0:	80012e26 	beq	r16,zero,cc6c <__divdf3+0x698>
    c7b4:	8009883a 	mov	r4,r16
    c7b8:	d9800315 	stw	r6,12(sp)
    c7bc:	d9c00215 	stw	r7,8(sp)
    c7c0:	000e32c0 	call	e32c <__clzsi2>
    c7c4:	d9800317 	ldw	r6,12(sp)
    c7c8:	d9c00217 	ldw	r7,8(sp)
    c7cc:	113ffd44 	addi	r4,r2,-11
    c7d0:	00c00704 	movi	r3,28
    c7d4:	19012116 	blt	r3,r4,cc5c <__divdf3+0x688>
    c7d8:	00c00744 	movi	r3,29
    c7dc:	147ffe04 	addi	r17,r2,-8
    c7e0:	1907c83a 	sub	r3,r3,r4
    c7e4:	8460983a 	sll	r16,r16,r17
    c7e8:	98c6d83a 	srl	r3,r19,r3
    c7ec:	9c64983a 	sll	r18,r19,r17
    c7f0:	1c20b03a 	or	r16,r3,r16
    c7f4:	1080fcc4 	addi	r2,r2,1011
    c7f8:	00abc83a 	sub	r21,zero,r2
    c7fc:	0027883a 	mov	r19,zero
    c800:	0013883a 	mov	r9,zero
    c804:	003f9106 	br	c64c <__reset+0xfbf0c64c>
    c808:	3446b03a 	or	r3,r6,r17
    c80c:	18001f1e 	bne	r3,zero,c88c <__divdf3+0x2b8>
    c810:	0023883a 	mov	r17,zero
    c814:	0011883a 	mov	r8,zero
    c818:	01c00084 	movi	r7,2
    c81c:	003f9d06 	br	c694 <__reset+0xfbf0c694>
    c820:	3446b03a 	or	r3,r6,r17
    c824:	18001526 	beq	r3,zero,c87c <__divdf3+0x2a8>
    c828:	88011b26 	beq	r17,zero,cc98 <__divdf3+0x6c4>
    c82c:	8809883a 	mov	r4,r17
    c830:	d9800315 	stw	r6,12(sp)
    c834:	da400115 	stw	r9,4(sp)
    c838:	000e32c0 	call	e32c <__clzsi2>
    c83c:	d9800317 	ldw	r6,12(sp)
    c840:	da400117 	ldw	r9,4(sp)
    c844:	113ffd44 	addi	r4,r2,-11
    c848:	00c00704 	movi	r3,28
    c84c:	19010e16 	blt	r3,r4,cc88 <__divdf3+0x6b4>
    c850:	00c00744 	movi	r3,29
    c854:	123ffe04 	addi	r8,r2,-8
    c858:	1907c83a 	sub	r3,r3,r4
    c85c:	8a22983a 	sll	r17,r17,r8
    c860:	30c6d83a 	srl	r3,r6,r3
    c864:	3210983a 	sll	r8,r6,r8
    c868:	1c62b03a 	or	r17,r3,r17
    c86c:	1080fcc4 	addi	r2,r2,1011
    c870:	0085c83a 	sub	r2,zero,r2
    c874:	000f883a 	mov	r7,zero
    c878:	003f8606 	br	c694 <__reset+0xfbf0c694>
    c87c:	0023883a 	mov	r17,zero
    c880:	0011883a 	mov	r8,zero
    c884:	01c00044 	movi	r7,1
    c888:	003f8206 	br	c694 <__reset+0xfbf0c694>
    c88c:	01c000c4 	movi	r7,3
    c890:	003f8006 	br	c694 <__reset+0xfbf0c694>
    c894:	04c00104 	movi	r19,4
    c898:	0021883a 	mov	r16,zero
    c89c:	0025883a 	mov	r18,zero
    c8a0:	02400044 	movi	r9,1
    c8a4:	003f6906 	br	c64c <__reset+0xfbf0c64c>
    c8a8:	04c00304 	movi	r19,12
    c8ac:	024000c4 	movi	r9,3
    c8b0:	003f6606 	br	c64c <__reset+0xfbf0c64c>
    c8b4:	01400434 	movhi	r5,16
    c8b8:	0007883a 	mov	r3,zero
    c8bc:	297fffc4 	addi	r5,r5,-1
    c8c0:	04bfffc4 	movi	r18,-1
    c8c4:	0081ffc4 	movi	r2,2047
    c8c8:	003fa106 	br	c750 <__reset+0xfbf0c750>
    c8cc:	00c00044 	movi	r3,1
    c8d0:	1887c83a 	sub	r3,r3,r2
    c8d4:	01000e04 	movi	r4,56
    c8d8:	20c1210e 	bge	r4,r3,cd60 <__divdf3+0x78c>
    c8dc:	98c0004c 	andi	r3,r19,1
    c8e0:	0005883a 	mov	r2,zero
    c8e4:	000b883a 	mov	r5,zero
    c8e8:	0025883a 	mov	r18,zero
    c8ec:	003f9806 	br	c750 <__reset+0xfbf0c750>
    c8f0:	8c00fd36 	bltu	r17,r16,cce8 <__divdf3+0x714>
    c8f4:	8440fb26 	beq	r16,r17,cce4 <__divdf3+0x710>
    c8f8:	8007883a 	mov	r3,r16
    c8fc:	ad7fffc4 	addi	r21,r21,-1
    c900:	0021883a 	mov	r16,zero
    c904:	4004d63a 	srli	r2,r8,24
    c908:	8822923a 	slli	r17,r17,8
    c90c:	1809883a 	mov	r4,r3
    c910:	402c923a 	slli	r22,r8,8
    c914:	88b8b03a 	or	fp,r17,r2
    c918:	e028d43a 	srli	r20,fp,16
    c91c:	d8c00015 	stw	r3,0(sp)
    c920:	e5ffffcc 	andi	r23,fp,65535
    c924:	a00b883a 	mov	r5,r20
    c928:	000bc6c0 	call	bc6c <__udivsi3>
    c92c:	d8c00017 	ldw	r3,0(sp)
    c930:	a00b883a 	mov	r5,r20
    c934:	d8800315 	stw	r2,12(sp)
    c938:	1809883a 	mov	r4,r3
    c93c:	000bcd00 	call	bcd0 <__umodsi3>
    c940:	d9800317 	ldw	r6,12(sp)
    c944:	1006943a 	slli	r3,r2,16
    c948:	9004d43a 	srli	r2,r18,16
    c94c:	b9a3383a 	mul	r17,r23,r6
    c950:	10c4b03a 	or	r2,r2,r3
    c954:	1440062e 	bgeu	r2,r17,c970 <__divdf3+0x39c>
    c958:	1705883a 	add	r2,r2,fp
    c95c:	30ffffc4 	addi	r3,r6,-1
    c960:	1700ee36 	bltu	r2,fp,cd1c <__divdf3+0x748>
    c964:	1440ed2e 	bgeu	r2,r17,cd1c <__divdf3+0x748>
    c968:	31bfff84 	addi	r6,r6,-2
    c96c:	1705883a 	add	r2,r2,fp
    c970:	1463c83a 	sub	r17,r2,r17
    c974:	a00b883a 	mov	r5,r20
    c978:	8809883a 	mov	r4,r17
    c97c:	d9800315 	stw	r6,12(sp)
    c980:	000bc6c0 	call	bc6c <__udivsi3>
    c984:	a00b883a 	mov	r5,r20
    c988:	8809883a 	mov	r4,r17
    c98c:	d8800215 	stw	r2,8(sp)
    c990:	000bcd00 	call	bcd0 <__umodsi3>
    c994:	d9c00217 	ldw	r7,8(sp)
    c998:	1004943a 	slli	r2,r2,16
    c99c:	94bfffcc 	andi	r18,r18,65535
    c9a0:	b9d1383a 	mul	r8,r23,r7
    c9a4:	90a4b03a 	or	r18,r18,r2
    c9a8:	d9800317 	ldw	r6,12(sp)
    c9ac:	9200062e 	bgeu	r18,r8,c9c8 <__divdf3+0x3f4>
    c9b0:	9725883a 	add	r18,r18,fp
    c9b4:	38bfffc4 	addi	r2,r7,-1
    c9b8:	9700d636 	bltu	r18,fp,cd14 <__divdf3+0x740>
    c9bc:	9200d52e 	bgeu	r18,r8,cd14 <__divdf3+0x740>
    c9c0:	39ffff84 	addi	r7,r7,-2
    c9c4:	9725883a 	add	r18,r18,fp
    c9c8:	3004943a 	slli	r2,r6,16
    c9cc:	b012d43a 	srli	r9,r22,16
    c9d0:	b1bfffcc 	andi	r6,r22,65535
    c9d4:	11e2b03a 	or	r17,r2,r7
    c9d8:	8806d43a 	srli	r3,r17,16
    c9dc:	893fffcc 	andi	r4,r17,65535
    c9e0:	218b383a 	mul	r5,r4,r6
    c9e4:	30c5383a 	mul	r2,r6,r3
    c9e8:	2249383a 	mul	r4,r4,r9
    c9ec:	280ed43a 	srli	r7,r5,16
    c9f0:	9225c83a 	sub	r18,r18,r8
    c9f4:	2089883a 	add	r4,r4,r2
    c9f8:	3909883a 	add	r4,r7,r4
    c9fc:	1a47383a 	mul	r3,r3,r9
    ca00:	2080022e 	bgeu	r4,r2,ca0c <__divdf3+0x438>
    ca04:	00800074 	movhi	r2,1
    ca08:	1887883a 	add	r3,r3,r2
    ca0c:	2004d43a 	srli	r2,r4,16
    ca10:	2008943a 	slli	r4,r4,16
    ca14:	297fffcc 	andi	r5,r5,65535
    ca18:	10c7883a 	add	r3,r2,r3
    ca1c:	2149883a 	add	r4,r4,r5
    ca20:	90c0a536 	bltu	r18,r3,ccb8 <__divdf3+0x6e4>
    ca24:	90c0bf26 	beq	r18,r3,cd24 <__divdf3+0x750>
    ca28:	90c7c83a 	sub	r3,r18,r3
    ca2c:	810fc83a 	sub	r7,r16,r4
    ca30:	81e5803a 	cmpltu	r18,r16,r7
    ca34:	1ca5c83a 	sub	r18,r3,r18
    ca38:	e480c126 	beq	fp,r18,cd40 <__divdf3+0x76c>
    ca3c:	a00b883a 	mov	r5,r20
    ca40:	9009883a 	mov	r4,r18
    ca44:	d9800315 	stw	r6,12(sp)
    ca48:	d9c00215 	stw	r7,8(sp)
    ca4c:	da400115 	stw	r9,4(sp)
    ca50:	000bc6c0 	call	bc6c <__udivsi3>
    ca54:	a00b883a 	mov	r5,r20
    ca58:	9009883a 	mov	r4,r18
    ca5c:	d8800015 	stw	r2,0(sp)
    ca60:	000bcd00 	call	bcd0 <__umodsi3>
    ca64:	d9c00217 	ldw	r7,8(sp)
    ca68:	da000017 	ldw	r8,0(sp)
    ca6c:	1006943a 	slli	r3,r2,16
    ca70:	3804d43a 	srli	r2,r7,16
    ca74:	ba21383a 	mul	r16,r23,r8
    ca78:	d9800317 	ldw	r6,12(sp)
    ca7c:	10c4b03a 	or	r2,r2,r3
    ca80:	da400117 	ldw	r9,4(sp)
    ca84:	1400062e 	bgeu	r2,r16,caa0 <__divdf3+0x4cc>
    ca88:	1705883a 	add	r2,r2,fp
    ca8c:	40ffffc4 	addi	r3,r8,-1
    ca90:	1700ad36 	bltu	r2,fp,cd48 <__divdf3+0x774>
    ca94:	1400ac2e 	bgeu	r2,r16,cd48 <__divdf3+0x774>
    ca98:	423fff84 	addi	r8,r8,-2
    ca9c:	1705883a 	add	r2,r2,fp
    caa0:	1421c83a 	sub	r16,r2,r16
    caa4:	a00b883a 	mov	r5,r20
    caa8:	8009883a 	mov	r4,r16
    caac:	d9800315 	stw	r6,12(sp)
    cab0:	d9c00215 	stw	r7,8(sp)
    cab4:	da000015 	stw	r8,0(sp)
    cab8:	da400115 	stw	r9,4(sp)
    cabc:	000bc6c0 	call	bc6c <__udivsi3>
    cac0:	8009883a 	mov	r4,r16
    cac4:	a00b883a 	mov	r5,r20
    cac8:	1025883a 	mov	r18,r2
    cacc:	000bcd00 	call	bcd0 <__umodsi3>
    cad0:	d9c00217 	ldw	r7,8(sp)
    cad4:	1004943a 	slli	r2,r2,16
    cad8:	bcaf383a 	mul	r23,r23,r18
    cadc:	393fffcc 	andi	r4,r7,65535
    cae0:	2088b03a 	or	r4,r4,r2
    cae4:	d9800317 	ldw	r6,12(sp)
    cae8:	da000017 	ldw	r8,0(sp)
    caec:	da400117 	ldw	r9,4(sp)
    caf0:	25c0062e 	bgeu	r4,r23,cb0c <__divdf3+0x538>
    caf4:	2709883a 	add	r4,r4,fp
    caf8:	90bfffc4 	addi	r2,r18,-1
    cafc:	27009436 	bltu	r4,fp,cd50 <__divdf3+0x77c>
    cb00:	25c0932e 	bgeu	r4,r23,cd50 <__divdf3+0x77c>
    cb04:	94bfff84 	addi	r18,r18,-2
    cb08:	2709883a 	add	r4,r4,fp
    cb0c:	4004943a 	slli	r2,r8,16
    cb10:	25efc83a 	sub	r23,r4,r23
    cb14:	1490b03a 	or	r8,r2,r18
    cb18:	4008d43a 	srli	r4,r8,16
    cb1c:	40ffffcc 	andi	r3,r8,65535
    cb20:	30c5383a 	mul	r2,r6,r3
    cb24:	1a47383a 	mul	r3,r3,r9
    cb28:	310d383a 	mul	r6,r6,r4
    cb2c:	100ad43a 	srli	r5,r2,16
    cb30:	4913383a 	mul	r9,r9,r4
    cb34:	1987883a 	add	r3,r3,r6
    cb38:	28c7883a 	add	r3,r5,r3
    cb3c:	1980022e 	bgeu	r3,r6,cb48 <__divdf3+0x574>
    cb40:	01000074 	movhi	r4,1
    cb44:	4913883a 	add	r9,r9,r4
    cb48:	1808d43a 	srli	r4,r3,16
    cb4c:	1806943a 	slli	r3,r3,16
    cb50:	10bfffcc 	andi	r2,r2,65535
    cb54:	2253883a 	add	r9,r4,r9
    cb58:	1887883a 	add	r3,r3,r2
    cb5c:	ba403836 	bltu	r23,r9,cc40 <__divdf3+0x66c>
    cb60:	ba403626 	beq	r23,r9,cc3c <__divdf3+0x668>
    cb64:	42000054 	ori	r8,r8,1
    cb68:	a880ffc4 	addi	r2,r21,1023
    cb6c:	00bf570e 	bge	zero,r2,c8cc <__reset+0xfbf0c8cc>
    cb70:	40c001cc 	andi	r3,r8,7
    cb74:	18000726 	beq	r3,zero,cb94 <__divdf3+0x5c0>
    cb78:	40c003cc 	andi	r3,r8,15
    cb7c:	01000104 	movi	r4,4
    cb80:	19000426 	beq	r3,r4,cb94 <__divdf3+0x5c0>
    cb84:	4107883a 	add	r3,r8,r4
    cb88:	1a11803a 	cmpltu	r8,r3,r8
    cb8c:	8a23883a 	add	r17,r17,r8
    cb90:	1811883a 	mov	r8,r3
    cb94:	88c0402c 	andhi	r3,r17,256
    cb98:	18000426 	beq	r3,zero,cbac <__divdf3+0x5d8>
    cb9c:	00ffc034 	movhi	r3,65280
    cba0:	18ffffc4 	addi	r3,r3,-1
    cba4:	a8810004 	addi	r2,r21,1024
    cba8:	88e2703a 	and	r17,r17,r3
    cbac:	00c1ff84 	movi	r3,2046
    cbb0:	18bee316 	blt	r3,r2,c740 <__reset+0xfbf0c740>
    cbb4:	8824977a 	slli	r18,r17,29
    cbb8:	4010d0fa 	srli	r8,r8,3
    cbbc:	8822927a 	slli	r17,r17,9
    cbc0:	1081ffcc 	andi	r2,r2,2047
    cbc4:	9224b03a 	or	r18,r18,r8
    cbc8:	880ad33a 	srli	r5,r17,12
    cbcc:	98c0004c 	andi	r3,r19,1
    cbd0:	003edf06 	br	c750 <__reset+0xfbf0c750>
    cbd4:	8080022c 	andhi	r2,r16,8
    cbd8:	10001226 	beq	r2,zero,cc24 <__divdf3+0x650>
    cbdc:	8880022c 	andhi	r2,r17,8
    cbe0:	1000101e 	bne	r2,zero,cc24 <__divdf3+0x650>
    cbe4:	00800434 	movhi	r2,16
    cbe8:	89400234 	orhi	r5,r17,8
    cbec:	10bfffc4 	addi	r2,r2,-1
    cbf0:	b007883a 	mov	r3,r22
    cbf4:	288a703a 	and	r5,r5,r2
    cbf8:	4025883a 	mov	r18,r8
    cbfc:	003f3106 	br	c8c4 <__reset+0xfbf0c8c4>
    cc00:	008000c4 	movi	r2,3
    cc04:	3880a626 	beq	r7,r2,cea0 <__divdf3+0x8cc>
    cc08:	00800044 	movi	r2,1
    cc0c:	3880521e 	bne	r7,r2,cd58 <__divdf3+0x784>
    cc10:	b807883a 	mov	r3,r23
    cc14:	0005883a 	mov	r2,zero
    cc18:	000b883a 	mov	r5,zero
    cc1c:	0025883a 	mov	r18,zero
    cc20:	003ecb06 	br	c750 <__reset+0xfbf0c750>
    cc24:	00800434 	movhi	r2,16
    cc28:	81400234 	orhi	r5,r16,8
    cc2c:	10bfffc4 	addi	r2,r2,-1
    cc30:	a007883a 	mov	r3,r20
    cc34:	288a703a 	and	r5,r5,r2
    cc38:	003f2206 	br	c8c4 <__reset+0xfbf0c8c4>
    cc3c:	183fca26 	beq	r3,zero,cb68 <__reset+0xfbf0cb68>
    cc40:	e5ef883a 	add	r23,fp,r23
    cc44:	40bfffc4 	addi	r2,r8,-1
    cc48:	bf00392e 	bgeu	r23,fp,cd30 <__divdf3+0x75c>
    cc4c:	1011883a 	mov	r8,r2
    cc50:	ba7fc41e 	bne	r23,r9,cb64 <__reset+0xfbf0cb64>
    cc54:	b0ffc31e 	bne	r22,r3,cb64 <__reset+0xfbf0cb64>
    cc58:	003fc306 	br	cb68 <__reset+0xfbf0cb68>
    cc5c:	143ff604 	addi	r16,r2,-40
    cc60:	9c20983a 	sll	r16,r19,r16
    cc64:	0025883a 	mov	r18,zero
    cc68:	003ee206 	br	c7f4 <__reset+0xfbf0c7f4>
    cc6c:	d9800315 	stw	r6,12(sp)
    cc70:	d9c00215 	stw	r7,8(sp)
    cc74:	000e32c0 	call	e32c <__clzsi2>
    cc78:	10800804 	addi	r2,r2,32
    cc7c:	d9c00217 	ldw	r7,8(sp)
    cc80:	d9800317 	ldw	r6,12(sp)
    cc84:	003ed106 	br	c7cc <__reset+0xfbf0c7cc>
    cc88:	147ff604 	addi	r17,r2,-40
    cc8c:	3462983a 	sll	r17,r6,r17
    cc90:	0011883a 	mov	r8,zero
    cc94:	003ef506 	br	c86c <__reset+0xfbf0c86c>
    cc98:	3009883a 	mov	r4,r6
    cc9c:	d9800315 	stw	r6,12(sp)
    cca0:	da400115 	stw	r9,4(sp)
    cca4:	000e32c0 	call	e32c <__clzsi2>
    cca8:	10800804 	addi	r2,r2,32
    ccac:	da400117 	ldw	r9,4(sp)
    ccb0:	d9800317 	ldw	r6,12(sp)
    ccb4:	003ee306 	br	c844 <__reset+0xfbf0c844>
    ccb8:	85a1883a 	add	r16,r16,r22
    ccbc:	8585803a 	cmpltu	r2,r16,r22
    ccc0:	1705883a 	add	r2,r2,fp
    ccc4:	14a5883a 	add	r18,r2,r18
    ccc8:	88bfffc4 	addi	r2,r17,-1
    cccc:	e4800c2e 	bgeu	fp,r18,cd00 <__divdf3+0x72c>
    ccd0:	90c03e36 	bltu	r18,r3,cdcc <__divdf3+0x7f8>
    ccd4:	1c806926 	beq	r3,r18,ce7c <__divdf3+0x8a8>
    ccd8:	90c7c83a 	sub	r3,r18,r3
    ccdc:	1023883a 	mov	r17,r2
    cce0:	003f5206 	br	ca2c <__reset+0xfbf0ca2c>
    cce4:	923f0436 	bltu	r18,r8,c8f8 <__reset+0xfbf0c8f8>
    cce8:	800897fa 	slli	r4,r16,31
    ccec:	9004d07a 	srli	r2,r18,1
    ccf0:	8006d07a 	srli	r3,r16,1
    ccf4:	902097fa 	slli	r16,r18,31
    ccf8:	20a4b03a 	or	r18,r4,r2
    ccfc:	003f0106 	br	c904 <__reset+0xfbf0c904>
    cd00:	e4bff51e 	bne	fp,r18,ccd8 <__reset+0xfbf0ccd8>
    cd04:	85bff22e 	bgeu	r16,r22,ccd0 <__reset+0xfbf0ccd0>
    cd08:	e0c7c83a 	sub	r3,fp,r3
    cd0c:	1023883a 	mov	r17,r2
    cd10:	003f4606 	br	ca2c <__reset+0xfbf0ca2c>
    cd14:	100f883a 	mov	r7,r2
    cd18:	003f2b06 	br	c9c8 <__reset+0xfbf0c9c8>
    cd1c:	180d883a 	mov	r6,r3
    cd20:	003f1306 	br	c970 <__reset+0xfbf0c970>
    cd24:	813fe436 	bltu	r16,r4,ccb8 <__reset+0xfbf0ccb8>
    cd28:	0007883a 	mov	r3,zero
    cd2c:	003f3f06 	br	ca2c <__reset+0xfbf0ca2c>
    cd30:	ba402c36 	bltu	r23,r9,cde4 <__divdf3+0x810>
    cd34:	4dc05426 	beq	r9,r23,ce88 <__divdf3+0x8b4>
    cd38:	1011883a 	mov	r8,r2
    cd3c:	003f8906 	br	cb64 <__reset+0xfbf0cb64>
    cd40:	023fffc4 	movi	r8,-1
    cd44:	003f8806 	br	cb68 <__reset+0xfbf0cb68>
    cd48:	1811883a 	mov	r8,r3
    cd4c:	003f5406 	br	caa0 <__reset+0xfbf0caa0>
    cd50:	1025883a 	mov	r18,r2
    cd54:	003f6d06 	br	cb0c <__reset+0xfbf0cb0c>
    cd58:	b827883a 	mov	r19,r23
    cd5c:	003f8206 	br	cb68 <__reset+0xfbf0cb68>
    cd60:	010007c4 	movi	r4,31
    cd64:	20c02616 	blt	r4,r3,ce00 <__divdf3+0x82c>
    cd68:	00800804 	movi	r2,32
    cd6c:	10c5c83a 	sub	r2,r2,r3
    cd70:	888a983a 	sll	r5,r17,r2
    cd74:	40c8d83a 	srl	r4,r8,r3
    cd78:	4084983a 	sll	r2,r8,r2
    cd7c:	88e2d83a 	srl	r17,r17,r3
    cd80:	2906b03a 	or	r3,r5,r4
    cd84:	1004c03a 	cmpne	r2,r2,zero
    cd88:	1886b03a 	or	r3,r3,r2
    cd8c:	188001cc 	andi	r2,r3,7
    cd90:	10000726 	beq	r2,zero,cdb0 <__divdf3+0x7dc>
    cd94:	188003cc 	andi	r2,r3,15
    cd98:	01000104 	movi	r4,4
    cd9c:	11000426 	beq	r2,r4,cdb0 <__divdf3+0x7dc>
    cda0:	1805883a 	mov	r2,r3
    cda4:	10c00104 	addi	r3,r2,4
    cda8:	1885803a 	cmpltu	r2,r3,r2
    cdac:	88a3883a 	add	r17,r17,r2
    cdb0:	8880202c 	andhi	r2,r17,128
    cdb4:	10002726 	beq	r2,zero,ce54 <__divdf3+0x880>
    cdb8:	98c0004c 	andi	r3,r19,1
    cdbc:	00800044 	movi	r2,1
    cdc0:	000b883a 	mov	r5,zero
    cdc4:	0025883a 	mov	r18,zero
    cdc8:	003e6106 	br	c750 <__reset+0xfbf0c750>
    cdcc:	85a1883a 	add	r16,r16,r22
    cdd0:	8585803a 	cmpltu	r2,r16,r22
    cdd4:	1705883a 	add	r2,r2,fp
    cdd8:	14a5883a 	add	r18,r2,r18
    cddc:	8c7fff84 	addi	r17,r17,-2
    cde0:	003f1106 	br	ca28 <__reset+0xfbf0ca28>
    cde4:	b589883a 	add	r4,r22,r22
    cde8:	25ad803a 	cmpltu	r22,r4,r22
    cdec:	b739883a 	add	fp,r22,fp
    cdf0:	40bfff84 	addi	r2,r8,-2
    cdf4:	bf2f883a 	add	r23,r23,fp
    cdf8:	202d883a 	mov	r22,r4
    cdfc:	003f9306 	br	cc4c <__reset+0xfbf0cc4c>
    ce00:	013ff844 	movi	r4,-31
    ce04:	2085c83a 	sub	r2,r4,r2
    ce08:	8888d83a 	srl	r4,r17,r2
    ce0c:	00800804 	movi	r2,32
    ce10:	18802126 	beq	r3,r2,ce98 <__divdf3+0x8c4>
    ce14:	00801004 	movi	r2,64
    ce18:	10c5c83a 	sub	r2,r2,r3
    ce1c:	8884983a 	sll	r2,r17,r2
    ce20:	1204b03a 	or	r2,r2,r8
    ce24:	1004c03a 	cmpne	r2,r2,zero
    ce28:	2084b03a 	or	r2,r4,r2
    ce2c:	144001cc 	andi	r17,r2,7
    ce30:	88000d1e 	bne	r17,zero,ce68 <__divdf3+0x894>
    ce34:	000b883a 	mov	r5,zero
    ce38:	1024d0fa 	srli	r18,r2,3
    ce3c:	98c0004c 	andi	r3,r19,1
    ce40:	0005883a 	mov	r2,zero
    ce44:	9464b03a 	or	r18,r18,r17
    ce48:	003e4106 	br	c750 <__reset+0xfbf0c750>
    ce4c:	1007883a 	mov	r3,r2
    ce50:	0023883a 	mov	r17,zero
    ce54:	880a927a 	slli	r5,r17,9
    ce58:	1805883a 	mov	r2,r3
    ce5c:	8822977a 	slli	r17,r17,29
    ce60:	280ad33a 	srli	r5,r5,12
    ce64:	003ff406 	br	ce38 <__reset+0xfbf0ce38>
    ce68:	10c003cc 	andi	r3,r2,15
    ce6c:	01000104 	movi	r4,4
    ce70:	193ff626 	beq	r3,r4,ce4c <__reset+0xfbf0ce4c>
    ce74:	0023883a 	mov	r17,zero
    ce78:	003fca06 	br	cda4 <__reset+0xfbf0cda4>
    ce7c:	813fd336 	bltu	r16,r4,cdcc <__reset+0xfbf0cdcc>
    ce80:	1023883a 	mov	r17,r2
    ce84:	003fa806 	br	cd28 <__reset+0xfbf0cd28>
    ce88:	b0ffd636 	bltu	r22,r3,cde4 <__reset+0xfbf0cde4>
    ce8c:	1011883a 	mov	r8,r2
    ce90:	b0ff341e 	bne	r22,r3,cb64 <__reset+0xfbf0cb64>
    ce94:	003f3406 	br	cb68 <__reset+0xfbf0cb68>
    ce98:	0005883a 	mov	r2,zero
    ce9c:	003fe006 	br	ce20 <__reset+0xfbf0ce20>
    cea0:	00800434 	movhi	r2,16
    cea4:	89400234 	orhi	r5,r17,8
    cea8:	10bfffc4 	addi	r2,r2,-1
    ceac:	b807883a 	mov	r3,r23
    ceb0:	288a703a 	and	r5,r5,r2
    ceb4:	4025883a 	mov	r18,r8
    ceb8:	003e8206 	br	c8c4 <__reset+0xfbf0c8c4>

0000cebc <__eqdf2>:
    cebc:	2804d53a 	srli	r2,r5,20
    cec0:	3806d53a 	srli	r3,r7,20
    cec4:	02000434 	movhi	r8,16
    cec8:	423fffc4 	addi	r8,r8,-1
    cecc:	1081ffcc 	andi	r2,r2,2047
    ced0:	0281ffc4 	movi	r10,2047
    ced4:	2a12703a 	and	r9,r5,r8
    ced8:	18c1ffcc 	andi	r3,r3,2047
    cedc:	3a10703a 	and	r8,r7,r8
    cee0:	280ad7fa 	srli	r5,r5,31
    cee4:	380ed7fa 	srli	r7,r7,31
    cee8:	12801026 	beq	r2,r10,cf2c <__eqdf2+0x70>
    ceec:	0281ffc4 	movi	r10,2047
    cef0:	1a800a26 	beq	r3,r10,cf1c <__eqdf2+0x60>
    cef4:	10c00226 	beq	r2,r3,cf00 <__eqdf2+0x44>
    cef8:	00800044 	movi	r2,1
    cefc:	f800283a 	ret
    cf00:	4a3ffd1e 	bne	r9,r8,cef8 <__reset+0xfbf0cef8>
    cf04:	21bffc1e 	bne	r4,r6,cef8 <__reset+0xfbf0cef8>
    cf08:	29c00c26 	beq	r5,r7,cf3c <__eqdf2+0x80>
    cf0c:	103ffa1e 	bne	r2,zero,cef8 <__reset+0xfbf0cef8>
    cf10:	2244b03a 	or	r2,r4,r9
    cf14:	1004c03a 	cmpne	r2,r2,zero
    cf18:	f800283a 	ret
    cf1c:	3214b03a 	or	r10,r6,r8
    cf20:	503ff426 	beq	r10,zero,cef4 <__reset+0xfbf0cef4>
    cf24:	00800044 	movi	r2,1
    cf28:	f800283a 	ret
    cf2c:	2254b03a 	or	r10,r4,r9
    cf30:	503fee26 	beq	r10,zero,ceec <__reset+0xfbf0ceec>
    cf34:	00800044 	movi	r2,1
    cf38:	f800283a 	ret
    cf3c:	0005883a 	mov	r2,zero
    cf40:	f800283a 	ret

0000cf44 <__gedf2>:
    cf44:	2804d53a 	srli	r2,r5,20
    cf48:	3806d53a 	srli	r3,r7,20
    cf4c:	02000434 	movhi	r8,16
    cf50:	423fffc4 	addi	r8,r8,-1
    cf54:	1081ffcc 	andi	r2,r2,2047
    cf58:	0241ffc4 	movi	r9,2047
    cf5c:	2a14703a 	and	r10,r5,r8
    cf60:	18c1ffcc 	andi	r3,r3,2047
    cf64:	3a10703a 	and	r8,r7,r8
    cf68:	280ad7fa 	srli	r5,r5,31
    cf6c:	380ed7fa 	srli	r7,r7,31
    cf70:	12401d26 	beq	r2,r9,cfe8 <__gedf2+0xa4>
    cf74:	0241ffc4 	movi	r9,2047
    cf78:	1a401226 	beq	r3,r9,cfc4 <__gedf2+0x80>
    cf7c:	1000081e 	bne	r2,zero,cfa0 <__gedf2+0x5c>
    cf80:	2296b03a 	or	r11,r4,r10
    cf84:	5813003a 	cmpeq	r9,r11,zero
    cf88:	1800091e 	bne	r3,zero,cfb0 <__gedf2+0x6c>
    cf8c:	3218b03a 	or	r12,r6,r8
    cf90:	6000071e 	bne	r12,zero,cfb0 <__gedf2+0x6c>
    cf94:	0005883a 	mov	r2,zero
    cf98:	5800101e 	bne	r11,zero,cfdc <__gedf2+0x98>
    cf9c:	f800283a 	ret
    cfa0:	18000c1e 	bne	r3,zero,cfd4 <__gedf2+0x90>
    cfa4:	3212b03a 	or	r9,r6,r8
    cfa8:	48000c26 	beq	r9,zero,cfdc <__gedf2+0x98>
    cfac:	0013883a 	mov	r9,zero
    cfb0:	39c03fcc 	andi	r7,r7,255
    cfb4:	48000826 	beq	r9,zero,cfd8 <__gedf2+0x94>
    cfb8:	38000926 	beq	r7,zero,cfe0 <__gedf2+0x9c>
    cfbc:	00800044 	movi	r2,1
    cfc0:	f800283a 	ret
    cfc4:	3212b03a 	or	r9,r6,r8
    cfc8:	483fec26 	beq	r9,zero,cf7c <__reset+0xfbf0cf7c>
    cfcc:	00bfff84 	movi	r2,-2
    cfd0:	f800283a 	ret
    cfd4:	39c03fcc 	andi	r7,r7,255
    cfd8:	29c00626 	beq	r5,r7,cff4 <__gedf2+0xb0>
    cfdc:	283ff726 	beq	r5,zero,cfbc <__reset+0xfbf0cfbc>
    cfe0:	00bfffc4 	movi	r2,-1
    cfe4:	f800283a 	ret
    cfe8:	2292b03a 	or	r9,r4,r10
    cfec:	483fe126 	beq	r9,zero,cf74 <__reset+0xfbf0cf74>
    cff0:	003ff606 	br	cfcc <__reset+0xfbf0cfcc>
    cff4:	18bff916 	blt	r3,r2,cfdc <__reset+0xfbf0cfdc>
    cff8:	10c00316 	blt	r2,r3,d008 <__gedf2+0xc4>
    cffc:	42bff736 	bltu	r8,r10,cfdc <__reset+0xfbf0cfdc>
    d000:	52000326 	beq	r10,r8,d010 <__gedf2+0xcc>
    d004:	5200042e 	bgeu	r10,r8,d018 <__gedf2+0xd4>
    d008:	283fec1e 	bne	r5,zero,cfbc <__reset+0xfbf0cfbc>
    d00c:	003ff406 	br	cfe0 <__reset+0xfbf0cfe0>
    d010:	313ff236 	bltu	r6,r4,cfdc <__reset+0xfbf0cfdc>
    d014:	21bffc36 	bltu	r4,r6,d008 <__reset+0xfbf0d008>
    d018:	0005883a 	mov	r2,zero
    d01c:	f800283a 	ret

0000d020 <__ledf2>:
    d020:	2804d53a 	srli	r2,r5,20
    d024:	3810d53a 	srli	r8,r7,20
    d028:	00c00434 	movhi	r3,16
    d02c:	18ffffc4 	addi	r3,r3,-1
    d030:	1081ffcc 	andi	r2,r2,2047
    d034:	0241ffc4 	movi	r9,2047
    d038:	28d4703a 	and	r10,r5,r3
    d03c:	4201ffcc 	andi	r8,r8,2047
    d040:	38c6703a 	and	r3,r7,r3
    d044:	280ad7fa 	srli	r5,r5,31
    d048:	380ed7fa 	srli	r7,r7,31
    d04c:	12401f26 	beq	r2,r9,d0cc <__ledf2+0xac>
    d050:	0241ffc4 	movi	r9,2047
    d054:	42401426 	beq	r8,r9,d0a8 <__ledf2+0x88>
    d058:	1000091e 	bne	r2,zero,d080 <__ledf2+0x60>
    d05c:	2296b03a 	or	r11,r4,r10
    d060:	5813003a 	cmpeq	r9,r11,zero
    d064:	29403fcc 	andi	r5,r5,255
    d068:	40000a1e 	bne	r8,zero,d094 <__ledf2+0x74>
    d06c:	30d8b03a 	or	r12,r6,r3
    d070:	6000081e 	bne	r12,zero,d094 <__ledf2+0x74>
    d074:	0005883a 	mov	r2,zero
    d078:	5800111e 	bne	r11,zero,d0c0 <__ledf2+0xa0>
    d07c:	f800283a 	ret
    d080:	29403fcc 	andi	r5,r5,255
    d084:	40000c1e 	bne	r8,zero,d0b8 <__ledf2+0x98>
    d088:	30d2b03a 	or	r9,r6,r3
    d08c:	48000c26 	beq	r9,zero,d0c0 <__ledf2+0xa0>
    d090:	0013883a 	mov	r9,zero
    d094:	39c03fcc 	andi	r7,r7,255
    d098:	48000826 	beq	r9,zero,d0bc <__ledf2+0x9c>
    d09c:	38001126 	beq	r7,zero,d0e4 <__ledf2+0xc4>
    d0a0:	00800044 	movi	r2,1
    d0a4:	f800283a 	ret
    d0a8:	30d2b03a 	or	r9,r6,r3
    d0ac:	483fea26 	beq	r9,zero,d058 <__reset+0xfbf0d058>
    d0b0:	00800084 	movi	r2,2
    d0b4:	f800283a 	ret
    d0b8:	39c03fcc 	andi	r7,r7,255
    d0bc:	39400726 	beq	r7,r5,d0dc <__ledf2+0xbc>
    d0c0:	2800081e 	bne	r5,zero,d0e4 <__ledf2+0xc4>
    d0c4:	00800044 	movi	r2,1
    d0c8:	f800283a 	ret
    d0cc:	2292b03a 	or	r9,r4,r10
    d0d0:	483fdf26 	beq	r9,zero,d050 <__reset+0xfbf0d050>
    d0d4:	00800084 	movi	r2,2
    d0d8:	f800283a 	ret
    d0dc:	4080030e 	bge	r8,r2,d0ec <__ledf2+0xcc>
    d0e0:	383fef26 	beq	r7,zero,d0a0 <__reset+0xfbf0d0a0>
    d0e4:	00bfffc4 	movi	r2,-1
    d0e8:	f800283a 	ret
    d0ec:	123feb16 	blt	r2,r8,d09c <__reset+0xfbf0d09c>
    d0f0:	1abff336 	bltu	r3,r10,d0c0 <__reset+0xfbf0d0c0>
    d0f4:	50c00326 	beq	r10,r3,d104 <__ledf2+0xe4>
    d0f8:	50c0042e 	bgeu	r10,r3,d10c <__ledf2+0xec>
    d0fc:	283fe81e 	bne	r5,zero,d0a0 <__reset+0xfbf0d0a0>
    d100:	003ff806 	br	d0e4 <__reset+0xfbf0d0e4>
    d104:	313fee36 	bltu	r6,r4,d0c0 <__reset+0xfbf0d0c0>
    d108:	21bffc36 	bltu	r4,r6,d0fc <__reset+0xfbf0d0fc>
    d10c:	0005883a 	mov	r2,zero
    d110:	f800283a 	ret

0000d114 <__muldf3>:
    d114:	defff304 	addi	sp,sp,-52
    d118:	2804d53a 	srli	r2,r5,20
    d11c:	dd800915 	stw	r22,36(sp)
    d120:	282cd7fa 	srli	r22,r5,31
    d124:	dc000315 	stw	r16,12(sp)
    d128:	04000434 	movhi	r16,16
    d12c:	dd400815 	stw	r21,32(sp)
    d130:	dc800515 	stw	r18,20(sp)
    d134:	843fffc4 	addi	r16,r16,-1
    d138:	dfc00c15 	stw	ra,48(sp)
    d13c:	df000b15 	stw	fp,44(sp)
    d140:	ddc00a15 	stw	r23,40(sp)
    d144:	dd000715 	stw	r20,28(sp)
    d148:	dcc00615 	stw	r19,24(sp)
    d14c:	dc400415 	stw	r17,16(sp)
    d150:	1481ffcc 	andi	r18,r2,2047
    d154:	2c20703a 	and	r16,r5,r16
    d158:	b02b883a 	mov	r21,r22
    d15c:	b2403fcc 	andi	r9,r22,255
    d160:	90006026 	beq	r18,zero,d2e4 <__muldf3+0x1d0>
    d164:	0081ffc4 	movi	r2,2047
    d168:	2029883a 	mov	r20,r4
    d16c:	90803626 	beq	r18,r2,d248 <__muldf3+0x134>
    d170:	80800434 	orhi	r2,r16,16
    d174:	100490fa 	slli	r2,r2,3
    d178:	2020d77a 	srli	r16,r4,29
    d17c:	202890fa 	slli	r20,r4,3
    d180:	94bf0044 	addi	r18,r18,-1023
    d184:	80a0b03a 	or	r16,r16,r2
    d188:	0027883a 	mov	r19,zero
    d18c:	0039883a 	mov	fp,zero
    d190:	3804d53a 	srli	r2,r7,20
    d194:	382ed7fa 	srli	r23,r7,31
    d198:	04400434 	movhi	r17,16
    d19c:	8c7fffc4 	addi	r17,r17,-1
    d1a0:	1081ffcc 	andi	r2,r2,2047
    d1a4:	3011883a 	mov	r8,r6
    d1a8:	3c62703a 	and	r17,r7,r17
    d1ac:	ba803fcc 	andi	r10,r23,255
    d1b0:	10006d26 	beq	r2,zero,d368 <__muldf3+0x254>
    d1b4:	00c1ffc4 	movi	r3,2047
    d1b8:	10c06526 	beq	r2,r3,d350 <__muldf3+0x23c>
    d1bc:	88c00434 	orhi	r3,r17,16
    d1c0:	180690fa 	slli	r3,r3,3
    d1c4:	3022d77a 	srli	r17,r6,29
    d1c8:	301090fa 	slli	r8,r6,3
    d1cc:	10bf0044 	addi	r2,r2,-1023
    d1d0:	88e2b03a 	or	r17,r17,r3
    d1d4:	000b883a 	mov	r5,zero
    d1d8:	9085883a 	add	r2,r18,r2
    d1dc:	2cc8b03a 	or	r4,r5,r19
    d1e0:	00c003c4 	movi	r3,15
    d1e4:	bdacf03a 	xor	r22,r23,r22
    d1e8:	12c00044 	addi	r11,r2,1
    d1ec:	19009936 	bltu	r3,r4,d454 <__muldf3+0x340>
    d1f0:	200890ba 	slli	r4,r4,2
    d1f4:	00c00074 	movhi	r3,1
    d1f8:	18f48204 	addi	r3,r3,-11768
    d1fc:	20c9883a 	add	r4,r4,r3
    d200:	20c00017 	ldw	r3,0(r4)
    d204:	1800683a 	jmp	r3
    d208:	0000d454 	movui	zero,849
    d20c:	0000d268 	cmpgeui	zero,zero,841
    d210:	0000d268 	cmpgeui	zero,zero,841
    d214:	0000d264 	muli	zero,zero,841
    d218:	0000d430 	cmpltui	zero,zero,848
    d21c:	0000d430 	cmpltui	zero,zero,848
    d220:	0000d418 	cmpnei	zero,zero,848
    d224:	0000d264 	muli	zero,zero,841
    d228:	0000d430 	cmpltui	zero,zero,848
    d22c:	0000d418 	cmpnei	zero,zero,848
    d230:	0000d430 	cmpltui	zero,zero,848
    d234:	0000d264 	muli	zero,zero,841
    d238:	0000d440 	call	d44 <enter_4byte_addressing_mode+0x10>
    d23c:	0000d440 	call	d44 <enter_4byte_addressing_mode+0x10>
    d240:	0000d440 	call	d44 <enter_4byte_addressing_mode+0x10>
    d244:	0000d65c 	xori	zero,zero,857
    d248:	2404b03a 	or	r2,r4,r16
    d24c:	10006f1e 	bne	r2,zero,d40c <__muldf3+0x2f8>
    d250:	04c00204 	movi	r19,8
    d254:	0021883a 	mov	r16,zero
    d258:	0029883a 	mov	r20,zero
    d25c:	07000084 	movi	fp,2
    d260:	003fcb06 	br	d190 <__reset+0xfbf0d190>
    d264:	502d883a 	mov	r22,r10
    d268:	00800084 	movi	r2,2
    d26c:	28805726 	beq	r5,r2,d3cc <__muldf3+0x2b8>
    d270:	008000c4 	movi	r2,3
    d274:	28816626 	beq	r5,r2,d810 <__muldf3+0x6fc>
    d278:	00800044 	movi	r2,1
    d27c:	2881411e 	bne	r5,r2,d784 <__muldf3+0x670>
    d280:	b02b883a 	mov	r21,r22
    d284:	0005883a 	mov	r2,zero
    d288:	000b883a 	mov	r5,zero
    d28c:	0029883a 	mov	r20,zero
    d290:	1004953a 	slli	r2,r2,20
    d294:	a8c03fcc 	andi	r3,r21,255
    d298:	04400434 	movhi	r17,16
    d29c:	8c7fffc4 	addi	r17,r17,-1
    d2a0:	180697fa 	slli	r3,r3,31
    d2a4:	2c4a703a 	and	r5,r5,r17
    d2a8:	288ab03a 	or	r5,r5,r2
    d2ac:	28c6b03a 	or	r3,r5,r3
    d2b0:	a005883a 	mov	r2,r20
    d2b4:	dfc00c17 	ldw	ra,48(sp)
    d2b8:	df000b17 	ldw	fp,44(sp)
    d2bc:	ddc00a17 	ldw	r23,40(sp)
    d2c0:	dd800917 	ldw	r22,36(sp)
    d2c4:	dd400817 	ldw	r21,32(sp)
    d2c8:	dd000717 	ldw	r20,28(sp)
    d2cc:	dcc00617 	ldw	r19,24(sp)
    d2d0:	dc800517 	ldw	r18,20(sp)
    d2d4:	dc400417 	ldw	r17,16(sp)
    d2d8:	dc000317 	ldw	r16,12(sp)
    d2dc:	dec00d04 	addi	sp,sp,52
    d2e0:	f800283a 	ret
    d2e4:	2404b03a 	or	r2,r4,r16
    d2e8:	2027883a 	mov	r19,r4
    d2ec:	10004226 	beq	r2,zero,d3f8 <__muldf3+0x2e4>
    d2f0:	8000fc26 	beq	r16,zero,d6e4 <__muldf3+0x5d0>
    d2f4:	8009883a 	mov	r4,r16
    d2f8:	d9800215 	stw	r6,8(sp)
    d2fc:	d9c00015 	stw	r7,0(sp)
    d300:	da400115 	stw	r9,4(sp)
    d304:	000e32c0 	call	e32c <__clzsi2>
    d308:	d9800217 	ldw	r6,8(sp)
    d30c:	d9c00017 	ldw	r7,0(sp)
    d310:	da400117 	ldw	r9,4(sp)
    d314:	113ffd44 	addi	r4,r2,-11
    d318:	00c00704 	movi	r3,28
    d31c:	1900ed16 	blt	r3,r4,d6d4 <__muldf3+0x5c0>
    d320:	00c00744 	movi	r3,29
    d324:	147ffe04 	addi	r17,r2,-8
    d328:	1907c83a 	sub	r3,r3,r4
    d32c:	8460983a 	sll	r16,r16,r17
    d330:	98c6d83a 	srl	r3,r19,r3
    d334:	9c68983a 	sll	r20,r19,r17
    d338:	1c20b03a 	or	r16,r3,r16
    d33c:	1080fcc4 	addi	r2,r2,1011
    d340:	00a5c83a 	sub	r18,zero,r2
    d344:	0027883a 	mov	r19,zero
    d348:	0039883a 	mov	fp,zero
    d34c:	003f9006 	br	d190 <__reset+0xfbf0d190>
    d350:	3446b03a 	or	r3,r6,r17
    d354:	1800261e 	bne	r3,zero,d3f0 <__muldf3+0x2dc>
    d358:	0023883a 	mov	r17,zero
    d35c:	0011883a 	mov	r8,zero
    d360:	01400084 	movi	r5,2
    d364:	003f9c06 	br	d1d8 <__reset+0xfbf0d1d8>
    d368:	3446b03a 	or	r3,r6,r17
    d36c:	18001c26 	beq	r3,zero,d3e0 <__muldf3+0x2cc>
    d370:	8800ce26 	beq	r17,zero,d6ac <__muldf3+0x598>
    d374:	8809883a 	mov	r4,r17
    d378:	d9800215 	stw	r6,8(sp)
    d37c:	da400115 	stw	r9,4(sp)
    d380:	da800015 	stw	r10,0(sp)
    d384:	000e32c0 	call	e32c <__clzsi2>
    d388:	d9800217 	ldw	r6,8(sp)
    d38c:	da400117 	ldw	r9,4(sp)
    d390:	da800017 	ldw	r10,0(sp)
    d394:	113ffd44 	addi	r4,r2,-11
    d398:	00c00704 	movi	r3,28
    d39c:	1900bf16 	blt	r3,r4,d69c <__muldf3+0x588>
    d3a0:	00c00744 	movi	r3,29
    d3a4:	123ffe04 	addi	r8,r2,-8
    d3a8:	1907c83a 	sub	r3,r3,r4
    d3ac:	8a22983a 	sll	r17,r17,r8
    d3b0:	30c6d83a 	srl	r3,r6,r3
    d3b4:	3210983a 	sll	r8,r6,r8
    d3b8:	1c62b03a 	or	r17,r3,r17
    d3bc:	1080fcc4 	addi	r2,r2,1011
    d3c0:	0085c83a 	sub	r2,zero,r2
    d3c4:	000b883a 	mov	r5,zero
    d3c8:	003f8306 	br	d1d8 <__reset+0xfbf0d1d8>
    d3cc:	b02b883a 	mov	r21,r22
    d3d0:	0081ffc4 	movi	r2,2047
    d3d4:	000b883a 	mov	r5,zero
    d3d8:	0029883a 	mov	r20,zero
    d3dc:	003fac06 	br	d290 <__reset+0xfbf0d290>
    d3e0:	0023883a 	mov	r17,zero
    d3e4:	0011883a 	mov	r8,zero
    d3e8:	01400044 	movi	r5,1
    d3ec:	003f7a06 	br	d1d8 <__reset+0xfbf0d1d8>
    d3f0:	014000c4 	movi	r5,3
    d3f4:	003f7806 	br	d1d8 <__reset+0xfbf0d1d8>
    d3f8:	04c00104 	movi	r19,4
    d3fc:	0021883a 	mov	r16,zero
    d400:	0029883a 	mov	r20,zero
    d404:	07000044 	movi	fp,1
    d408:	003f6106 	br	d190 <__reset+0xfbf0d190>
    d40c:	04c00304 	movi	r19,12
    d410:	070000c4 	movi	fp,3
    d414:	003f5e06 	br	d190 <__reset+0xfbf0d190>
    d418:	01400434 	movhi	r5,16
    d41c:	002b883a 	mov	r21,zero
    d420:	297fffc4 	addi	r5,r5,-1
    d424:	053fffc4 	movi	r20,-1
    d428:	0081ffc4 	movi	r2,2047
    d42c:	003f9806 	br	d290 <__reset+0xfbf0d290>
    d430:	8023883a 	mov	r17,r16
    d434:	a011883a 	mov	r8,r20
    d438:	e00b883a 	mov	r5,fp
    d43c:	003f8a06 	br	d268 <__reset+0xfbf0d268>
    d440:	8023883a 	mov	r17,r16
    d444:	a011883a 	mov	r8,r20
    d448:	482d883a 	mov	r22,r9
    d44c:	e00b883a 	mov	r5,fp
    d450:	003f8506 	br	d268 <__reset+0xfbf0d268>
    d454:	a00ad43a 	srli	r5,r20,16
    d458:	401ad43a 	srli	r13,r8,16
    d45c:	a53fffcc 	andi	r20,r20,65535
    d460:	423fffcc 	andi	r8,r8,65535
    d464:	4519383a 	mul	r12,r8,r20
    d468:	4147383a 	mul	r3,r8,r5
    d46c:	6d09383a 	mul	r4,r13,r20
    d470:	600cd43a 	srli	r6,r12,16
    d474:	2b5d383a 	mul	r14,r5,r13
    d478:	20c9883a 	add	r4,r4,r3
    d47c:	310d883a 	add	r6,r6,r4
    d480:	30c0022e 	bgeu	r6,r3,d48c <__muldf3+0x378>
    d484:	00c00074 	movhi	r3,1
    d488:	70dd883a 	add	r14,r14,r3
    d48c:	8826d43a 	srli	r19,r17,16
    d490:	8bffffcc 	andi	r15,r17,65535
    d494:	7d23383a 	mul	r17,r15,r20
    d498:	7949383a 	mul	r4,r15,r5
    d49c:	9d29383a 	mul	r20,r19,r20
    d4a0:	8814d43a 	srli	r10,r17,16
    d4a4:	3012943a 	slli	r9,r6,16
    d4a8:	a129883a 	add	r20,r20,r4
    d4ac:	633fffcc 	andi	r12,r12,65535
    d4b0:	5515883a 	add	r10,r10,r20
    d4b4:	3006d43a 	srli	r3,r6,16
    d4b8:	4b13883a 	add	r9,r9,r12
    d4bc:	2ccb383a 	mul	r5,r5,r19
    d4c0:	5100022e 	bgeu	r10,r4,d4cc <__muldf3+0x3b8>
    d4c4:	01000074 	movhi	r4,1
    d4c8:	290b883a 	add	r5,r5,r4
    d4cc:	802ad43a 	srli	r21,r16,16
    d4d0:	843fffcc 	andi	r16,r16,65535
    d4d4:	440d383a 	mul	r6,r8,r16
    d4d8:	4565383a 	mul	r18,r8,r21
    d4dc:	8349383a 	mul	r4,r16,r13
    d4e0:	500e943a 	slli	r7,r10,16
    d4e4:	3010d43a 	srli	r8,r6,16
    d4e8:	5028d43a 	srli	r20,r10,16
    d4ec:	2489883a 	add	r4,r4,r18
    d4f0:	8abfffcc 	andi	r10,r17,65535
    d4f4:	3a95883a 	add	r10,r7,r10
    d4f8:	4119883a 	add	r12,r8,r4
    d4fc:	a169883a 	add	r20,r20,r5
    d500:	1a87883a 	add	r3,r3,r10
    d504:	6d5b383a 	mul	r13,r13,r21
    d508:	6480022e 	bgeu	r12,r18,d514 <__muldf3+0x400>
    d50c:	01000074 	movhi	r4,1
    d510:	691b883a 	add	r13,r13,r4
    d514:	7c25383a 	mul	r18,r15,r16
    d518:	7d4b383a 	mul	r5,r15,r21
    d51c:	84cf383a 	mul	r7,r16,r19
    d520:	901ed43a 	srli	r15,r18,16
    d524:	6008d43a 	srli	r4,r12,16
    d528:	6010943a 	slli	r8,r12,16
    d52c:	394f883a 	add	r7,r7,r5
    d530:	333fffcc 	andi	r12,r6,65535
    d534:	79df883a 	add	r15,r15,r7
    d538:	235b883a 	add	r13,r4,r13
    d53c:	9d63383a 	mul	r17,r19,r21
    d540:	4309883a 	add	r4,r8,r12
    d544:	7940022e 	bgeu	r15,r5,d550 <__muldf3+0x43c>
    d548:	01400074 	movhi	r5,1
    d54c:	8963883a 	add	r17,r17,r5
    d550:	780a943a 	slli	r5,r15,16
    d554:	91bfffcc 	andi	r6,r18,65535
    d558:	70c7883a 	add	r3,r14,r3
    d55c:	298d883a 	add	r6,r5,r6
    d560:	1a8f803a 	cmpltu	r7,r3,r10
    d564:	350b883a 	add	r5,r6,r20
    d568:	20c7883a 	add	r3,r4,r3
    d56c:	3955883a 	add	r10,r7,r5
    d570:	1909803a 	cmpltu	r4,r3,r4
    d574:	6a91883a 	add	r8,r13,r10
    d578:	780cd43a 	srli	r6,r15,16
    d57c:	2219883a 	add	r12,r4,r8
    d580:	2d0b803a 	cmpltu	r5,r5,r20
    d584:	51cf803a 	cmpltu	r7,r10,r7
    d588:	29ceb03a 	or	r7,r5,r7
    d58c:	4351803a 	cmpltu	r8,r8,r13
    d590:	610b803a 	cmpltu	r5,r12,r4
    d594:	4148b03a 	or	r4,r8,r5
    d598:	398f883a 	add	r7,r7,r6
    d59c:	3909883a 	add	r4,r7,r4
    d5a0:	1810927a 	slli	r8,r3,9
    d5a4:	2449883a 	add	r4,r4,r17
    d5a8:	2008927a 	slli	r4,r4,9
    d5ac:	6022d5fa 	srli	r17,r12,23
    d5b0:	1806d5fa 	srli	r3,r3,23
    d5b4:	4252b03a 	or	r9,r8,r9
    d5b8:	600a927a 	slli	r5,r12,9
    d5bc:	4810c03a 	cmpne	r8,r9,zero
    d5c0:	2462b03a 	or	r17,r4,r17
    d5c4:	40c6b03a 	or	r3,r8,r3
    d5c8:	8900402c 	andhi	r4,r17,256
    d5cc:	1950b03a 	or	r8,r3,r5
    d5d0:	20000726 	beq	r4,zero,d5f0 <__muldf3+0x4dc>
    d5d4:	4006d07a 	srli	r3,r8,1
    d5d8:	880497fa 	slli	r2,r17,31
    d5dc:	4200004c 	andi	r8,r8,1
    d5e0:	8822d07a 	srli	r17,r17,1
    d5e4:	1a10b03a 	or	r8,r3,r8
    d5e8:	1210b03a 	or	r8,r2,r8
    d5ec:	5805883a 	mov	r2,r11
    d5f0:	1140ffc4 	addi	r5,r2,1023
    d5f4:	0140440e 	bge	zero,r5,d708 <__muldf3+0x5f4>
    d5f8:	40c001cc 	andi	r3,r8,7
    d5fc:	18000726 	beq	r3,zero,d61c <__muldf3+0x508>
    d600:	40c003cc 	andi	r3,r8,15
    d604:	01000104 	movi	r4,4
    d608:	19000426 	beq	r3,r4,d61c <__muldf3+0x508>
    d60c:	4107883a 	add	r3,r8,r4
    d610:	1a11803a 	cmpltu	r8,r3,r8
    d614:	8a23883a 	add	r17,r17,r8
    d618:	1811883a 	mov	r8,r3
    d61c:	88c0402c 	andhi	r3,r17,256
    d620:	18000426 	beq	r3,zero,d634 <__muldf3+0x520>
    d624:	11410004 	addi	r5,r2,1024
    d628:	00bfc034 	movhi	r2,65280
    d62c:	10bfffc4 	addi	r2,r2,-1
    d630:	88a2703a 	and	r17,r17,r2
    d634:	0081ff84 	movi	r2,2046
    d638:	117f6416 	blt	r2,r5,d3cc <__reset+0xfbf0d3cc>
    d63c:	8828977a 	slli	r20,r17,29
    d640:	4010d0fa 	srli	r8,r8,3
    d644:	8822927a 	slli	r17,r17,9
    d648:	2881ffcc 	andi	r2,r5,2047
    d64c:	a228b03a 	or	r20,r20,r8
    d650:	880ad33a 	srli	r5,r17,12
    d654:	b02b883a 	mov	r21,r22
    d658:	003f0d06 	br	d290 <__reset+0xfbf0d290>
    d65c:	8080022c 	andhi	r2,r16,8
    d660:	10000926 	beq	r2,zero,d688 <__muldf3+0x574>
    d664:	8880022c 	andhi	r2,r17,8
    d668:	1000071e 	bne	r2,zero,d688 <__muldf3+0x574>
    d66c:	00800434 	movhi	r2,16
    d670:	89400234 	orhi	r5,r17,8
    d674:	10bfffc4 	addi	r2,r2,-1
    d678:	b82b883a 	mov	r21,r23
    d67c:	288a703a 	and	r5,r5,r2
    d680:	4029883a 	mov	r20,r8
    d684:	003f6806 	br	d428 <__reset+0xfbf0d428>
    d688:	00800434 	movhi	r2,16
    d68c:	81400234 	orhi	r5,r16,8
    d690:	10bfffc4 	addi	r2,r2,-1
    d694:	288a703a 	and	r5,r5,r2
    d698:	003f6306 	br	d428 <__reset+0xfbf0d428>
    d69c:	147ff604 	addi	r17,r2,-40
    d6a0:	3462983a 	sll	r17,r6,r17
    d6a4:	0011883a 	mov	r8,zero
    d6a8:	003f4406 	br	d3bc <__reset+0xfbf0d3bc>
    d6ac:	3009883a 	mov	r4,r6
    d6b0:	d9800215 	stw	r6,8(sp)
    d6b4:	da400115 	stw	r9,4(sp)
    d6b8:	da800015 	stw	r10,0(sp)
    d6bc:	000e32c0 	call	e32c <__clzsi2>
    d6c0:	10800804 	addi	r2,r2,32
    d6c4:	da800017 	ldw	r10,0(sp)
    d6c8:	da400117 	ldw	r9,4(sp)
    d6cc:	d9800217 	ldw	r6,8(sp)
    d6d0:	003f3006 	br	d394 <__reset+0xfbf0d394>
    d6d4:	143ff604 	addi	r16,r2,-40
    d6d8:	9c20983a 	sll	r16,r19,r16
    d6dc:	0029883a 	mov	r20,zero
    d6e0:	003f1606 	br	d33c <__reset+0xfbf0d33c>
    d6e4:	d9800215 	stw	r6,8(sp)
    d6e8:	d9c00015 	stw	r7,0(sp)
    d6ec:	da400115 	stw	r9,4(sp)
    d6f0:	000e32c0 	call	e32c <__clzsi2>
    d6f4:	10800804 	addi	r2,r2,32
    d6f8:	da400117 	ldw	r9,4(sp)
    d6fc:	d9c00017 	ldw	r7,0(sp)
    d700:	d9800217 	ldw	r6,8(sp)
    d704:	003f0306 	br	d314 <__reset+0xfbf0d314>
    d708:	00c00044 	movi	r3,1
    d70c:	1947c83a 	sub	r3,r3,r5
    d710:	00800e04 	movi	r2,56
    d714:	10feda16 	blt	r2,r3,d280 <__reset+0xfbf0d280>
    d718:	008007c4 	movi	r2,31
    d71c:	10c01b16 	blt	r2,r3,d78c <__muldf3+0x678>
    d720:	00800804 	movi	r2,32
    d724:	10c5c83a 	sub	r2,r2,r3
    d728:	888a983a 	sll	r5,r17,r2
    d72c:	40c8d83a 	srl	r4,r8,r3
    d730:	4084983a 	sll	r2,r8,r2
    d734:	88e2d83a 	srl	r17,r17,r3
    d738:	2906b03a 	or	r3,r5,r4
    d73c:	1004c03a 	cmpne	r2,r2,zero
    d740:	1886b03a 	or	r3,r3,r2
    d744:	188001cc 	andi	r2,r3,7
    d748:	10000726 	beq	r2,zero,d768 <__muldf3+0x654>
    d74c:	188003cc 	andi	r2,r3,15
    d750:	01000104 	movi	r4,4
    d754:	11000426 	beq	r2,r4,d768 <__muldf3+0x654>
    d758:	1805883a 	mov	r2,r3
    d75c:	10c00104 	addi	r3,r2,4
    d760:	1885803a 	cmpltu	r2,r3,r2
    d764:	88a3883a 	add	r17,r17,r2
    d768:	8880202c 	andhi	r2,r17,128
    d76c:	10001c26 	beq	r2,zero,d7e0 <__muldf3+0x6cc>
    d770:	b02b883a 	mov	r21,r22
    d774:	00800044 	movi	r2,1
    d778:	000b883a 	mov	r5,zero
    d77c:	0029883a 	mov	r20,zero
    d780:	003ec306 	br	d290 <__reset+0xfbf0d290>
    d784:	5805883a 	mov	r2,r11
    d788:	003f9906 	br	d5f0 <__reset+0xfbf0d5f0>
    d78c:	00bff844 	movi	r2,-31
    d790:	1145c83a 	sub	r2,r2,r5
    d794:	8888d83a 	srl	r4,r17,r2
    d798:	00800804 	movi	r2,32
    d79c:	18801a26 	beq	r3,r2,d808 <__muldf3+0x6f4>
    d7a0:	00801004 	movi	r2,64
    d7a4:	10c5c83a 	sub	r2,r2,r3
    d7a8:	8884983a 	sll	r2,r17,r2
    d7ac:	1204b03a 	or	r2,r2,r8
    d7b0:	1004c03a 	cmpne	r2,r2,zero
    d7b4:	2084b03a 	or	r2,r4,r2
    d7b8:	144001cc 	andi	r17,r2,7
    d7bc:	88000d1e 	bne	r17,zero,d7f4 <__muldf3+0x6e0>
    d7c0:	000b883a 	mov	r5,zero
    d7c4:	1028d0fa 	srli	r20,r2,3
    d7c8:	b02b883a 	mov	r21,r22
    d7cc:	0005883a 	mov	r2,zero
    d7d0:	a468b03a 	or	r20,r20,r17
    d7d4:	003eae06 	br	d290 <__reset+0xfbf0d290>
    d7d8:	1007883a 	mov	r3,r2
    d7dc:	0023883a 	mov	r17,zero
    d7e0:	880a927a 	slli	r5,r17,9
    d7e4:	1805883a 	mov	r2,r3
    d7e8:	8822977a 	slli	r17,r17,29
    d7ec:	280ad33a 	srli	r5,r5,12
    d7f0:	003ff406 	br	d7c4 <__reset+0xfbf0d7c4>
    d7f4:	10c003cc 	andi	r3,r2,15
    d7f8:	01000104 	movi	r4,4
    d7fc:	193ff626 	beq	r3,r4,d7d8 <__reset+0xfbf0d7d8>
    d800:	0023883a 	mov	r17,zero
    d804:	003fd506 	br	d75c <__reset+0xfbf0d75c>
    d808:	0005883a 	mov	r2,zero
    d80c:	003fe706 	br	d7ac <__reset+0xfbf0d7ac>
    d810:	00800434 	movhi	r2,16
    d814:	89400234 	orhi	r5,r17,8
    d818:	10bfffc4 	addi	r2,r2,-1
    d81c:	b02b883a 	mov	r21,r22
    d820:	288a703a 	and	r5,r5,r2
    d824:	4029883a 	mov	r20,r8
    d828:	003eff06 	br	d428 <__reset+0xfbf0d428>

0000d82c <__subdf3>:
    d82c:	02000434 	movhi	r8,16
    d830:	423fffc4 	addi	r8,r8,-1
    d834:	defffb04 	addi	sp,sp,-20
    d838:	2a14703a 	and	r10,r5,r8
    d83c:	3812d53a 	srli	r9,r7,20
    d840:	3a10703a 	and	r8,r7,r8
    d844:	2006d77a 	srli	r3,r4,29
    d848:	3004d77a 	srli	r2,r6,29
    d84c:	dc000015 	stw	r16,0(sp)
    d850:	501490fa 	slli	r10,r10,3
    d854:	2820d53a 	srli	r16,r5,20
    d858:	401090fa 	slli	r8,r8,3
    d85c:	dc800215 	stw	r18,8(sp)
    d860:	dc400115 	stw	r17,4(sp)
    d864:	dfc00415 	stw	ra,16(sp)
    d868:	202290fa 	slli	r17,r4,3
    d86c:	dcc00315 	stw	r19,12(sp)
    d870:	4a41ffcc 	andi	r9,r9,2047
    d874:	0101ffc4 	movi	r4,2047
    d878:	2824d7fa 	srli	r18,r5,31
    d87c:	8401ffcc 	andi	r16,r16,2047
    d880:	50c6b03a 	or	r3,r10,r3
    d884:	380ed7fa 	srli	r7,r7,31
    d888:	408ab03a 	or	r5,r8,r2
    d88c:	300c90fa 	slli	r6,r6,3
    d890:	49009626 	beq	r9,r4,daec <__subdf3+0x2c0>
    d894:	39c0005c 	xori	r7,r7,1
    d898:	8245c83a 	sub	r2,r16,r9
    d89c:	3c807426 	beq	r7,r18,da70 <__subdf3+0x244>
    d8a0:	0080af0e 	bge	zero,r2,db60 <__subdf3+0x334>
    d8a4:	48002a1e 	bne	r9,zero,d950 <__subdf3+0x124>
    d8a8:	2988b03a 	or	r4,r5,r6
    d8ac:	20009a1e 	bne	r4,zero,db18 <__subdf3+0x2ec>
    d8b0:	888001cc 	andi	r2,r17,7
    d8b4:	10000726 	beq	r2,zero,d8d4 <__subdf3+0xa8>
    d8b8:	888003cc 	andi	r2,r17,15
    d8bc:	01000104 	movi	r4,4
    d8c0:	11000426 	beq	r2,r4,d8d4 <__subdf3+0xa8>
    d8c4:	890b883a 	add	r5,r17,r4
    d8c8:	2c63803a 	cmpltu	r17,r5,r17
    d8cc:	1c47883a 	add	r3,r3,r17
    d8d0:	2823883a 	mov	r17,r5
    d8d4:	1880202c 	andhi	r2,r3,128
    d8d8:	10005926 	beq	r2,zero,da40 <__subdf3+0x214>
    d8dc:	84000044 	addi	r16,r16,1
    d8e0:	0081ffc4 	movi	r2,2047
    d8e4:	8080be26 	beq	r16,r2,dbe0 <__subdf3+0x3b4>
    d8e8:	017fe034 	movhi	r5,65408
    d8ec:	297fffc4 	addi	r5,r5,-1
    d8f0:	1946703a 	and	r3,r3,r5
    d8f4:	1804977a 	slli	r2,r3,29
    d8f8:	1806927a 	slli	r3,r3,9
    d8fc:	8822d0fa 	srli	r17,r17,3
    d900:	8401ffcc 	andi	r16,r16,2047
    d904:	180ad33a 	srli	r5,r3,12
    d908:	9100004c 	andi	r4,r18,1
    d90c:	1444b03a 	or	r2,r2,r17
    d910:	80c1ffcc 	andi	r3,r16,2047
    d914:	1820953a 	slli	r16,r3,20
    d918:	20c03fcc 	andi	r3,r4,255
    d91c:	180897fa 	slli	r4,r3,31
    d920:	00c00434 	movhi	r3,16
    d924:	18ffffc4 	addi	r3,r3,-1
    d928:	28c6703a 	and	r3,r5,r3
    d92c:	1c06b03a 	or	r3,r3,r16
    d930:	1906b03a 	or	r3,r3,r4
    d934:	dfc00417 	ldw	ra,16(sp)
    d938:	dcc00317 	ldw	r19,12(sp)
    d93c:	dc800217 	ldw	r18,8(sp)
    d940:	dc400117 	ldw	r17,4(sp)
    d944:	dc000017 	ldw	r16,0(sp)
    d948:	dec00504 	addi	sp,sp,20
    d94c:	f800283a 	ret
    d950:	0101ffc4 	movi	r4,2047
    d954:	813fd626 	beq	r16,r4,d8b0 <__reset+0xfbf0d8b0>
    d958:	29402034 	orhi	r5,r5,128
    d95c:	01000e04 	movi	r4,56
    d960:	2080a316 	blt	r4,r2,dbf0 <__subdf3+0x3c4>
    d964:	010007c4 	movi	r4,31
    d968:	2080c616 	blt	r4,r2,dc84 <__subdf3+0x458>
    d96c:	01000804 	movi	r4,32
    d970:	2089c83a 	sub	r4,r4,r2
    d974:	2910983a 	sll	r8,r5,r4
    d978:	308ed83a 	srl	r7,r6,r2
    d97c:	3108983a 	sll	r4,r6,r4
    d980:	2884d83a 	srl	r2,r5,r2
    d984:	41ccb03a 	or	r6,r8,r7
    d988:	2008c03a 	cmpne	r4,r4,zero
    d98c:	310cb03a 	or	r6,r6,r4
    d990:	898dc83a 	sub	r6,r17,r6
    d994:	89a3803a 	cmpltu	r17,r17,r6
    d998:	1887c83a 	sub	r3,r3,r2
    d99c:	1c47c83a 	sub	r3,r3,r17
    d9a0:	3023883a 	mov	r17,r6
    d9a4:	1880202c 	andhi	r2,r3,128
    d9a8:	10002326 	beq	r2,zero,da38 <__subdf3+0x20c>
    d9ac:	04c02034 	movhi	r19,128
    d9b0:	9cffffc4 	addi	r19,r19,-1
    d9b4:	1ce6703a 	and	r19,r3,r19
    d9b8:	98007a26 	beq	r19,zero,dba4 <__subdf3+0x378>
    d9bc:	9809883a 	mov	r4,r19
    d9c0:	000e32c0 	call	e32c <__clzsi2>
    d9c4:	113ffe04 	addi	r4,r2,-8
    d9c8:	00c007c4 	movi	r3,31
    d9cc:	19007b16 	blt	r3,r4,dbbc <__subdf3+0x390>
    d9d0:	00800804 	movi	r2,32
    d9d4:	1105c83a 	sub	r2,r2,r4
    d9d8:	8884d83a 	srl	r2,r17,r2
    d9dc:	9906983a 	sll	r3,r19,r4
    d9e0:	8922983a 	sll	r17,r17,r4
    d9e4:	10c4b03a 	or	r2,r2,r3
    d9e8:	24007816 	blt	r4,r16,dbcc <__subdf3+0x3a0>
    d9ec:	2421c83a 	sub	r16,r4,r16
    d9f0:	80c00044 	addi	r3,r16,1
    d9f4:	010007c4 	movi	r4,31
    d9f8:	20c09516 	blt	r4,r3,dc50 <__subdf3+0x424>
    d9fc:	01400804 	movi	r5,32
    da00:	28cbc83a 	sub	r5,r5,r3
    da04:	88c8d83a 	srl	r4,r17,r3
    da08:	8962983a 	sll	r17,r17,r5
    da0c:	114a983a 	sll	r5,r2,r5
    da10:	10c6d83a 	srl	r3,r2,r3
    da14:	8804c03a 	cmpne	r2,r17,zero
    da18:	290ab03a 	or	r5,r5,r4
    da1c:	28a2b03a 	or	r17,r5,r2
    da20:	0021883a 	mov	r16,zero
    da24:	003fa206 	br	d8b0 <__reset+0xfbf0d8b0>
    da28:	2090b03a 	or	r8,r4,r2
    da2c:	40018e26 	beq	r8,zero,e068 <__subdf3+0x83c>
    da30:	1007883a 	mov	r3,r2
    da34:	2023883a 	mov	r17,r4
    da38:	888001cc 	andi	r2,r17,7
    da3c:	103f9e1e 	bne	r2,zero,d8b8 <__reset+0xfbf0d8b8>
    da40:	1804977a 	slli	r2,r3,29
    da44:	8822d0fa 	srli	r17,r17,3
    da48:	1810d0fa 	srli	r8,r3,3
    da4c:	9100004c 	andi	r4,r18,1
    da50:	1444b03a 	or	r2,r2,r17
    da54:	00c1ffc4 	movi	r3,2047
    da58:	80c02826 	beq	r16,r3,dafc <__subdf3+0x2d0>
    da5c:	01400434 	movhi	r5,16
    da60:	297fffc4 	addi	r5,r5,-1
    da64:	80e0703a 	and	r16,r16,r3
    da68:	414a703a 	and	r5,r8,r5
    da6c:	003fa806 	br	d910 <__reset+0xfbf0d910>
    da70:	0080630e 	bge	zero,r2,dc00 <__subdf3+0x3d4>
    da74:	48003026 	beq	r9,zero,db38 <__subdf3+0x30c>
    da78:	0101ffc4 	movi	r4,2047
    da7c:	813f8c26 	beq	r16,r4,d8b0 <__reset+0xfbf0d8b0>
    da80:	29402034 	orhi	r5,r5,128
    da84:	01000e04 	movi	r4,56
    da88:	2080a90e 	bge	r4,r2,dd30 <__subdf3+0x504>
    da8c:	298cb03a 	or	r6,r5,r6
    da90:	3012c03a 	cmpne	r9,r6,zero
    da94:	0005883a 	mov	r2,zero
    da98:	4c53883a 	add	r9,r9,r17
    da9c:	4c63803a 	cmpltu	r17,r9,r17
    daa0:	10c7883a 	add	r3,r2,r3
    daa4:	88c7883a 	add	r3,r17,r3
    daa8:	4823883a 	mov	r17,r9
    daac:	1880202c 	andhi	r2,r3,128
    dab0:	1000d026 	beq	r2,zero,ddf4 <__subdf3+0x5c8>
    dab4:	84000044 	addi	r16,r16,1
    dab8:	0081ffc4 	movi	r2,2047
    dabc:	8080fe26 	beq	r16,r2,deb8 <__subdf3+0x68c>
    dac0:	00bfe034 	movhi	r2,65408
    dac4:	10bfffc4 	addi	r2,r2,-1
    dac8:	1886703a 	and	r3,r3,r2
    dacc:	880ad07a 	srli	r5,r17,1
    dad0:	180497fa 	slli	r2,r3,31
    dad4:	8900004c 	andi	r4,r17,1
    dad8:	2922b03a 	or	r17,r5,r4
    dadc:	1806d07a 	srli	r3,r3,1
    dae0:	1462b03a 	or	r17,r2,r17
    dae4:	3825883a 	mov	r18,r7
    dae8:	003f7106 	br	d8b0 <__reset+0xfbf0d8b0>
    daec:	2984b03a 	or	r2,r5,r6
    daf0:	103f6826 	beq	r2,zero,d894 <__reset+0xfbf0d894>
    daf4:	39c03fcc 	andi	r7,r7,255
    daf8:	003f6706 	br	d898 <__reset+0xfbf0d898>
    dafc:	4086b03a 	or	r3,r8,r2
    db00:	18015226 	beq	r3,zero,e04c <__subdf3+0x820>
    db04:	00c00434 	movhi	r3,16
    db08:	41400234 	orhi	r5,r8,8
    db0c:	18ffffc4 	addi	r3,r3,-1
    db10:	28ca703a 	and	r5,r5,r3
    db14:	003f7e06 	br	d910 <__reset+0xfbf0d910>
    db18:	10bfffc4 	addi	r2,r2,-1
    db1c:	1000491e 	bne	r2,zero,dc44 <__subdf3+0x418>
    db20:	898fc83a 	sub	r7,r17,r6
    db24:	89e3803a 	cmpltu	r17,r17,r7
    db28:	1947c83a 	sub	r3,r3,r5
    db2c:	1c47c83a 	sub	r3,r3,r17
    db30:	3823883a 	mov	r17,r7
    db34:	003f9b06 	br	d9a4 <__reset+0xfbf0d9a4>
    db38:	2988b03a 	or	r4,r5,r6
    db3c:	203f5c26 	beq	r4,zero,d8b0 <__reset+0xfbf0d8b0>
    db40:	10bfffc4 	addi	r2,r2,-1
    db44:	1000931e 	bne	r2,zero,dd94 <__subdf3+0x568>
    db48:	898d883a 	add	r6,r17,r6
    db4c:	3463803a 	cmpltu	r17,r6,r17
    db50:	1947883a 	add	r3,r3,r5
    db54:	88c7883a 	add	r3,r17,r3
    db58:	3023883a 	mov	r17,r6
    db5c:	003fd306 	br	daac <__reset+0xfbf0daac>
    db60:	1000541e 	bne	r2,zero,dcb4 <__subdf3+0x488>
    db64:	80800044 	addi	r2,r16,1
    db68:	1081ffcc 	andi	r2,r2,2047
    db6c:	01000044 	movi	r4,1
    db70:	2080a20e 	bge	r4,r2,ddfc <__subdf3+0x5d0>
    db74:	8989c83a 	sub	r4,r17,r6
    db78:	8905803a 	cmpltu	r2,r17,r4
    db7c:	1967c83a 	sub	r19,r3,r5
    db80:	98a7c83a 	sub	r19,r19,r2
    db84:	9880202c 	andhi	r2,r19,128
    db88:	10006326 	beq	r2,zero,dd18 <__subdf3+0x4ec>
    db8c:	3463c83a 	sub	r17,r6,r17
    db90:	28c7c83a 	sub	r3,r5,r3
    db94:	344d803a 	cmpltu	r6,r6,r17
    db98:	19a7c83a 	sub	r19,r3,r6
    db9c:	3825883a 	mov	r18,r7
    dba0:	983f861e 	bne	r19,zero,d9bc <__reset+0xfbf0d9bc>
    dba4:	8809883a 	mov	r4,r17
    dba8:	000e32c0 	call	e32c <__clzsi2>
    dbac:	10800804 	addi	r2,r2,32
    dbb0:	113ffe04 	addi	r4,r2,-8
    dbb4:	00c007c4 	movi	r3,31
    dbb8:	193f850e 	bge	r3,r4,d9d0 <__reset+0xfbf0d9d0>
    dbbc:	10bff604 	addi	r2,r2,-40
    dbc0:	8884983a 	sll	r2,r17,r2
    dbc4:	0023883a 	mov	r17,zero
    dbc8:	243f880e 	bge	r4,r16,d9ec <__reset+0xfbf0d9ec>
    dbcc:	00ffe034 	movhi	r3,65408
    dbd0:	18ffffc4 	addi	r3,r3,-1
    dbd4:	8121c83a 	sub	r16,r16,r4
    dbd8:	10c6703a 	and	r3,r2,r3
    dbdc:	003f3406 	br	d8b0 <__reset+0xfbf0d8b0>
    dbe0:	9100004c 	andi	r4,r18,1
    dbe4:	000b883a 	mov	r5,zero
    dbe8:	0005883a 	mov	r2,zero
    dbec:	003f4806 	br	d910 <__reset+0xfbf0d910>
    dbf0:	298cb03a 	or	r6,r5,r6
    dbf4:	300cc03a 	cmpne	r6,r6,zero
    dbf8:	0005883a 	mov	r2,zero
    dbfc:	003f6406 	br	d990 <__reset+0xfbf0d990>
    dc00:	10009a1e 	bne	r2,zero,de6c <__subdf3+0x640>
    dc04:	82400044 	addi	r9,r16,1
    dc08:	4881ffcc 	andi	r2,r9,2047
    dc0c:	02800044 	movi	r10,1
    dc10:	5080670e 	bge	r10,r2,ddb0 <__subdf3+0x584>
    dc14:	0081ffc4 	movi	r2,2047
    dc18:	4880af26 	beq	r9,r2,ded8 <__subdf3+0x6ac>
    dc1c:	898d883a 	add	r6,r17,r6
    dc20:	1945883a 	add	r2,r3,r5
    dc24:	3447803a 	cmpltu	r3,r6,r17
    dc28:	1887883a 	add	r3,r3,r2
    dc2c:	182297fa 	slli	r17,r3,31
    dc30:	300cd07a 	srli	r6,r6,1
    dc34:	1806d07a 	srli	r3,r3,1
    dc38:	4821883a 	mov	r16,r9
    dc3c:	89a2b03a 	or	r17,r17,r6
    dc40:	003f1b06 	br	d8b0 <__reset+0xfbf0d8b0>
    dc44:	0101ffc4 	movi	r4,2047
    dc48:	813f441e 	bne	r16,r4,d95c <__reset+0xfbf0d95c>
    dc4c:	003f1806 	br	d8b0 <__reset+0xfbf0d8b0>
    dc50:	843ff844 	addi	r16,r16,-31
    dc54:	01400804 	movi	r5,32
    dc58:	1408d83a 	srl	r4,r2,r16
    dc5c:	19405026 	beq	r3,r5,dda0 <__subdf3+0x574>
    dc60:	01401004 	movi	r5,64
    dc64:	28c7c83a 	sub	r3,r5,r3
    dc68:	10c4983a 	sll	r2,r2,r3
    dc6c:	88a2b03a 	or	r17,r17,r2
    dc70:	8822c03a 	cmpne	r17,r17,zero
    dc74:	2462b03a 	or	r17,r4,r17
    dc78:	0007883a 	mov	r3,zero
    dc7c:	0021883a 	mov	r16,zero
    dc80:	003f6d06 	br	da38 <__reset+0xfbf0da38>
    dc84:	11fff804 	addi	r7,r2,-32
    dc88:	01000804 	movi	r4,32
    dc8c:	29ced83a 	srl	r7,r5,r7
    dc90:	11004526 	beq	r2,r4,dda8 <__subdf3+0x57c>
    dc94:	01001004 	movi	r4,64
    dc98:	2089c83a 	sub	r4,r4,r2
    dc9c:	2904983a 	sll	r2,r5,r4
    dca0:	118cb03a 	or	r6,r2,r6
    dca4:	300cc03a 	cmpne	r6,r6,zero
    dca8:	398cb03a 	or	r6,r7,r6
    dcac:	0005883a 	mov	r2,zero
    dcb0:	003f3706 	br	d990 <__reset+0xfbf0d990>
    dcb4:	80002a26 	beq	r16,zero,dd60 <__subdf3+0x534>
    dcb8:	0101ffc4 	movi	r4,2047
    dcbc:	49006626 	beq	r9,r4,de58 <__subdf3+0x62c>
    dcc0:	0085c83a 	sub	r2,zero,r2
    dcc4:	18c02034 	orhi	r3,r3,128
    dcc8:	01000e04 	movi	r4,56
    dccc:	20807e16 	blt	r4,r2,dec8 <__subdf3+0x69c>
    dcd0:	010007c4 	movi	r4,31
    dcd4:	2080e716 	blt	r4,r2,e074 <__subdf3+0x848>
    dcd8:	01000804 	movi	r4,32
    dcdc:	2089c83a 	sub	r4,r4,r2
    dce0:	1914983a 	sll	r10,r3,r4
    dce4:	8890d83a 	srl	r8,r17,r2
    dce8:	8908983a 	sll	r4,r17,r4
    dcec:	1884d83a 	srl	r2,r3,r2
    dcf0:	5222b03a 	or	r17,r10,r8
    dcf4:	2006c03a 	cmpne	r3,r4,zero
    dcf8:	88e2b03a 	or	r17,r17,r3
    dcfc:	3463c83a 	sub	r17,r6,r17
    dd00:	2885c83a 	sub	r2,r5,r2
    dd04:	344d803a 	cmpltu	r6,r6,r17
    dd08:	1187c83a 	sub	r3,r2,r6
    dd0c:	4821883a 	mov	r16,r9
    dd10:	3825883a 	mov	r18,r7
    dd14:	003f2306 	br	d9a4 <__reset+0xfbf0d9a4>
    dd18:	24d0b03a 	or	r8,r4,r19
    dd1c:	40001b1e 	bne	r8,zero,dd8c <__subdf3+0x560>
    dd20:	0005883a 	mov	r2,zero
    dd24:	0009883a 	mov	r4,zero
    dd28:	0021883a 	mov	r16,zero
    dd2c:	003f4906 	br	da54 <__reset+0xfbf0da54>
    dd30:	010007c4 	movi	r4,31
    dd34:	20803a16 	blt	r4,r2,de20 <__subdf3+0x5f4>
    dd38:	01000804 	movi	r4,32
    dd3c:	2089c83a 	sub	r4,r4,r2
    dd40:	2912983a 	sll	r9,r5,r4
    dd44:	3090d83a 	srl	r8,r6,r2
    dd48:	3108983a 	sll	r4,r6,r4
    dd4c:	2884d83a 	srl	r2,r5,r2
    dd50:	4a12b03a 	or	r9,r9,r8
    dd54:	2008c03a 	cmpne	r4,r4,zero
    dd58:	4912b03a 	or	r9,r9,r4
    dd5c:	003f4e06 	br	da98 <__reset+0xfbf0da98>
    dd60:	1c48b03a 	or	r4,r3,r17
    dd64:	20003c26 	beq	r4,zero,de58 <__subdf3+0x62c>
    dd68:	0084303a 	nor	r2,zero,r2
    dd6c:	1000381e 	bne	r2,zero,de50 <__subdf3+0x624>
    dd70:	3463c83a 	sub	r17,r6,r17
    dd74:	28c5c83a 	sub	r2,r5,r3
    dd78:	344d803a 	cmpltu	r6,r6,r17
    dd7c:	1187c83a 	sub	r3,r2,r6
    dd80:	4821883a 	mov	r16,r9
    dd84:	3825883a 	mov	r18,r7
    dd88:	003f0606 	br	d9a4 <__reset+0xfbf0d9a4>
    dd8c:	2023883a 	mov	r17,r4
    dd90:	003f0906 	br	d9b8 <__reset+0xfbf0d9b8>
    dd94:	0101ffc4 	movi	r4,2047
    dd98:	813f3a1e 	bne	r16,r4,da84 <__reset+0xfbf0da84>
    dd9c:	003ec406 	br	d8b0 <__reset+0xfbf0d8b0>
    dda0:	0005883a 	mov	r2,zero
    dda4:	003fb106 	br	dc6c <__reset+0xfbf0dc6c>
    dda8:	0005883a 	mov	r2,zero
    ddac:	003fbc06 	br	dca0 <__reset+0xfbf0dca0>
    ddb0:	1c44b03a 	or	r2,r3,r17
    ddb4:	80008e1e 	bne	r16,zero,dff0 <__subdf3+0x7c4>
    ddb8:	1000c826 	beq	r2,zero,e0dc <__subdf3+0x8b0>
    ddbc:	2984b03a 	or	r2,r5,r6
    ddc0:	103ebb26 	beq	r2,zero,d8b0 <__reset+0xfbf0d8b0>
    ddc4:	8989883a 	add	r4,r17,r6
    ddc8:	1945883a 	add	r2,r3,r5
    ddcc:	2447803a 	cmpltu	r3,r4,r17
    ddd0:	1887883a 	add	r3,r3,r2
    ddd4:	1880202c 	andhi	r2,r3,128
    ddd8:	2023883a 	mov	r17,r4
    dddc:	103f1626 	beq	r2,zero,da38 <__reset+0xfbf0da38>
    dde0:	00bfe034 	movhi	r2,65408
    dde4:	10bfffc4 	addi	r2,r2,-1
    dde8:	5021883a 	mov	r16,r10
    ddec:	1886703a 	and	r3,r3,r2
    ddf0:	003eaf06 	br	d8b0 <__reset+0xfbf0d8b0>
    ddf4:	3825883a 	mov	r18,r7
    ddf8:	003f0f06 	br	da38 <__reset+0xfbf0da38>
    ddfc:	1c44b03a 	or	r2,r3,r17
    de00:	8000251e 	bne	r16,zero,de98 <__subdf3+0x66c>
    de04:	1000661e 	bne	r2,zero,dfa0 <__subdf3+0x774>
    de08:	2990b03a 	or	r8,r5,r6
    de0c:	40009626 	beq	r8,zero,e068 <__subdf3+0x83c>
    de10:	2807883a 	mov	r3,r5
    de14:	3023883a 	mov	r17,r6
    de18:	3825883a 	mov	r18,r7
    de1c:	003ea406 	br	d8b0 <__reset+0xfbf0d8b0>
    de20:	127ff804 	addi	r9,r2,-32
    de24:	01000804 	movi	r4,32
    de28:	2a52d83a 	srl	r9,r5,r9
    de2c:	11008c26 	beq	r2,r4,e060 <__subdf3+0x834>
    de30:	01001004 	movi	r4,64
    de34:	2085c83a 	sub	r2,r4,r2
    de38:	2884983a 	sll	r2,r5,r2
    de3c:	118cb03a 	or	r6,r2,r6
    de40:	300cc03a 	cmpne	r6,r6,zero
    de44:	4992b03a 	or	r9,r9,r6
    de48:	0005883a 	mov	r2,zero
    de4c:	003f1206 	br	da98 <__reset+0xfbf0da98>
    de50:	0101ffc4 	movi	r4,2047
    de54:	493f9c1e 	bne	r9,r4,dcc8 <__reset+0xfbf0dcc8>
    de58:	2807883a 	mov	r3,r5
    de5c:	3023883a 	mov	r17,r6
    de60:	4821883a 	mov	r16,r9
    de64:	3825883a 	mov	r18,r7
    de68:	003e9106 	br	d8b0 <__reset+0xfbf0d8b0>
    de6c:	80001f1e 	bne	r16,zero,deec <__subdf3+0x6c0>
    de70:	1c48b03a 	or	r4,r3,r17
    de74:	20005a26 	beq	r4,zero,dfe0 <__subdf3+0x7b4>
    de78:	0084303a 	nor	r2,zero,r2
    de7c:	1000561e 	bne	r2,zero,dfd8 <__subdf3+0x7ac>
    de80:	89a3883a 	add	r17,r17,r6
    de84:	1945883a 	add	r2,r3,r5
    de88:	898d803a 	cmpltu	r6,r17,r6
    de8c:	3087883a 	add	r3,r6,r2
    de90:	4821883a 	mov	r16,r9
    de94:	003f0506 	br	daac <__reset+0xfbf0daac>
    de98:	10002b1e 	bne	r2,zero,df48 <__subdf3+0x71c>
    de9c:	2984b03a 	or	r2,r5,r6
    dea0:	10008026 	beq	r2,zero,e0a4 <__subdf3+0x878>
    dea4:	2807883a 	mov	r3,r5
    dea8:	3023883a 	mov	r17,r6
    deac:	3825883a 	mov	r18,r7
    deb0:	0401ffc4 	movi	r16,2047
    deb4:	003e7e06 	br	d8b0 <__reset+0xfbf0d8b0>
    deb8:	3809883a 	mov	r4,r7
    debc:	0011883a 	mov	r8,zero
    dec0:	0005883a 	mov	r2,zero
    dec4:	003ee306 	br	da54 <__reset+0xfbf0da54>
    dec8:	1c62b03a 	or	r17,r3,r17
    decc:	8822c03a 	cmpne	r17,r17,zero
    ded0:	0005883a 	mov	r2,zero
    ded4:	003f8906 	br	dcfc <__reset+0xfbf0dcfc>
    ded8:	3809883a 	mov	r4,r7
    dedc:	4821883a 	mov	r16,r9
    dee0:	0011883a 	mov	r8,zero
    dee4:	0005883a 	mov	r2,zero
    dee8:	003eda06 	br	da54 <__reset+0xfbf0da54>
    deec:	0101ffc4 	movi	r4,2047
    def0:	49003b26 	beq	r9,r4,dfe0 <__subdf3+0x7b4>
    def4:	0085c83a 	sub	r2,zero,r2
    def8:	18c02034 	orhi	r3,r3,128
    defc:	01000e04 	movi	r4,56
    df00:	20806e16 	blt	r4,r2,e0bc <__subdf3+0x890>
    df04:	010007c4 	movi	r4,31
    df08:	20807716 	blt	r4,r2,e0e8 <__subdf3+0x8bc>
    df0c:	01000804 	movi	r4,32
    df10:	2089c83a 	sub	r4,r4,r2
    df14:	1914983a 	sll	r10,r3,r4
    df18:	8890d83a 	srl	r8,r17,r2
    df1c:	8908983a 	sll	r4,r17,r4
    df20:	1884d83a 	srl	r2,r3,r2
    df24:	5222b03a 	or	r17,r10,r8
    df28:	2006c03a 	cmpne	r3,r4,zero
    df2c:	88e2b03a 	or	r17,r17,r3
    df30:	89a3883a 	add	r17,r17,r6
    df34:	1145883a 	add	r2,r2,r5
    df38:	898d803a 	cmpltu	r6,r17,r6
    df3c:	3087883a 	add	r3,r6,r2
    df40:	4821883a 	mov	r16,r9
    df44:	003ed906 	br	daac <__reset+0xfbf0daac>
    df48:	2984b03a 	or	r2,r5,r6
    df4c:	10004226 	beq	r2,zero,e058 <__subdf3+0x82c>
    df50:	1808d0fa 	srli	r4,r3,3
    df54:	8822d0fa 	srli	r17,r17,3
    df58:	1806977a 	slli	r3,r3,29
    df5c:	2080022c 	andhi	r2,r4,8
    df60:	1c62b03a 	or	r17,r3,r17
    df64:	10000826 	beq	r2,zero,df88 <__subdf3+0x75c>
    df68:	2812d0fa 	srli	r9,r5,3
    df6c:	4880022c 	andhi	r2,r9,8
    df70:	1000051e 	bne	r2,zero,df88 <__subdf3+0x75c>
    df74:	300cd0fa 	srli	r6,r6,3
    df78:	2804977a 	slli	r2,r5,29
    df7c:	4809883a 	mov	r4,r9
    df80:	3825883a 	mov	r18,r7
    df84:	11a2b03a 	or	r17,r2,r6
    df88:	8806d77a 	srli	r3,r17,29
    df8c:	200890fa 	slli	r4,r4,3
    df90:	882290fa 	slli	r17,r17,3
    df94:	0401ffc4 	movi	r16,2047
    df98:	1906b03a 	or	r3,r3,r4
    df9c:	003e4406 	br	d8b0 <__reset+0xfbf0d8b0>
    dfa0:	2984b03a 	or	r2,r5,r6
    dfa4:	103e4226 	beq	r2,zero,d8b0 <__reset+0xfbf0d8b0>
    dfa8:	8989c83a 	sub	r4,r17,r6
    dfac:	8911803a 	cmpltu	r8,r17,r4
    dfb0:	1945c83a 	sub	r2,r3,r5
    dfb4:	1205c83a 	sub	r2,r2,r8
    dfb8:	1200202c 	andhi	r8,r2,128
    dfbc:	403e9a26 	beq	r8,zero,da28 <__reset+0xfbf0da28>
    dfc0:	3463c83a 	sub	r17,r6,r17
    dfc4:	28c5c83a 	sub	r2,r5,r3
    dfc8:	344d803a 	cmpltu	r6,r6,r17
    dfcc:	1187c83a 	sub	r3,r2,r6
    dfd0:	3825883a 	mov	r18,r7
    dfd4:	003e3606 	br	d8b0 <__reset+0xfbf0d8b0>
    dfd8:	0101ffc4 	movi	r4,2047
    dfdc:	493fc71e 	bne	r9,r4,defc <__reset+0xfbf0defc>
    dfe0:	2807883a 	mov	r3,r5
    dfe4:	3023883a 	mov	r17,r6
    dfe8:	4821883a 	mov	r16,r9
    dfec:	003e3006 	br	d8b0 <__reset+0xfbf0d8b0>
    dff0:	10003626 	beq	r2,zero,e0cc <__subdf3+0x8a0>
    dff4:	2984b03a 	or	r2,r5,r6
    dff8:	10001726 	beq	r2,zero,e058 <__subdf3+0x82c>
    dffc:	1808d0fa 	srli	r4,r3,3
    e000:	8822d0fa 	srli	r17,r17,3
    e004:	1806977a 	slli	r3,r3,29
    e008:	2080022c 	andhi	r2,r4,8
    e00c:	1c62b03a 	or	r17,r3,r17
    e010:	10000726 	beq	r2,zero,e030 <__subdf3+0x804>
    e014:	2812d0fa 	srli	r9,r5,3
    e018:	4880022c 	andhi	r2,r9,8
    e01c:	1000041e 	bne	r2,zero,e030 <__subdf3+0x804>
    e020:	300cd0fa 	srli	r6,r6,3
    e024:	2804977a 	slli	r2,r5,29
    e028:	4809883a 	mov	r4,r9
    e02c:	11a2b03a 	or	r17,r2,r6
    e030:	8806d77a 	srli	r3,r17,29
    e034:	200890fa 	slli	r4,r4,3
    e038:	882290fa 	slli	r17,r17,3
    e03c:	3825883a 	mov	r18,r7
    e040:	1906b03a 	or	r3,r3,r4
    e044:	0401ffc4 	movi	r16,2047
    e048:	003e1906 	br	d8b0 <__reset+0xfbf0d8b0>
    e04c:	000b883a 	mov	r5,zero
    e050:	0005883a 	mov	r2,zero
    e054:	003e2e06 	br	d910 <__reset+0xfbf0d910>
    e058:	0401ffc4 	movi	r16,2047
    e05c:	003e1406 	br	d8b0 <__reset+0xfbf0d8b0>
    e060:	0005883a 	mov	r2,zero
    e064:	003f7506 	br	de3c <__reset+0xfbf0de3c>
    e068:	0005883a 	mov	r2,zero
    e06c:	0009883a 	mov	r4,zero
    e070:	003e7806 	br	da54 <__reset+0xfbf0da54>
    e074:	123ff804 	addi	r8,r2,-32
    e078:	01000804 	movi	r4,32
    e07c:	1a10d83a 	srl	r8,r3,r8
    e080:	11002526 	beq	r2,r4,e118 <__subdf3+0x8ec>
    e084:	01001004 	movi	r4,64
    e088:	2085c83a 	sub	r2,r4,r2
    e08c:	1884983a 	sll	r2,r3,r2
    e090:	1444b03a 	or	r2,r2,r17
    e094:	1004c03a 	cmpne	r2,r2,zero
    e098:	40a2b03a 	or	r17,r8,r2
    e09c:	0005883a 	mov	r2,zero
    e0a0:	003f1606 	br	dcfc <__reset+0xfbf0dcfc>
    e0a4:	02000434 	movhi	r8,16
    e0a8:	0009883a 	mov	r4,zero
    e0ac:	423fffc4 	addi	r8,r8,-1
    e0b0:	00bfffc4 	movi	r2,-1
    e0b4:	0401ffc4 	movi	r16,2047
    e0b8:	003e6606 	br	da54 <__reset+0xfbf0da54>
    e0bc:	1c62b03a 	or	r17,r3,r17
    e0c0:	8822c03a 	cmpne	r17,r17,zero
    e0c4:	0005883a 	mov	r2,zero
    e0c8:	003f9906 	br	df30 <__reset+0xfbf0df30>
    e0cc:	2807883a 	mov	r3,r5
    e0d0:	3023883a 	mov	r17,r6
    e0d4:	0401ffc4 	movi	r16,2047
    e0d8:	003df506 	br	d8b0 <__reset+0xfbf0d8b0>
    e0dc:	2807883a 	mov	r3,r5
    e0e0:	3023883a 	mov	r17,r6
    e0e4:	003df206 	br	d8b0 <__reset+0xfbf0d8b0>
    e0e8:	123ff804 	addi	r8,r2,-32
    e0ec:	01000804 	movi	r4,32
    e0f0:	1a10d83a 	srl	r8,r3,r8
    e0f4:	11000a26 	beq	r2,r4,e120 <__subdf3+0x8f4>
    e0f8:	01001004 	movi	r4,64
    e0fc:	2085c83a 	sub	r2,r4,r2
    e100:	1884983a 	sll	r2,r3,r2
    e104:	1444b03a 	or	r2,r2,r17
    e108:	1004c03a 	cmpne	r2,r2,zero
    e10c:	40a2b03a 	or	r17,r8,r2
    e110:	0005883a 	mov	r2,zero
    e114:	003f8606 	br	df30 <__reset+0xfbf0df30>
    e118:	0005883a 	mov	r2,zero
    e11c:	003fdc06 	br	e090 <__reset+0xfbf0e090>
    e120:	0005883a 	mov	r2,zero
    e124:	003ff706 	br	e104 <__reset+0xfbf0e104>

0000e128 <__fixdfsi>:
    e128:	280cd53a 	srli	r6,r5,20
    e12c:	00c00434 	movhi	r3,16
    e130:	18ffffc4 	addi	r3,r3,-1
    e134:	3181ffcc 	andi	r6,r6,2047
    e138:	01c0ff84 	movi	r7,1022
    e13c:	28c6703a 	and	r3,r5,r3
    e140:	280ad7fa 	srli	r5,r5,31
    e144:	3980120e 	bge	r7,r6,e190 <__fixdfsi+0x68>
    e148:	00810744 	movi	r2,1053
    e14c:	11800c16 	blt	r2,r6,e180 <__fixdfsi+0x58>
    e150:	00810cc4 	movi	r2,1075
    e154:	1185c83a 	sub	r2,r2,r6
    e158:	01c007c4 	movi	r7,31
    e15c:	18c00434 	orhi	r3,r3,16
    e160:	38800d16 	blt	r7,r2,e198 <__fixdfsi+0x70>
    e164:	31befb44 	addi	r6,r6,-1043
    e168:	2084d83a 	srl	r2,r4,r2
    e16c:	1986983a 	sll	r3,r3,r6
    e170:	1884b03a 	or	r2,r3,r2
    e174:	28000726 	beq	r5,zero,e194 <__fixdfsi+0x6c>
    e178:	0085c83a 	sub	r2,zero,r2
    e17c:	f800283a 	ret
    e180:	00a00034 	movhi	r2,32768
    e184:	10bfffc4 	addi	r2,r2,-1
    e188:	2885883a 	add	r2,r5,r2
    e18c:	f800283a 	ret
    e190:	0005883a 	mov	r2,zero
    e194:	f800283a 	ret
    e198:	008104c4 	movi	r2,1043
    e19c:	1185c83a 	sub	r2,r2,r6
    e1a0:	1884d83a 	srl	r2,r3,r2
    e1a4:	003ff306 	br	e174 <__reset+0xfbf0e174>

0000e1a8 <__floatsidf>:
    e1a8:	defffd04 	addi	sp,sp,-12
    e1ac:	dfc00215 	stw	ra,8(sp)
    e1b0:	dc400115 	stw	r17,4(sp)
    e1b4:	dc000015 	stw	r16,0(sp)
    e1b8:	20002b26 	beq	r4,zero,e268 <__floatsidf+0xc0>
    e1bc:	2023883a 	mov	r17,r4
    e1c0:	2020d7fa 	srli	r16,r4,31
    e1c4:	20002d16 	blt	r4,zero,e27c <__floatsidf+0xd4>
    e1c8:	8809883a 	mov	r4,r17
    e1cc:	000e32c0 	call	e32c <__clzsi2>
    e1d0:	01410784 	movi	r5,1054
    e1d4:	288bc83a 	sub	r5,r5,r2
    e1d8:	01010cc4 	movi	r4,1075
    e1dc:	2149c83a 	sub	r4,r4,r5
    e1e0:	00c007c4 	movi	r3,31
    e1e4:	1900160e 	bge	r3,r4,e240 <__floatsidf+0x98>
    e1e8:	00c104c4 	movi	r3,1043
    e1ec:	1947c83a 	sub	r3,r3,r5
    e1f0:	88c6983a 	sll	r3,r17,r3
    e1f4:	00800434 	movhi	r2,16
    e1f8:	10bfffc4 	addi	r2,r2,-1
    e1fc:	1886703a 	and	r3,r3,r2
    e200:	2941ffcc 	andi	r5,r5,2047
    e204:	800d883a 	mov	r6,r16
    e208:	0005883a 	mov	r2,zero
    e20c:	280a953a 	slli	r5,r5,20
    e210:	31803fcc 	andi	r6,r6,255
    e214:	01000434 	movhi	r4,16
    e218:	300c97fa 	slli	r6,r6,31
    e21c:	213fffc4 	addi	r4,r4,-1
    e220:	1906703a 	and	r3,r3,r4
    e224:	1946b03a 	or	r3,r3,r5
    e228:	1986b03a 	or	r3,r3,r6
    e22c:	dfc00217 	ldw	ra,8(sp)
    e230:	dc400117 	ldw	r17,4(sp)
    e234:	dc000017 	ldw	r16,0(sp)
    e238:	dec00304 	addi	sp,sp,12
    e23c:	f800283a 	ret
    e240:	00c002c4 	movi	r3,11
    e244:	1887c83a 	sub	r3,r3,r2
    e248:	88c6d83a 	srl	r3,r17,r3
    e24c:	8904983a 	sll	r2,r17,r4
    e250:	01000434 	movhi	r4,16
    e254:	213fffc4 	addi	r4,r4,-1
    e258:	2941ffcc 	andi	r5,r5,2047
    e25c:	1906703a 	and	r3,r3,r4
    e260:	800d883a 	mov	r6,r16
    e264:	003fe906 	br	e20c <__reset+0xfbf0e20c>
    e268:	000d883a 	mov	r6,zero
    e26c:	000b883a 	mov	r5,zero
    e270:	0007883a 	mov	r3,zero
    e274:	0005883a 	mov	r2,zero
    e278:	003fe406 	br	e20c <__reset+0xfbf0e20c>
    e27c:	0123c83a 	sub	r17,zero,r4
    e280:	003fd106 	br	e1c8 <__reset+0xfbf0e1c8>

0000e284 <__floatunsidf>:
    e284:	defffe04 	addi	sp,sp,-8
    e288:	dc000015 	stw	r16,0(sp)
    e28c:	dfc00115 	stw	ra,4(sp)
    e290:	2021883a 	mov	r16,r4
    e294:	20002226 	beq	r4,zero,e320 <__floatunsidf+0x9c>
    e298:	000e32c0 	call	e32c <__clzsi2>
    e29c:	01010784 	movi	r4,1054
    e2a0:	2089c83a 	sub	r4,r4,r2
    e2a4:	01810cc4 	movi	r6,1075
    e2a8:	310dc83a 	sub	r6,r6,r4
    e2ac:	00c007c4 	movi	r3,31
    e2b0:	1980120e 	bge	r3,r6,e2fc <__floatunsidf+0x78>
    e2b4:	00c104c4 	movi	r3,1043
    e2b8:	1907c83a 	sub	r3,r3,r4
    e2bc:	80ca983a 	sll	r5,r16,r3
    e2c0:	00800434 	movhi	r2,16
    e2c4:	10bfffc4 	addi	r2,r2,-1
    e2c8:	2101ffcc 	andi	r4,r4,2047
    e2cc:	0021883a 	mov	r16,zero
    e2d0:	288a703a 	and	r5,r5,r2
    e2d4:	2008953a 	slli	r4,r4,20
    e2d8:	00c00434 	movhi	r3,16
    e2dc:	18ffffc4 	addi	r3,r3,-1
    e2e0:	28c6703a 	and	r3,r5,r3
    e2e4:	8005883a 	mov	r2,r16
    e2e8:	1906b03a 	or	r3,r3,r4
    e2ec:	dfc00117 	ldw	ra,4(sp)
    e2f0:	dc000017 	ldw	r16,0(sp)
    e2f4:	dec00204 	addi	sp,sp,8
    e2f8:	f800283a 	ret
    e2fc:	00c002c4 	movi	r3,11
    e300:	188bc83a 	sub	r5,r3,r2
    e304:	814ad83a 	srl	r5,r16,r5
    e308:	00c00434 	movhi	r3,16
    e30c:	18ffffc4 	addi	r3,r3,-1
    e310:	81a0983a 	sll	r16,r16,r6
    e314:	2101ffcc 	andi	r4,r4,2047
    e318:	28ca703a 	and	r5,r5,r3
    e31c:	003fed06 	br	e2d4 <__reset+0xfbf0e2d4>
    e320:	0009883a 	mov	r4,zero
    e324:	000b883a 	mov	r5,zero
    e328:	003fea06 	br	e2d4 <__reset+0xfbf0e2d4>

0000e32c <__clzsi2>:
    e32c:	00bfffd4 	movui	r2,65535
    e330:	11000536 	bltu	r2,r4,e348 <__clzsi2+0x1c>
    e334:	00803fc4 	movi	r2,255
    e338:	11000f36 	bltu	r2,r4,e378 <__clzsi2+0x4c>
    e33c:	00800804 	movi	r2,32
    e340:	0007883a 	mov	r3,zero
    e344:	00000506 	br	e35c <__clzsi2+0x30>
    e348:	00804034 	movhi	r2,256
    e34c:	10bfffc4 	addi	r2,r2,-1
    e350:	11000c2e 	bgeu	r2,r4,e384 <__clzsi2+0x58>
    e354:	00800204 	movi	r2,8
    e358:	00c00604 	movi	r3,24
    e35c:	20c8d83a 	srl	r4,r4,r3
    e360:	00c00074 	movhi	r3,1
    e364:	18c1a804 	addi	r3,r3,1696
    e368:	1909883a 	add	r4,r3,r4
    e36c:	20c00003 	ldbu	r3,0(r4)
    e370:	10c5c83a 	sub	r2,r2,r3
    e374:	f800283a 	ret
    e378:	00800604 	movi	r2,24
    e37c:	00c00204 	movi	r3,8
    e380:	003ff606 	br	e35c <__reset+0xfbf0e35c>
    e384:	00800404 	movi	r2,16
    e388:	1007883a 	mov	r3,r2
    e38c:	003ff306 	br	e35c <__reset+0xfbf0e35c>

0000e390 <close>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e390:	d0a01817 	ldw	r2,-32672(gp)
    e394:	10000926 	beq	r2,zero,e3bc <close+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
    e398:	deffff04 	addi	sp,sp,-4
    e39c:	dfc00015 	stw	ra,0(sp)
    e3a0:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    e3a4:	00c01604 	movi	r3,88
    e3a8:	10c00015 	stw	r3,0(r2)
  return -1;
}
    e3ac:	00bfffc4 	movi	r2,-1
    e3b0:	dfc00017 	ldw	ra,0(sp)
    e3b4:	dec00104 	addi	sp,sp,4
    e3b8:	f800283a 	ret
    e3bc:	d0a03604 	addi	r2,gp,-32552
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    e3c0:	00c01604 	movi	r3,88
    e3c4:	10c00015 	stw	r3,0(r2)
  return -1;
}
    e3c8:	00bfffc4 	movi	r2,-1
    e3cc:	f800283a 	ret

0000e3d0 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
    e3d0:	defffe04 	addi	sp,sp,-8
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
    e3d4:	d1601404 	addi	r5,gp,-32688
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
    e3d8:	dc000015 	stw	r16,0(sp)
    e3dc:	dfc00115 	stw	ra,4(sp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
    e3e0:	000e4680 	call	e468 <alt_find_dev>
    e3e4:	1021883a 	mov	r16,r2

  if (!dev)
    e3e8:	1000071e 	bne	r2,zero,e408 <alt_dma_rxchan_open+0x38>
    e3ec:	d0a01817 	ldw	r2,-32672(gp)
    e3f0:	10000226 	beq	r2,zero,e3fc <alt_dma_rxchan_open+0x2c>
    e3f4:	103ee83a 	callr	r2
    e3f8:	00000106 	br	e400 <alt_dma_rxchan_open+0x30>
    e3fc:	d0a03604 	addi	r2,gp,-32552
  {
    ALT_ERRNO = ENODEV;
    e400:	00c004c4 	movi	r3,19
    e404:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
    e408:	8005883a 	mov	r2,r16
    e40c:	dfc00117 	ldw	ra,4(sp)
    e410:	dc000017 	ldw	r16,0(sp)
    e414:	dec00204 	addi	sp,sp,8
    e418:	f800283a 	ret

0000e41c <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
    e41c:	defffe04 	addi	sp,sp,-8
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
    e420:	d1601604 	addi	r5,gp,-32680
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
    e424:	dc000015 	stw	r16,0(sp)
    e428:	dfc00115 	stw	ra,4(sp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
    e42c:	000e4680 	call	e468 <alt_find_dev>
    e430:	1021883a 	mov	r16,r2

  if (!dev)
    e434:	1000071e 	bne	r2,zero,e454 <alt_dma_txchan_open+0x38>
    e438:	d0a01817 	ldw	r2,-32672(gp)
    e43c:	10000226 	beq	r2,zero,e448 <alt_dma_txchan_open+0x2c>
    e440:	103ee83a 	callr	r2
    e444:	00000106 	br	e44c <alt_dma_txchan_open+0x30>
    e448:	d0a03604 	addi	r2,gp,-32552
  {
    ALT_ERRNO = ENODEV;
    e44c:	00c004c4 	movi	r3,19
    e450:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
    e454:	8005883a 	mov	r2,r16
    e458:	dfc00117 	ldw	ra,4(sp)
    e45c:	dc000017 	ldw	r16,0(sp)
    e460:	dec00204 	addi	sp,sp,8
    e464:	f800283a 	ret

0000e468 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e468:	defffb04 	addi	sp,sp,-20
    e46c:	dcc00315 	stw	r19,12(sp)
    e470:	dc800215 	stw	r18,8(sp)
    e474:	dc400115 	stw	r17,4(sp)
    e478:	dc000015 	stw	r16,0(sp)
    e47c:	dfc00415 	stw	ra,16(sp)
    e480:	2027883a 	mov	r19,r4
    e484:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    e488:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    e48c:	0001cd80 	call	1cd8 <strlen>
    e490:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e494:	84400726 	beq	r16,r17,e4b4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e498:	81000217 	ldw	r4,8(r16)
    e49c:	900d883a 	mov	r6,r18
    e4a0:	980b883a 	mov	r5,r19
    e4a4:	00102d00 	call	102d0 <memcmp>
    e4a8:	10000426 	beq	r2,zero,e4bc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    e4ac:	84000017 	ldw	r16,0(r16)
    e4b0:	003ff806 	br	e494 <__reset+0xfbf0e494>
  }
  
  /* No match found */
  
  return NULL;
    e4b4:	0005883a 	mov	r2,zero
    e4b8:	00000106 	br	e4c0 <alt_find_dev+0x58>
    e4bc:	8005883a 	mov	r2,r16
}
    e4c0:	dfc00417 	ldw	ra,16(sp)
    e4c4:	dcc00317 	ldw	r19,12(sp)
    e4c8:	dc800217 	ldw	r18,8(sp)
    e4cc:	dc400117 	ldw	r17,4(sp)
    e4d0:	dc000017 	ldw	r16,0(sp)
    e4d4:	dec00504 	addi	sp,sp,20
    e4d8:	f800283a 	ret

0000e4dc <fstat>:
 * Provide minimal version that just describes all file descriptors 
 * as character devices for provided stdio devices.
 */
int ALT_FSTAT (int file, struct stat *st)
{
    switch (file) {
    e4dc:	00800084 	movi	r2,2
    e4e0:	11000436 	bltu	r2,r4,e4f4 <fstat+0x18>
    case 1: /* stdout file descriptor */
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
#endif /* ALT_STDERR_PRESENT */
        st->st_mode = _IFCHR;
    e4e4:	00880004 	movi	r2,8192
    e4e8:	28800115 	stw	r2,4(r5)
        return 0;
    e4ec:	0005883a 	mov	r2,zero
    e4f0:	f800283a 	ret
    default:
        return -1;
    e4f4:	00bfffc4 	movi	r2,-1

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(fstat);
#endif
}
    e4f8:	f800283a 	ret

0000e4fc <isatty>:

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(isatty);
#endif
}
    e4fc:	00800084 	movi	r2,2
    e500:	1105403a 	cmpgeu	r2,r2,r4
    e504:	f800283a 	ret

0000e508 <lseek>:
    e508:	d0a01817 	ldw	r2,-32672(gp)
    e50c:	10000926 	beq	r2,zero,e534 <lseek+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e510:	deffff04 	addi	sp,sp,-4
    e514:	dfc00015 	stw	ra,0(sp)
    e518:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    e51c:	00c01604 	movi	r3,88
    e520:	10c00015 	stw	r3,0(r2)
  return -1;
}
    e524:	00bfffc4 	movi	r2,-1
    e528:	dfc00017 	ldw	ra,0(sp)
    e52c:	dec00104 	addi	sp,sp,4
    e530:	f800283a 	ret
    e534:	d0a03604 	addi	r2,gp,-32552
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    e538:	00c01604 	movi	r3,88
    e53c:	10c00015 	stw	r3,0(r2)
  return -1;
}
    e540:	00bfffc4 	movi	r2,-1
    e544:	f800283a 	ret

0000e548 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e548:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e54c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e550:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e554:	000e69c0 	call	e69c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e558:	000e6c80 	call	e6c8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    e55c:	d1a03717 	ldw	r6,-32548(gp)
    e560:	d1603817 	ldw	r5,-32544(gp)
    e564:	d1203917 	ldw	r4,-32540(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    e568:	dfc00017 	ldw	ra,0(sp)
    e56c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    e570:	00018501 	jmpi	1850 <main>

0000e574 <__malloc_lock>:
    e574:	f800283a 	ret

0000e578 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e578:	f800283a 	ret

0000e57c <read>:
#if !defined(ALT_STDIN_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(read);
#endif

    switch (file) {
    e57c:	2000041e 	bne	r4,zero,e590 <read+0x14>
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
    e580:	01000074 	movhi	r4,1
    e584:	000f883a 	mov	r7,zero
    e588:	21053304 	addi	r4,r4,5324
    e58c:	000f0f01 	jmpi	f0f0 <altera_avalon_jtag_uart_read>
    e590:	d0a01817 	ldw	r2,-32672(gp)
    e594:	10000926 	beq	r2,zero,e5bc <read+0x40>
/*
 * Provide minimal version that just reads from the stdin device when provided.
 */

int ALT_READ (int file, void *ptr, size_t len)
{
    e598:	deffff04 	addi	sp,sp,-4
    e59c:	dfc00015 	stw	ra,0(sp)
    e5a0:	103ee83a 	callr	r2
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    e5a4:	00c01444 	movi	r3,81
    e5a8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    e5ac:	00bfffc4 	movi	r2,-1
    e5b0:	dfc00017 	ldw	ra,0(sp)
    e5b4:	dec00104 	addi	sp,sp,4
    e5b8:	f800283a 	ret
    e5bc:	d0a03604 	addi	r2,gp,-32552
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    e5c0:	00c01444 	movi	r3,81
    e5c4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    e5c8:	00bfffc4 	movi	r2,-1
    e5cc:	f800283a 	ret

0000e5d0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5d0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5d4:	00ffff84 	movi	r3,-2
    e5d8:	30c4703a 	and	r2,r6,r3
    e5dc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e5e0:	d0a01917 	ldw	r2,-32668(gp)
    e5e4:	017fff04 	movi	r5,-4
    e5e8:	108000c4 	addi	r2,r2,3
    e5ec:	1144703a 	and	r2,r2,r5
    e5f0:	3140004c 	andi	r5,r6,1
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e5f4:	01808034 	movhi	r6,512
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e5f8:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e5fc:	1109883a 	add	r4,r2,r4
    e600:	31bc0004 	addi	r6,r6,-4096
    e604:	3100062e 	bgeu	r6,r4,e620 <sbrk+0x50>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    e608:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    e60c:	10c4703a 	and	r2,r2,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    e610:	2886b03a 	or	r3,r5,r2
    e614:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e618:	00bfffc4 	movi	r2,-1
    e61c:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    e620:	d1201915 	stw	r4,-32668(gp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    e624:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    e628:	20c6703a 	and	r3,r4,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    e62c:	28c6b03a 	or	r3,r5,r3
    e630:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    e634:	f800283a 	ret

0000e638 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    e638:	00100641 	jmpi	10064 <alt_busy_sleep>

0000e63c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    e63c:	00800044 	movi	r2,1
    e640:	20800226 	beq	r4,r2,e64c <write+0x10>
    e644:	00800084 	movi	r2,2
    e648:	2080041e 	bne	r4,r2,e65c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    e64c:	01000074 	movhi	r4,1
    e650:	000f883a 	mov	r7,zero
    e654:	21053304 	addi	r4,r4,5324
    e658:	000f2401 	jmpi	f240 <altera_avalon_jtag_uart_write>
    e65c:	d0a01817 	ldw	r2,-32672(gp)
    e660:	10000926 	beq	r2,zero,e688 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e664:	deffff04 	addi	sp,sp,-4
    e668:	dfc00015 	stw	ra,0(sp)
    e66c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    e670:	00c01444 	movi	r3,81
    e674:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    e678:	00bfffc4 	movi	r2,-1
    e67c:	dfc00017 	ldw	ra,0(sp)
    e680:	dec00104 	addi	sp,sp,4
    e684:	f800283a 	ret
    e688:	d0a03604 	addi	r2,gp,-32552
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    e68c:	00c01444 	movi	r3,81
    e690:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    e694:	00bfffc4 	movi	r2,-1
    e698:	f800283a 	ret

0000e69c <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    e69c:	01000074 	movhi	r4,1
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e6a0:	deffff04 	addi	sp,sp,-4
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    e6a4:	2109af04 	addi	r4,r4,9916
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e6a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    e6ac:	000fea80 	call	fea8 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e6b0:	00802034 	movhi	r2,128
    e6b4:	10800044 	addi	r2,r2,1
    e6b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e6bc:	dfc00017 	ldw	ra,0(sp)
    e6c0:	dec00104 	addi	sp,sp,4
    e6c4:	f800283a 	ret

0000e6c8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    e6c8:	01010834 	movhi	r4,1056
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e6cc:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    e6d0:	01c0fa04 	movi	r7,1000
    e6d4:	01800044 	movi	r6,1
    e6d8:	000b883a 	mov	r5,zero
    e6dc:	2106a004 	addi	r4,r4,6784
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e6e0:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    e6e4:	000f4140 	call	f414 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_DMA_INIT ( DMA_RX, dma_rx);
    e6e8:	008000c4 	movi	r2,3
    e6ec:	01810834 	movhi	r6,1056
    e6f0:	01400074 	movhi	r5,1
    e6f4:	01000074 	movhi	r4,1
    e6f8:	d8800015 	stw	r2,0(sp)
    e6fc:	000f883a 	mov	r7,zero
    e700:	3186b004 	addi	r6,r6,6848
    e704:	29497804 	addi	r5,r5,9696
    e708:	21097f04 	addi	r4,r4,9724
    e70c:	000ecb80 	call	ecb8 <alt_avalon_dma_init>
    ALTERA_AVALON_DMA_INIT ( DMA_TX, dma_tx);
    e710:	00800104 	movi	r2,4
    e714:	01810834 	movhi	r6,1056
    e718:	01400074 	movhi	r5,1
    e71c:	01000074 	movhi	r4,1
    e720:	d8800015 	stw	r2,0(sp)
    e724:	000f883a 	mov	r7,zero
    e728:	31868004 	addi	r6,r6,6656
    e72c:	29494104 	addi	r5,r5,9476
    e730:	21094804 	addi	r4,r4,9504
    e734:	000ecb80 	call	ecb8 <alt_avalon_dma_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_RX, fifo_rx);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART_0, jtaguart_0);
    e738:	01000074 	movhi	r4,1
    e73c:	000d883a 	mov	r6,zero
    e740:	000b883a 	mov	r5,zero
    e744:	21053304 	addi	r4,r4,5324
    e748:	000f0480 	call	f048 <altera_avalon_jtag_uart_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    e74c:	01000074 	movhi	r4,1
    e750:	01800184 	movi	r6,6
    e754:	000b883a 	mov	r5,zero
    e758:	21050c04 	addi	r4,r4,5168
    e75c:	000f5900 	call	f590 <altera_avalon_uart_init>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
    e760:	01000074 	movhi	r4,1
    e764:	2104cc04 	addi	r4,r4,4912
}
    e768:	dfc00117 	ldw	ra,4(sp)
    e76c:	dec00204 	addi	sp,sp,8
    ALTERA_AVALON_DMA_INIT ( DMA_TX, dma_tx);
    ALTERA_AVALON_FIFO_INIT ( FIFO_RX, fifo_rx);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART_0, jtaguart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
    e770:	000f82c1 	jmpi	f82c <altera_onchip_flash_init>

0000e774 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    e774:	defff904 	addi	sp,sp,-28
    e778:	dd000415 	stw	r20,16(sp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
    e77c:	25000517 	ldw	r20,20(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    e780:	dc800215 	stw	r18,8(sp)
    e784:	dc400115 	stw	r17,4(sp)
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;

  tx_start = priv->tx_start;
    e788:	24800117 	ldw	r18,4(r4)
  rx_start = priv->rx_start;
    e78c:	24400317 	ldw	r17,12(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    e790:	dcc00315 	stw	r19,12(sp)
    e794:	dc000015 	stw	r16,0(sp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
    e798:	a4c0080c 	andi	r19,r20,32
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    e79c:	dfc00615 	stw	ra,24(sp)
    e7a0:	dd400515 	stw	r21,20(sp)
    e7a4:	2021883a 	mov	r16,r4
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
    e7a8:	a500100c 	andi	r20,r20,64
  tx_slot = &priv->tx_buf[tx_start];
  rx_slot = &priv->rx_buf[rx_start];

  /* Increment the descriptors */

  if (!stream_tx)
    e7ac:	9800031e 	bne	r19,zero,e7bc <alt_avalon_dma_irq+0x48>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    e7b0:	90800044 	addi	r2,r18,1
    e7b4:	108000cc 	andi	r2,r2,3
    e7b8:	20800115 	stw	r2,4(r4)
  }
  if (!stream_rx)
    e7bc:	a000031e 	bne	r20,zero,e7cc <alt_avalon_dma_irq+0x58>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    e7c0:	88800044 	addi	r2,r17,1
    e7c4:	108000cc 	andi	r2,r2,3
    e7c8:	80800315 	stw	r2,12(r16)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
    e7cc:	80800017 	ldw	r2,0(r16)
    e7d0:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
    e7d4:	80800017 	ldw	r2,0(r16)
    e7d8:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
    e7dc:	80800717 	ldw	r2,28(r16)
    e7e0:	8009883a 	mov	r4,r16
    e7e4:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
    e7e8:	9800121e 	bne	r19,zero,e834 <alt_avalon_dma_irq+0xc0>
    e7ec:	9004913a 	slli	r2,r18,4
    e7f0:	8085883a 	add	r2,r16,r2
    e7f4:	10800b17 	ldw	r2,44(r2)
    e7f8:	10000e26 	beq	r2,zero,e834 <alt_avalon_dma_irq+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7fc:	002b303a 	rdctl	r21,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e800:	04ffff84 	movi	r19,-2
    e804:	acc6703a 	and	r3,r21,r19
    e808:	1801703a 	wrctl	status,r3
  {
    cpu_sr = alt_irq_disable_all();
    tx_slot->done (tx_slot->handle);
    e80c:	948000c4 	addi	r18,r18,3
    e810:	9024913a 	slli	r18,r18,4
    e814:	84a5883a 	add	r18,r16,r18
    e818:	91000017 	ldw	r4,0(r18)
    e81c:	103ee83a 	callr	r2
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    e820:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    e824:	14e6703a 	and	r19,r2,r19
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    e828:	ad40004c 	andi	r21,r21,1
    e82c:	ace6b03a 	or	r19,r21,r19
    e830:	9801703a 	wrctl	status,r19
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
    e834:	a000131e 	bne	r20,zero,e884 <alt_avalon_dma_irq+0x110>
    e838:	8804913a 	slli	r2,r17,4
    e83c:	8085883a 	add	r2,r16,r2
    e840:	10c01b17 	ldw	r3,108(r2)
    e844:	18000f26 	beq	r3,zero,e884 <alt_avalon_dma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e848:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e84c:	04bfff84 	movi	r18,-2
    e850:	9c88703a 	and	r4,r19,r18
    e854:	2001703a 	wrctl	status,r4
  {
    cpu_sr = alt_irq_disable_all();
    rx_slot->done (rx_slot->handle, rx_slot->data);
    e858:	8c4001c4 	addi	r17,r17,7
    e85c:	8822913a 	slli	r17,r17,4
    e860:	11401917 	ldw	r5,100(r2)
    e864:	8461883a 	add	r16,r16,r17
    e868:	81000017 	ldw	r4,0(r16)
    e86c:	183ee83a 	callr	r3
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    e870:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    e874:	14a4703a 	and	r18,r2,r18
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    e878:	9cc0004c 	andi	r19,r19,1
    e87c:	9ca4b03a 	or	r18,r19,r18
    e880:	9001703a 	wrctl	status,r18
    alt_irq_enable_all(cpu_sr);
  }
}
    e884:	dfc00617 	ldw	ra,24(sp)
    e888:	dd400517 	ldw	r21,20(sp)
    e88c:	dd000417 	ldw	r20,16(sp)
    e890:	dcc00317 	ldw	r19,12(sp)
    e894:	dc800217 	ldw	r18,8(sp)
    e898:	dc400117 	ldw	r17,4(sp)
    e89c:	dc000017 	ldw	r16,0(sp)
    e8a0:	dec00704 	addi	sp,sp,28
    e8a4:	f800283a 	ret

0000e8a8 <alt_avalon_dma_launch_bidir>:
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
    e8a8:	20c00117 	ldw	r3,4(r4)
    e8ac:	20800217 	ldw	r2,8(r4)
    e8b0:	18801926 	beq	r3,r2,e918 <alt_avalon_dma_launch_bidir+0x70>
    e8b4:	20c00317 	ldw	r3,12(r4)
    e8b8:	20800417 	ldw	r2,16(r4)
    e8bc:	18801626 	beq	r3,r2,e918 <alt_avalon_dma_launch_bidir+0x70>
  {
    priv->active = 1;
    e8c0:	00800044 	movi	r2,1
    e8c4:	20800815 	stw	r2,32(r4)

    tx_slot = &priv->tx_buf[priv->tx_start];
    e8c8:	20800117 	ldw	r2,4(r4)
    rx_slot = &priv->rx_buf[priv->rx_start];

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    e8cc:	21400017 	ldw	r5,0(r4)
  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  {
    priv->active = 1;

    tx_slot = &priv->tx_buf[priv->tx_start];
    rx_slot = &priv->rx_buf[priv->rx_start];
    e8d0:	20c00317 	ldw	r3,12(r4)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    e8d4:	1004913a 	slli	r2,r2,4
    e8d8:	2085883a 	add	r2,r4,r2
    e8dc:	11800917 	ldw	r6,36(r2)
    e8e0:	29800135 	stwio	r6,4(r5)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    e8e4:	1806913a 	slli	r3,r3,4
    e8e8:	21400017 	ldw	r5,0(r4)
    e8ec:	20c7883a 	add	r3,r4,r3
    e8f0:	19801917 	ldw	r6,100(r3)
    e8f4:	29800235 	stwio	r6,8(r5)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
    e8f8:	21000017 	ldw	r4,0(r4)
    e8fc:	18c01a17 	ldw	r3,104(r3)
    e900:	10800a17 	ldw	r2,40(r2)
    e904:	21000304 	addi	r4,r4,12
    e908:	1880012e 	bgeu	r3,r2,e910 <alt_avalon_dma_launch_bidir+0x68>
    e90c:	1805883a 	mov	r2,r3
    e910:	20800035 	stwio	r2,0(r4)
    e914:	f800283a 	ret
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
    e918:	20000815 	stw	zero,32(r4)
    e91c:	f800283a 	ret

0000e920 <alt_avalon_dma_launch_txonly>:

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
    e920:	20c00117 	ldw	r3,4(r4)
    e924:	20800217 	ldw	r2,8(r4)
    e928:	18800c26 	beq	r3,r2,e95c <alt_avalon_dma_launch_txonly+0x3c>
  {
    priv->active = 1;
    e92c:	00800044 	movi	r2,1
    e930:	20800815 	stw	r2,32(r4)
    tx_slot      = &priv->tx_buf[priv->tx_start];
    e934:	20800117 	ldw	r2,4(r4)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    e938:	20c00017 	ldw	r3,0(r4)
    e93c:	1004913a 	slli	r2,r2,4
    e940:	2085883a 	add	r2,r4,r2
    e944:	11400917 	ldw	r5,36(r2)
    e948:	19400135 	stwio	r5,4(r3)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
    e94c:	20c00017 	ldw	r3,0(r4)
    e950:	10800a17 	ldw	r2,40(r2)
    e954:	18800335 	stwio	r2,12(r3)
    e958:	f800283a 	ret
  }
  else
  {
    priv->active = 0;
    e95c:	20000815 	stw	zero,32(r4)
    e960:	f800283a 	ret

0000e964 <alt_avalon_dma_launch_rxonly>:

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
    e964:	20c00317 	ldw	r3,12(r4)
    e968:	20800417 	ldw	r2,16(r4)
    e96c:	18800c26 	beq	r3,r2,e9a0 <alt_avalon_dma_launch_rxonly+0x3c>
  {
    priv->active = 1;
    e970:	00800044 	movi	r2,1
    e974:	20800815 	stw	r2,32(r4)
    rx_slot      = &priv->rx_buf[priv->rx_start];
    e978:	20800317 	ldw	r2,12(r4)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    e97c:	20c00017 	ldw	r3,0(r4)
    e980:	1004913a 	slli	r2,r2,4
    e984:	2085883a 	add	r2,r4,r2
    e988:	11401917 	ldw	r5,100(r2)
    e98c:	19400235 	stwio	r5,8(r3)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
    e990:	20c00017 	ldw	r3,0(r4)
    e994:	10801a17 	ldw	r2,104(r2)
    e998:	18800335 	stwio	r2,12(r3)
    e99c:	f800283a 	ret
  }
  else
  {
    priv->active = 0;
    e9a0:	20000815 	stw	zero,32(r4)
    e9a4:	f800283a 	ret

0000e9a8 <alt_avalon_dma_ioctl>:
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    e9a8:	20c00117 	ldw	r3,4(r4)
    e9ac:	20800217 	ldw	r2,8(r4)
    e9b0:	18805e1e 	bne	r3,r2,eb2c <alt_avalon_dma_ioctl+0x184>
      (priv->rx_start != priv->rx_end) ||
    e9b4:	20c00317 	ldw	r3,12(r4)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    e9b8:	20800417 	ldw	r2,16(r4)
    e9bc:	18805b1e 	bne	r3,r2,eb2c <alt_avalon_dma_ioctl+0x184>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
    e9c0:	21c00017 	ldw	r7,0(r4)
    e9c4:	38800337 	ldwio	r2,12(r7)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
    e9c8:	1000581e 	bne	r2,zero,eb2c <alt_avalon_dma_ioctl+0x184>
    return -EIO;
  }

  /* Now process the ioctl. */

  switch (req)
    e9cc:	297fffc4 	addi	r5,r5,-1
    e9d0:	00c00204 	movi	r3,8
    e9d4:	19405336 	bltu	r3,r5,eb24 <alt_avalon_dma_ioctl+0x17c>
    e9d8:	280a90ba 	slli	r5,r5,2
    e9dc:	00c00074 	movhi	r3,1
    e9e0:	18fa7d04 	addi	r3,r3,-5644
    e9e4:	28cb883a 	add	r5,r5,r3
    e9e8:	29400017 	ldw	r5,0(r5)
    e9ec:	20c00517 	ldw	r3,20(r4)
    e9f0:	2800683a 	jmp	r5
    e9f4:	0000ea18 	cmpnei	zero,zero,936
    e9f8:	0000ea3c 	xorhi	zero,zero,936
    e9fc:	0000ea44 	movi	zero,937
    ea00:	0000ea68 	cmpgeui	zero,zero,937
    ea04:	0000ea84 	movi	zero,938
    ea08:	0000ea90 	cmplti	zero,zero,938
    ea0c:	0000eaa0 	cmpeqi	zero,zero,938
    ea10:	0000eab0 	cmpltui	zero,zero,938
    ea14:	0000eac0 	call	eac <write_bank_register_exit4byte+0x40>
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
    ea18:	18c0100c 	andi	r3,r3,64
    ea1c:	1800431e 	bne	r3,zero,eb2c <alt_avalon_dma_ioctl+0x184>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
    ea20:	39800135 	stwio	r6,4(r7)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
    ea24:	20c00517 	ldw	r3,20(r4)
    ea28:	18c00814 	ori	r3,r3,32
    ea2c:	20c00515 	stw	r3,20(r4)
      priv->launch = alt_avalon_dma_launch_rxonly;
    ea30:	00c00074 	movhi	r3,1
    ea34:	18fa5904 	addi	r3,r3,-5788
    ea38:	00001006 	br	ea7c <alt_avalon_dma_ioctl+0xd4>
    {
      status = -EIO;
    }
    break;
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
    ea3c:	017ff7c4 	movi	r5,-33
    ea40:	00000a06 	br	ea6c <alt_avalon_dma_ioctl+0xc4>
    priv->launch = alt_avalon_dma_launch_bidir;
    break;
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
    ea44:	18c0080c 	andi	r3,r3,32
    ea48:	1800381e 	bne	r3,zero,eb2c <alt_avalon_dma_ioctl+0x184>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
    ea4c:	39800235 	stwio	r6,8(r7)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
    ea50:	20c00517 	ldw	r3,20(r4)
    ea54:	18c01014 	ori	r3,r3,64
    ea58:	20c00515 	stw	r3,20(r4)
      priv->launch = alt_avalon_dma_launch_txonly;
    ea5c:	00c00074 	movhi	r3,1
    ea60:	18fa4804 	addi	r3,r3,-5856
    ea64:	00000506 	br	ea7c <alt_avalon_dma_ioctl+0xd4>
    {
      status = -EIO;
    }
    break;
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
    ea68:	017fefc4 	movi	r5,-65
    ea6c:	1946703a 	and	r3,r3,r5
    ea70:	20c00515 	stw	r3,20(r4)
    priv->launch = alt_avalon_dma_launch_bidir;
    ea74:	00c00074 	movhi	r3,1
    ea78:	18fa2a04 	addi	r3,r3,-5976
    ea7c:	20c00715 	stw	r3,28(r4)
    ea80:	00001106 	br	eac8 <alt_avalon_dma_ioctl+0x120>
    break;
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    ea84:	017ffc04 	movi	r5,-16
    ea88:	1946703a 	and	r3,r3,r5
    ea8c:	00000d06 	br	eac4 <alt_avalon_dma_ioctl+0x11c>
      ALT_AVALON_DMA_MODE_8;
    break;
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    ea90:	017ffc04 	movi	r5,-16
    ea94:	1946703a 	and	r3,r3,r5
    ea98:	18c00054 	ori	r3,r3,1
    ea9c:	00000906 	br	eac4 <alt_avalon_dma_ioctl+0x11c>
      ALT_AVALON_DMA_MODE_16;
    break;
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    eaa0:	017ffc04 	movi	r5,-16
    eaa4:	1946703a 	and	r3,r3,r5
    eaa8:	18c000d4 	ori	r3,r3,3
    eaac:	00000506 	br	eac4 <alt_avalon_dma_ioctl+0x11c>
      ALT_AVALON_DMA_MODE_32;
    break;
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    eab0:	017ffc04 	movi	r5,-16
    eab4:	1946703a 	and	r3,r3,r5
    eab8:	18c001d4 	ori	r3,r3,7
    eabc:	00000106 	br	eac4 <alt_avalon_dma_ioctl+0x11c>
      ALT_AVALON_DMA_MODE_64;
    break;
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    eac0:	18c003d4 	ori	r3,r3,15
    eac4:	20c00515 	stw	r3,20(r4)
    status = -ENOTTY;
  }

  if (!status)
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
    eac8:	21400517 	ldw	r5,20(r4)
    eacc:	018001c4 	movi	r6,7
    ead0:	28c003cc 	andi	r3,r5,15
    ead4:	30c01136 	bltu	r6,r3,eb1c <alt_avalon_dma_ioctl+0x174>
    ead8:	01800074 	movhi	r6,1
    eadc:	18c7883a 	add	r3,r3,r3
    eae0:	3181f504 	addi	r6,r6,2004
    eae4:	30c7883a 	add	r3,r6,r3
    eae8:	18c0000b 	ldhu	r3,0(r3)
       break;
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
    eaec:	2980080c 	andi	r6,r5,32
    eaf0:	21000017 	ldw	r4,0(r4)
    eaf4:	30000226 	beq	r6,zero,eb00 <alt_avalon_dma_ioctl+0x158>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    eaf8:	18c07e14 	ori	r3,r3,504
    eafc:	00000506 	br	eb14 <alt_avalon_dma_ioctl+0x16c>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
    eb00:	2940100c 	andi	r5,r5,64
    eb04:	28000226 	beq	r5,zero,eb10 <alt_avalon_dma_ioctl+0x168>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    eb08:	18c0be14 	ori	r3,r3,760
    eb0c:	00000106 	br	eb14 <alt_avalon_dma_ioctl+0x16c>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    eb10:	18c03e14 	ori	r3,r3,248
    eb14:	20c00635 	stwio	r3,24(r4)
    eb18:	f800283a 	ret
    status = -ENOTTY;
  }

  if (!status)
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
    eb1c:	00c20004 	movi	r3,2048
    eb20:	003ff206 	br	eaec <__reset+0xfbf0eaec>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
      ALT_AVALON_DMA_MODE_128;
    break;
  default:
    status = -ENOTTY;
    eb24:	00bff9c4 	movi	r2,-25
    eb28:	f800283a 	ret
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
    eb2c:	00bffec4 	movi	r2,-5
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
}
    eb30:	f800283a 	ret

0000eb34 <alt_avalon_dma_tx_ioctl>:

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
    eb34:	21000617 	ldw	r4,24(r4)
    eb38:	000e9a81 	jmpi	e9a8 <alt_avalon_dma_ioctl>

0000eb3c <alt_avalon_dma_rx_ioctl>:

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
    eb3c:	21000617 	ldw	r4,24(r4)
    eb40:	000e9a81 	jmpi	e9a8 <alt_avalon_dma_ioctl>

0000eb44 <alt_avalon_dma_prepare>:
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
    eb44:	21000617 	ldw	r4,24(r4)
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
    eb48:	defffe04 	addi	sp,sp,-8
    eb4c:	dfc00115 	stw	ra,4(sp)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    eb50:	20800517 	ldw	r2,20(r4)
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
    eb54:	dc000015 	stw	r16,0(sp)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    eb58:	10c003cc 	andi	r3,r2,15
    eb5c:	2984b03a 	or	r2,r5,r6
    eb60:	1884703a 	and	r2,r3,r2
    eb64:	1000171e 	bne	r2,zero,ebc4 <alt_avalon_dma_prepare+0x80>
    eb68:	20800617 	ldw	r2,24(r4)
    eb6c:	11801536 	bltu	r2,r6,ebc4 <alt_avalon_dma_prepare+0x80>
  {
    return -EINVAL;
  }

  start = priv->rx_start;
  end   = priv->rx_end;
    eb70:	20800417 	ldw	r2,16(r4)
     (len > priv->max_length))
  {
    return -EINVAL;
  }

  start = priv->rx_start;
    eb74:	20c00317 	ldw	r3,12(r4)
  end   = priv->rx_end;
  slot  = &priv->rx_buf[end];

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    eb78:	12000044 	addi	r8,r2,1
    eb7c:	420000cc 	andi	r8,r8,3

  if (next == start)
    eb80:	1a001226 	beq	r3,r8,ebcc <alt_avalon_dma_prepare+0x88>
  {
    return -ENOSPC;
  }

  slot->data   = data;
    eb84:	1006913a 	slli	r3,r2,4
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
    eb88:	108001c4 	addi	r2,r2,7
    eb8c:	1004913a 	slli	r2,r2,4
  if (next == start)
  {
    return -ENOSPC;
  }

  slot->data   = data;
    eb90:	20c7883a 	add	r3,r4,r3
    eb94:	19401915 	stw	r5,100(r3)
  slot->len    = len;
    eb98:	19801a15 	stw	r6,104(r3)
  slot->done   = done;
    eb9c:	19c01b15 	stw	r7,108(r3)
  slot->handle = handle;
    eba0:	d8c00217 	ldw	r3,8(sp)
    eba4:	2085883a 	add	r2,r4,r2

  priv->rx_end = next;

  if (!priv->active)
    eba8:	24000817 	ldw	r16,32(r4)
  }

  slot->data   = data;
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
    ebac:	10c00015 	stw	r3,0(r2)

  priv->rx_end = next;
    ebb0:	22000415 	stw	r8,16(r4)

  if (!priv->active)
    ebb4:	8000071e 	bne	r16,zero,ebd4 <alt_avalon_dma_prepare+0x90>
  {
    priv->launch (priv);
    ebb8:	20800717 	ldw	r2,28(r4)
    ebbc:	103ee83a 	callr	r2
    ebc0:	00000506 	br	ebd8 <alt_avalon_dma_prepare+0x94>
  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
     (len > priv->max_length))
  {
    return -EINVAL;
    ebc4:	043ffa84 	movi	r16,-22
    ebc8:	00000306 	br	ebd8 <alt_avalon_dma_prepare+0x94>

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;

  if (next == start)
  {
    return -ENOSPC;
    ebcc:	043ff904 	movi	r16,-28
    ebd0:	00000106 	br	ebd8 <alt_avalon_dma_prepare+0x94>
  if (!priv->active)
  {
    priv->launch (priv);
  }

  return 0;
    ebd4:	0021883a 	mov	r16,zero
}
    ebd8:	8005883a 	mov	r2,r16
    ebdc:	dfc00117 	ldw	ra,4(sp)
    ebe0:	dc000017 	ldw	r16,0(sp)
    ebe4:	dec00204 	addi	sp,sp,8
    ebe8:	f800283a 	ret

0000ebec <alt_avalon_dma_space>:
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    ebec:	20800617 	ldw	r2,24(r4)

  start = priv->tx_start;
    ebf0:	10c00117 	ldw	r3,4(r2)
  end   = priv->tx_end;
    ebf4:	10800217 	ldw	r2,8(r2)

  return (start > end) ? start - end - 1 :
    ebf8:	10c0022e 	bgeu	r2,r3,ec04 <alt_avalon_dma_space+0x18>
    ebfc:	18ffffc4 	addi	r3,r3,-1
    ec00:	00000106 	br	ec08 <alt_avalon_dma_space+0x1c>
    ec04:	18c000c4 	addi	r3,r3,3
    ec08:	1885c83a 	sub	r2,r3,r2
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
    ec0c:	f800283a 	ret

0000ec10 <alt_avalon_dma_send>:
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    ec10:	21000617 	ldw	r4,24(r4)
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
    ec14:	defffe04 	addi	sp,sp,-8
    ec18:	dfc00115 	stw	ra,4(sp)
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
    ec1c:	20800517 	ldw	r2,20(r4)
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
    ec20:	dc000015 	stw	r16,0(sp)
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
    ec24:	10c003cc 	andi	r3,r2,15
    ec28:	2984b03a 	or	r2,r5,r6
    ec2c:	1884703a 	and	r2,r3,r2
    ec30:	1000171e 	bne	r2,zero,ec90 <alt_avalon_dma_send+0x80>
        (len & align_mask)            ||
    ec34:	20800617 	ldw	r2,24(r4)
    ec38:	11801536 	bltu	r2,r6,ec90 <alt_avalon_dma_send+0x80>
  {
    return -EINVAL;
  }

  start = priv->tx_start;
  end   = priv->tx_end;
    ec3c:	20800217 	ldw	r2,8(r4)
        (len > priv->max_length))
  {
    return -EINVAL;
  }

  start = priv->tx_start;
    ec40:	20c00117 	ldw	r3,4(r4)
  end   = priv->tx_end;
  slot  = &priv->tx_buf[end];
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    ec44:	12000044 	addi	r8,r2,1
    ec48:	420000cc 	andi	r8,r8,3

  if (next == start)
    ec4c:	1a001226 	beq	r3,r8,ec98 <alt_avalon_dma_send+0x88>
    return -ENOSPC;
  }

  /* Fill in the descriptor */

  slot->from   = from;
    ec50:	1006913a 	slli	r3,r2,4
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
    ec54:	108000c4 	addi	r2,r2,3
    ec58:	1004913a 	slli	r2,r2,4
    return -ENOSPC;
  }

  /* Fill in the descriptor */

  slot->from   = from;
    ec5c:	20c7883a 	add	r3,r4,r3
    ec60:	19400915 	stw	r5,36(r3)
  slot->len    = len;
    ec64:	19800a15 	stw	r6,40(r3)
  slot->done   = done;
    ec68:	19c00b15 	stw	r7,44(r3)
  slot->handle = handle;
    ec6c:	d8c00217 	ldw	r3,8(sp)
    ec70:	2085883a 	add	r2,r4,r2

  priv->tx_end = next;

  if (!priv->active)
    ec74:	24000817 	ldw	r16,32(r4)
  /* Fill in the descriptor */

  slot->from   = from;
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
    ec78:	10c00015 	stw	r3,0(r2)

  priv->tx_end = next;
    ec7c:	22000215 	stw	r8,8(r4)

  if (!priv->active)
    ec80:	8000071e 	bne	r16,zero,eca0 <alt_avalon_dma_send+0x90>
  {
    priv->launch (priv);
    ec84:	20800717 	ldw	r2,28(r4)
    ec88:	103ee83a 	callr	r2
    ec8c:	00000506 	br	eca4 <alt_avalon_dma_send+0x94>

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
    ec90:	043ffa84 	movi	r16,-22
    ec94:	00000306 	br	eca4 <alt_avalon_dma_send+0x94>
  slot  = &priv->tx_buf[end];
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;

  if (next == start)
  {
    return -ENOSPC;
    ec98:	043ff904 	movi	r16,-28
    ec9c:	00000106 	br	eca4 <alt_avalon_dma_send+0x94>
  if (!priv->active)
  {
    priv->launch (priv);
  }

  return 0;
    eca0:	0021883a 	mov	r16,zero
}
    eca4:	8005883a 	mov	r2,r16
    eca8:	dfc00117 	ldw	ra,4(sp)
    ecac:	dc000017 	ldw	r16,0(sp)
    ecb0:	dec00204 	addi	sp,sp,8
    ecb4:	f800283a 	ret

0000ecb8 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
    ecb8:	defffc04 	addi	sp,sp,-16
    ecbc:	dc400215 	stw	r17,8(sp)
    ecc0:	dc000115 	stw	r16,4(sp)
    ecc4:	dfc00315 	stw	ra,12(sp)
    ecc8:	2021883a 	mov	r16,r4
    eccc:	2823883a 	mov	r17,r5
    ecd0:	3809883a 	mov	r4,r7

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    ecd4:	30800604 	addi	r2,r6,24
    ecd8:	00c40004 	movi	r3,4096
    ecdc:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    ece0:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
    ece4:	00c03f04 	movi	r3,252
    ece8:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
    ecec:	30000035 	stwio	zero,0(r6)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
    ecf0:	81c00617 	ldw	r7,24(r16)
    ecf4:	d9400417 	ldw	r5,16(sp)
    ecf8:	01800074 	movhi	r6,1
    ecfc:	d8000015 	stw	zero,0(sp)
    ed00:	31b9dd04 	addi	r6,r6,-6284
    ed04:	000ff580 	call	ff58 <alt_ic_isr_register>
    ed08:	10000a16 	blt	r2,zero,ed34 <alt_avalon_dma_init+0x7c>

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
    ed0c:	8009883a 	mov	r4,r16
    ed10:	d1601604 	addi	r5,gp,-32680
    ed14:	00101040 	call	10104 <alt_dev_llist_insert>

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
    ed18:	d1601404 	addi	r5,gp,-32688
    ed1c:	8809883a 	mov	r4,r17
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
    alt_dma_rxchan_reg (&rx->dev);
  }
}
    ed20:	dfc00317 	ldw	ra,12(sp)
    ed24:	dc400217 	ldw	r17,8(sp)
    ed28:	dc000117 	ldw	r16,4(sp)
    ed2c:	dec00404 	addi	sp,sp,16
    ed30:	00101041 	jmpi	10104 <alt_dev_llist_insert>
    ed34:	dfc00317 	ldw	ra,12(sp)
    ed38:	dc400217 	ldw	r17,8(sp)
    ed3c:	dc000117 	ldw	r16,4(sp)
    ed40:	dec00404 	addi	sp,sp,16
    ed44:	f800283a 	ret

0000ed48 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    ed48:	20800137 	ldwio	r2,4(r4)
}
    ed4c:	1144703a 	and	r2,r2,r5
    ed50:	f800283a 	ret

0000ed54 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    ed54:	20800337 	ldwio	r2,12(r4)
}
    ed58:	1144703a 	and	r2,r2,r5
    ed5c:	f800283a 	ret

0000ed60 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
    ed60:	20800437 	ldwio	r2,16(r4)
    ed64:	f800283a 	ret

0000ed68 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
    ed68:	20800537 	ldwio	r2,20(r4)
    ed6c:	f800283a 	ret

0000ed70 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    ed70:	20800237 	ldwio	r2,8(r4)
}
    ed74:	1144703a 	and	r2,r2,r5
    ed78:	f800283a 	ret

0000ed7c <altera_avalon_fifo_read_level>:
    ed7c:	20800037 	ldwio	r2,0(r4)
    ed80:	f800283a 	ret

0000ed84 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    ed84:	21000204 	addi	r4,r4,8
    ed88:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    ed8c:	20800037 	ldwio	r2,0(r4)
    ed90:	114a703a 	and	r5,r2,r5
    ed94:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
    ed98:	0085c83a 	sub	r2,zero,r2
    ed9c:	f800283a 	ret

0000eda0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    eda0:	21000304 	addi	r4,r4,12
    eda4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    eda8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    edac:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    edb0:	28c00126 	beq	r5,r3,edb8 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    edb4:	00bfff84 	movi	r2,-2
}
    edb8:	f800283a 	ret

0000edbc <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    edbc:	21000404 	addi	r4,r4,16
    edc0:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    edc4:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    edc8:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    edcc:	28c00126 	beq	r5,r3,edd4 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    edd0:	00bfff44 	movi	r2,-3
}
    edd4:	f800283a 	ret

0000edd8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    edd8:	21000504 	addi	r4,r4,20
    eddc:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    ede0:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    ede4:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    ede8:	28c00126 	beq	r5,r3,edf0 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    edec:	00bfff44 	movi	r2,-3
}
    edf0:	f800283a 	ret

0000edf4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    edf4:	defffb04 	addi	sp,sp,-20
    edf8:	dcc00315 	stw	r19,12(sp)
    edfc:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    ee00:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    ee04:	dc800215 	stw	r18,8(sp)
    ee08:	dc400115 	stw	r17,4(sp)
    ee0c:	dc000015 	stw	r16,0(sp)
    ee10:	dfc00415 	stw	ra,16(sp)
    ee14:	2021883a 	mov	r16,r4
    ee18:	3023883a 	mov	r17,r6
    ee1c:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    ee20:	000ed840 	call	ed84 <altera_avalon_fifo_clear_event>
    ee24:	10000f1e 	bne	r2,zero,ee64 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    ee28:	980b883a 	mov	r5,r19
    ee2c:	8009883a 	mov	r4,r16
    ee30:	000eda00 	call	eda0 <altera_avalon_fifo_write_ienable>
    ee34:	10000d1e 	bne	r2,zero,ee6c <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    ee38:	900b883a 	mov	r5,r18
    ee3c:	8009883a 	mov	r4,r16
    ee40:	000edbc0 	call	edbc <altera_avalon_fifo_write_almostfull>
    ee44:	10000226 	beq	r2,zero,ee50 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    ee48:	00bfff44 	movi	r2,-3
    ee4c:	00000806 	br	ee70 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    ee50:	880b883a 	mov	r5,r17
    ee54:	8009883a 	mov	r4,r16
    ee58:	000edd80 	call	edd8 <altera_avalon_fifo_write_almostempty>
    ee5c:	10000426 	beq	r2,zero,ee70 <altera_avalon_fifo_init+0x7c>
    ee60:	003ff906 	br	ee48 <__reset+0xfbf0ee48>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    ee64:	00bfffc4 	movi	r2,-1
    ee68:	00000106 	br	ee70 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    ee6c:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
    ee70:	dfc00417 	ldw	ra,16(sp)
    ee74:	dcc00317 	ldw	r19,12(sp)
    ee78:	dc800217 	ldw	r18,8(sp)
    ee7c:	dc400117 	ldw	r17,4(sp)
    ee80:	dc000017 	ldw	r16,0(sp)
    ee84:	dec00504 	addi	sp,sp,20
    ee88:	f800283a 	ret

0000ee8c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    ee8c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    ee90:	1080004c 	andi	r2,r2,1
    ee94:	1000021e 	bne	r2,zero,eea0 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    ee98:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    ee9c:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    eea0:	00bfff04 	movi	r2,-4
    }
}
    eea4:	f800283a 	ret

0000eea8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    eea8:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    eeac:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    eeb0:	1080008c 	andi	r2,r2,2
    eeb4:	1000041e 	bne	r2,zero,eec8 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    eeb8:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    eebc:	20c00037 	ldwio	r3,0(r4)
    eec0:	30c00015 	stw	r3,0(r6)
    eec4:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    eec8:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
    eecc:	f800283a 	ret

0000eed0 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    eed0:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    eed4:	1080008c 	andi	r2,r2,2
    eed8:	1000021e 	bne	r2,zero,eee4 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    eedc:	20800037 	ldwio	r2,0(r4)
    eee0:	f800283a 	ret
    }
    return 0;
    eee4:	0005883a 	mov	r2,zero
}
    eee8:	f800283a 	ret

0000eeec <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    eeec:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    eef0:	1080004c 	andi	r2,r2,1
    eef4:	1000021e 	bne	r2,zero,ef00 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    eef8:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
    eefc:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    ef00:	00bfff04 	movi	r2,-4
    }
}
    ef04:	f800283a 	ret

0000ef08 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
    ef08:	20800137 	ldwio	r2,4(r4)
    ef0c:	f800283a 	ret

0000ef10 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
    ef10:	20800037 	ldwio	r2,0(r4)
    ef14:	f800283a 	ret

0000ef18 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ef18:	20800017 	ldw	r2,0(r4)
    ef1c:	10800104 	addi	r2,r2,4
    ef20:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ef24:	18c1000c 	andi	r3,r3,1024
    ef28:	18000526 	beq	r3,zero,ef40 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ef2c:	20c00817 	ldw	r3,32(r4)
    ef30:	18c10014 	ori	r3,r3,1024
    ef34:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ef38:	20000915 	stw	zero,36(r4)
    ef3c:	00000606 	br	ef58 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ef40:	20800917 	ldw	r2,36(r4)
    ef44:	00e00034 	movhi	r3,32768
    ef48:	18ffff04 	addi	r3,r3,-4
    ef4c:	18800236 	bltu	r3,r2,ef58 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
    ef50:	10800044 	addi	r2,r2,1
    ef54:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ef58:	d0a03c17 	ldw	r2,-32528(gp)
    ef5c:	f800283a 	ret

0000ef60 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ef60:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef64:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ef68:	023fff44 	movi	r8,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ef6c:	39800104 	addi	r6,r7,4
    ef70:	30800037 	ldwio	r2,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ef74:	10c0c00c 	andi	r3,r2,768
    ef78:	18003226 	beq	r3,zero,f044 <altera_avalon_jtag_uart_irq+0xe4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ef7c:	10c0400c 	andi	r3,r2,256
    ef80:	18001826 	beq	r3,zero,efe4 <altera_avalon_jtag_uart_irq+0x84>
    ef84:	00c00074 	movhi	r3,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef88:	21400a17 	ldw	r5,40(r4)
        if (next == sp->rx_out)
    ef8c:	22800b17 	ldw	r10,44(r4)
    ef90:	29400044 	addi	r5,r5,1
    ef94:	2941ffcc 	andi	r5,r5,2047
    ef98:	2a800b26 	beq	r5,r10,efc8 <altera_avalon_jtag_uart_irq+0x68>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ef9c:	38c00037 	ldwio	r3,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    efa0:	1960000c 	andi	r5,r3,32768
    efa4:	28000826 	beq	r5,zero,efc8 <altera_avalon_jtag_uart_irq+0x68>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    efa8:	21400a17 	ldw	r5,40(r4)
    efac:	214b883a 	add	r5,r4,r5
    efb0:	28c00e05 	stb	r3,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    efb4:	21400a17 	ldw	r5,40(r4)
    efb8:	29400044 	addi	r5,r5,1
    efbc:	2941ffcc 	andi	r5,r5,2047
    efc0:	21400a15 	stw	r5,40(r4)
    efc4:	003ff006 	br	ef88 <__reset+0xfbf0ef88>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    efc8:	18ffffec 	andhi	r3,r3,65535
    efcc:	18000526 	beq	r3,zero,efe4 <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    efd0:	20c00817 	ldw	r3,32(r4)
    efd4:	1a46703a 	and	r3,r3,r9
    efd8:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    efdc:	30c00035 	stwio	r3,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    efe0:	30c00037 	ldwio	r3,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    efe4:	10c0800c 	andi	r3,r2,512
    efe8:	183fe126 	beq	r3,zero,ef70 <__reset+0xfbf0ef70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    efec:	1004d43a 	srli	r2,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    eff0:	103fdf26 	beq	r2,zero,ef70 <__reset+0xfbf0ef70>
    eff4:	21400d17 	ldw	r5,52(r4)
    eff8:	20c00c17 	ldw	r3,48(r4)
    effc:	28c00a26 	beq	r5,r3,f028 <altera_avalon_jtag_uart_irq+0xc8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f000:	20c00d17 	ldw	r3,52(r4)
    f004:	20c7883a 	add	r3,r4,r3
    f008:	18c20e07 	ldb	r3,2104(r3)
    f00c:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f010:	20c00d17 	ldw	r3,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f014:	10bfffc4 	addi	r2,r2,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f018:	18c00044 	addi	r3,r3,1
    f01c:	18c1ffcc 	andi	r3,r3,2047
    f020:	20c00d15 	stw	r3,52(r4)
    f024:	003ff206 	br	eff0 <__reset+0xfbf0eff0>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f028:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f02c:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f030:	1204703a 	and	r2,r2,r8
    f034:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f038:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f03c:	30800037 	ldwio	r2,0(r6)
    f040:	003fcb06 	br	ef70 <__reset+0xfbf0ef70>
    f044:	f800283a 	ret

0000f048 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f048:	defffd04 	addi	sp,sp,-12
    f04c:	dc000115 	stw	r16,4(sp)
    f050:	2021883a 	mov	r16,r4
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f054:	80c00017 	ldw	r3,0(r16)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f058:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f05c:	dfc00215 	stw	ra,8(sp)
    f060:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f064:	80800815 	stw	r2,32(r16)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f068:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f06c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f070:	01800074 	movhi	r6,1
    f074:	800f883a 	mov	r7,r16
    f078:	31bbd804 	addi	r6,r6,-4256
    f07c:	d8000015 	stw	zero,0(sp)
    f080:	000ff580 	call	ff58 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f084:	d1603c17 	ldw	r5,-32528(gp)
    f088:	01800074 	movhi	r6,1
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f08c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f090:	800f883a 	mov	r7,r16
    f094:	31bbc604 	addi	r6,r6,-4328
    f098:	81000204 	addi	r4,r16,8
    f09c:	000ffd00 	call	ffd0 <alt_alarm_start>
    f0a0:	1000030e 	bge	r2,zero,f0b0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f0a4:	00a00034 	movhi	r2,32768
    f0a8:	10bfffc4 	addi	r2,r2,-1
    f0ac:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f0b0:	dfc00217 	ldw	ra,8(sp)
    f0b4:	dc000117 	ldw	r16,4(sp)
    f0b8:	dec00304 	addi	sp,sp,12
    f0bc:	f800283a 	ret

0000f0c0 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f0c0:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
    f0c4:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f0c8:	20800d17 	ldw	r2,52(r4)
    f0cc:	11800626 	beq	r2,r6,f0e8 <altera_avalon_jtag_uart_close+0x28>
    f0d0:	20c00917 	ldw	r3,36(r4)
    f0d4:	20800117 	ldw	r2,4(r4)
    f0d8:	1880032e 	bgeu	r3,r2,f0e8 <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
    f0dc:	283ffa26 	beq	r5,zero,f0c8 <__reset+0xfbf0f0c8>
      return -EWOULDBLOCK; 
    f0e0:	00bffd44 	movi	r2,-11
    f0e4:	f800283a 	ret
    }
  }

  return 0;
    f0e8:	0005883a 	mov	r2,zero
}
    f0ec:	f800283a 	ret

0000f0f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f0f0:	defff504 	addi	sp,sp,-44
    f0f4:	df000915 	stw	fp,36(sp)
    f0f8:	ddc00815 	stw	r23,32(sp)
    f0fc:	dd800715 	stw	r22,28(sp)
    f100:	dd000515 	stw	r20,20(sp)
    f104:	dc800315 	stw	r18,12(sp)
    f108:	dc400215 	stw	r17,8(sp)
    f10c:	3829883a 	mov	r20,r7
    f110:	dfc00a15 	stw	ra,40(sp)
    f114:	dd400615 	stw	r21,24(sp)
    f118:	dcc00415 	stw	r19,16(sp)
    f11c:	dc000115 	stw	r16,4(sp)
    f120:	2023883a 	mov	r17,r4
    f124:	282d883a 	mov	r22,r5
    f128:	3025883a 	mov	r18,r6
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f12c:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f130:	27000e04 	addi	fp,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f134:	39d0000c 	andi	r7,r7,16384
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f138:	0480300e 	bge	zero,r18,f1fc <altera_avalon_jtag_uart_read+0x10c>
    f13c:	b007883a 	mov	r3,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f140:	8d400a17 	ldw	r21,40(r17)
      out = sp->rx_out;
    f144:	8cc00b17 	ldw	r19,44(r17)

      if (in >= out)
    f148:	acc00236 	bltu	r21,r19,f154 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f14c:	ace1c83a 	sub	r16,r21,r19
    f150:	00000106 	br	f158 <altera_avalon_jtag_uart_read+0x68>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f154:	bce1c83a 	sub	r16,r23,r19

      if (n == 0)
    f158:	80000e26 	beq	r16,zero,f194 <altera_avalon_jtag_uart_read+0xa4>
    f15c:	9400012e 	bgeu	r18,r16,f164 <altera_avalon_jtag_uart_read+0x74>
    f160:	9021883a 	mov	r16,r18
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f164:	800d883a 	mov	r6,r16
    f168:	1809883a 	mov	r4,r3
    f16c:	e4cb883a 	add	r5,fp,r19
    f170:	d9c00015 	stw	r7,0(sp)
    f174:	00076640 	call	7664 <memcpy>
      ptr   += n;
    f178:	1407883a 	add	r3,r2,r16
      space -= n;
    f17c:	9425c83a 	sub	r18,r18,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f180:	9c21883a 	add	r16,r19,r16
    f184:	8401ffcc 	andi	r16,r16,2047
    f188:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
    f18c:	d9c00017 	ldw	r7,0(sp)
    f190:	04bfeb16 	blt	zero,r18,f140 <__reset+0xfbf0f140>

    /* If we read any data then return it */
    if (ptr != buffer)
    f194:	1d80091e 	bne	r3,r22,f1bc <altera_avalon_jtag_uart_read+0xcc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f198:	3800181e 	bne	r7,zero,f1fc <altera_avalon_jtag_uart_read+0x10c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f19c:	88800a17 	ldw	r2,40(r17)
    f1a0:	a880031e 	bne	r21,r2,f1b0 <altera_avalon_jtag_uart_read+0xc0>
    f1a4:	88c00917 	ldw	r3,36(r17)
    f1a8:	88800117 	ldw	r2,4(r17)
    f1ac:	18bffb36 	bltu	r3,r2,f19c <__reset+0xfbf0f19c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f1b0:	88800a17 	ldw	r2,40(r17)
    f1b4:	a8bfe01e 	bne	r21,r2,f138 <__reset+0xfbf0f138>
    f1b8:	00001006 	br	f1fc <altera_avalon_jtag_uart_read+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1bc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1c0:	00bfff84 	movi	r2,-2
    f1c4:	208a703a 	and	r5,r4,r2
    f1c8:	2801703a 	wrctl	status,r5

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f1cc:	89400817 	ldw	r5,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1d0:	89800017 	ldw	r6,0(r17)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f1d4:	29400054 	ori	r5,r5,1
    f1d8:	89400815 	stw	r5,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1dc:	31400135 	stwio	r5,4(r6)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    f1e0:	000b303a 	rdctl	r5,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    f1e4:	2884703a 	and	r2,r5,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    f1e8:	2100004c 	andi	r4,r4,1
    f1ec:	2084b03a 	or	r2,r4,r2
    f1f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    f1f4:	1d85c83a 	sub	r2,r3,r22
    f1f8:	00000506 	br	f210 <altera_avalon_jtag_uart_read+0x120>
  else if (flags & O_NONBLOCK)
    f1fc:	a510000c 	andi	r20,r20,16384
    f200:	a0000226 	beq	r20,zero,f20c <altera_avalon_jtag_uart_read+0x11c>
    return -EWOULDBLOCK;
    f204:	00bffd44 	movi	r2,-11
    f208:	00000106 	br	f210 <altera_avalon_jtag_uart_read+0x120>
  else
    return -EIO;
    f20c:	00bffec4 	movi	r2,-5
}
    f210:	dfc00a17 	ldw	ra,40(sp)
    f214:	df000917 	ldw	fp,36(sp)
    f218:	ddc00817 	ldw	r23,32(sp)
    f21c:	dd800717 	ldw	r22,28(sp)
    f220:	dd400617 	ldw	r21,24(sp)
    f224:	dd000517 	ldw	r20,20(sp)
    f228:	dcc00417 	ldw	r19,16(sp)
    f22c:	dc800317 	ldw	r18,12(sp)
    f230:	dc400217 	ldw	r17,8(sp)
    f234:	dc000117 	ldw	r16,4(sp)
    f238:	dec00b04 	addi	sp,sp,44
    f23c:	f800283a 	ret

0000f240 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f240:	defff304 	addi	sp,sp,-52
    f244:	df000b15 	stw	fp,44(sp)
    f248:	ddc00a15 	stw	r23,40(sp)
    f24c:	dd800915 	stw	r22,36(sp)
    f250:	dd400815 	stw	r21,32(sp)
    f254:	dcc00615 	stw	r19,24(sp)
    f258:	dc800515 	stw	r18,20(sp)
    f25c:	dc400415 	stw	r17,16(sp)
    f260:	382f883a 	mov	r23,r7
    f264:	dfc00c15 	stw	ra,48(sp)
    f268:	dd000715 	stw	r20,28(sp)
    f26c:	dc000315 	stw	r16,12(sp)
    f270:	2025883a 	mov	r18,r4
    f274:	282b883a 	mov	r21,r5
    f278:	3027883a 	mov	r19,r6
    f27c:	2823883a 	mov	r17,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f280:	002d883a 	mov	r22,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f284:	073fff84 	movi	fp,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f288:	39d0000c 	andi	r7,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f28c:	22020e04 	addi	r8,r4,2104
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f290:	0241ffc4 	movi	r9,2047
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f294:	04c01d0e 	bge	zero,r19,f30c <altera_avalon_jtag_uart_write+0xcc>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f298:	95000c17 	ldw	r20,48(r18)
      out = sp->tx_out;
    f29c:	95800d17 	ldw	r22,52(r18)

      if (in < out)
    f2a0:	a580022e 	bgeu	r20,r22,f2ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f2a4:	b0ffffc4 	addi	r3,r22,-1
    f2a8:	00000206 	br	f2b4 <altera_avalon_jtag_uart_write+0x74>
      else if (out > 0)
    f2ac:	b0000326 	beq	r22,zero,f2bc <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f2b0:	00c20004 	movi	r3,2048
    f2b4:	1d21c83a 	sub	r16,r3,r20
    f2b8:	00000106 	br	f2c0 <altera_avalon_jtag_uart_write+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f2bc:	4d21c83a 	sub	r16,r9,r20

      if (n == 0)
    f2c0:	80001226 	beq	r16,zero,f30c <altera_avalon_jtag_uart_write+0xcc>
    f2c4:	9c00012e 	bgeu	r19,r16,f2cc <altera_avalon_jtag_uart_write+0x8c>
    f2c8:	9821883a 	mov	r16,r19
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f2cc:	800d883a 	mov	r6,r16
    f2d0:	880b883a 	mov	r5,r17
    f2d4:	4509883a 	add	r4,r8,r20
      ptr   += n;
    f2d8:	8c23883a 	add	r17,r17,r16
      count -= n;
    f2dc:	9c27c83a 	sub	r19,r19,r16

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2e0:	a421883a 	add	r16,r20,r16
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f2e4:	d9c00015 	stw	r7,0(sp)
    f2e8:	da000115 	stw	r8,4(sp)
    f2ec:	da400215 	stw	r9,8(sp)
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2f0:	8401ffcc 	andi	r16,r16,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f2f4:	00076640 	call	7664 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2f8:	da400217 	ldw	r9,8(sp)
    f2fc:	94000c15 	stw	r16,48(r18)
    f300:	da000117 	ldw	r8,4(sp)
    f304:	d9c00017 	ldw	r7,0(sp)
    f308:	003fe206 	br	f294 <__reset+0xfbf0f294>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f30c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f310:	1706703a 	and	r3,r2,fp
    f314:	1801703a 	wrctl	status,r3
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f318:	90c00817 	ldw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f31c:	91000017 	ldw	r4,0(r18)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f320:	18c00094 	ori	r3,r3,2
    f324:	90c00815 	stw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f328:	20c00135 	stwio	r3,4(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    f32c:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    f330:	1f06703a 	and	r3,r3,fp
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    f334:	1080004c 	andi	r2,r2,1
    f338:	10c4b03a 	or	r2,r2,r3
    f33c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f340:	04c0080e 	bge	zero,r19,f364 <altera_avalon_jtag_uart_write+0x124>
    {
      if (flags & O_NONBLOCK)
    f344:	3800101e 	bne	r7,zero,f388 <altera_avalon_jtag_uart_write+0x148>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f348:	90c00d17 	ldw	r3,52(r18)
    f34c:	90800917 	ldw	r2,36(r18)
    f350:	b0c0021e 	bne	r22,r3,f35c <altera_avalon_jtag_uart_write+0x11c>
    f354:	90c00117 	ldw	r3,4(r18)
    f358:	10fffb36 	bltu	r2,r3,f348 <__reset+0xfbf0f348>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f35c:	103fcd26 	beq	r2,zero,f294 <__reset+0xfbf0f294>
    f360:	00000606 	br	f37c <altera_avalon_jtag_uart_write+0x13c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f364:	8d400226 	beq	r17,r21,f370 <altera_avalon_jtag_uart_write+0x130>
    return ptr - start;
    f368:	8d45c83a 	sub	r2,r17,r21
    f36c:	00000806 	br	f390 <altera_avalon_jtag_uart_write+0x150>
  else if (flags & O_NONBLOCK)
    f370:	bdd0000c 	andi	r23,r23,16384
    f374:	b8000226 	beq	r23,zero,f380 <altera_avalon_jtag_uart_write+0x140>
    f378:	00000406 	br	f38c <altera_avalon_jtag_uart_write+0x14c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f37c:	8d7ffa1e 	bne	r17,r21,f368 <__reset+0xfbf0f368>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f380:	00bffec4 	movi	r2,-5
    f384:	00000206 	br	f390 <altera_avalon_jtag_uart_write+0x150>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f388:	8d7ff71e 	bne	r17,r21,f368 <__reset+0xfbf0f368>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f38c:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f390:	dfc00c17 	ldw	ra,48(sp)
    f394:	df000b17 	ldw	fp,44(sp)
    f398:	ddc00a17 	ldw	r23,40(sp)
    f39c:	dd800917 	ldw	r22,36(sp)
    f3a0:	dd400817 	ldw	r21,32(sp)
    f3a4:	dd000717 	ldw	r20,28(sp)
    f3a8:	dcc00617 	ldw	r19,24(sp)
    f3ac:	dc800517 	ldw	r18,20(sp)
    f3b0:	dc400417 	ldw	r17,16(sp)
    f3b4:	dc000317 	ldw	r16,12(sp)
    f3b8:	dec00d04 	addi	sp,sp,52
    f3bc:	f800283a 	ret

0000f3c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f3c0:	defffd04 	addi	sp,sp,-12
    f3c4:	dfc00215 	stw	ra,8(sp)
    f3c8:	dc400115 	stw	r17,4(sp)
    f3cc:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f3d0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f3d4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3d8:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3dc:	043fff84 	movi	r16,-2
    f3e0:	8c04703a 	and	r2,r17,r16
    f3e4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f3e8:	00102180 	call	10218 <alt_tick>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    f3ec:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    f3f0:	1420703a 	and	r16,r2,r16
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    f3f4:	8c40004c 	andi	r17,r17,1
    f3f8:	8c20b03a 	or	r16,r17,r16
    f3fc:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f400:	dfc00217 	ldw	ra,8(sp)
    f404:	dc400117 	ldw	r17,4(sp)
    f408:	dc000017 	ldw	r16,0(sp)
    f40c:	dec00304 	addi	sp,sp,12
    f410:	f800283a 	ret

0000f414 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f414:	d0e03c17 	ldw	r3,-32528(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f418:	defffe04 	addi	sp,sp,-8
    f41c:	dfc00115 	stw	ra,4(sp)
    f420:	2005883a 	mov	r2,r4
    f424:	2809883a 	mov	r4,r5
    f428:	300b883a 	mov	r5,r6
    f42c:	1800011e 	bne	r3,zero,f434 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f430:	d1e03c15 	stw	r7,-32528(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f434:	00c001c4 	movi	r3,7
    f438:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f43c:	01800074 	movhi	r6,1
    f440:	d8000015 	stw	zero,0(sp)
    f444:	100f883a 	mov	r7,r2
    f448:	31bcf004 	addi	r6,r6,-3136
    f44c:	000ff580 	call	ff58 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f450:	dfc00117 	ldw	ra,4(sp)
    f454:	dec00204 	addi	sp,sp,8
    f458:	f800283a 	ret

0000f45c <altera_avalon_uart_irq>:
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    f45c:	20c00017 	ldw	r3,0(r4)
    f460:	18c00204 	addi	r3,r3,8
    f464:	18800037 	ldwio	r2,0(r3)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    f468:	18000035 	stwio	zero,0(r3)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    f46c:	18c00037 	ldwio	r3,0(r3)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    f470:	10c0200c 	andi	r3,r2,128
    f474:	18001926 	beq	r3,zero,f4dc <altera_avalon_uart_irq+0x80>
{
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    f478:	10c000cc 	andi	r3,r2,3
    f47c:	1800171e 	bne	r3,zero,f4dc <altera_avalon_uart_irq+0x80>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    f480:	20c00317 	ldw	r3,12(r4)
    f484:	20c00217 	ldw	r3,8(r4)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    f488:	20c00317 	ldw	r3,12(r4)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    f48c:	21800017 	ldw	r6,0(r4)
    f490:	21400317 	ldw	r5,12(r4)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    f494:	18c00044 	addi	r3,r3,1
    f498:	18c00fcc 	andi	r3,r3,63

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    f49c:	31800037 	ldwio	r6,0(r6)
    f4a0:	214b883a 	add	r5,r4,r5
    f4a4:	29400704 	addi	r5,r5,28
    f4a8:	29800005 	stb	r6,0(r5)

  sp->rx_end = next;
    f4ac:	20c00315 	stw	r3,12(r4)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    f4b0:	20c00317 	ldw	r3,12(r4)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    f4b4:	21400217 	ldw	r5,8(r4)
    f4b8:	18c00044 	addi	r3,r3,1
    f4bc:	18c00fcc 	andi	r3,r3,63
    f4c0:	1940061e 	bne	r3,r5,f4dc <altera_avalon_uart_irq+0x80>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    f4c4:	21400117 	ldw	r5,4(r4)
    f4c8:	00ffdfc4 	movi	r3,-129
    f4cc:	28c6703a 	and	r3,r5,r3
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    f4d0:	21400017 	ldw	r5,0(r4)
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    f4d4:	20c00115 	stw	r3,4(r4)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    f4d8:	28c00335 	stwio	r3,12(r5)
  {
    altera_avalon_uart_rxirq(sp, status);
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    f4dc:	10c1100c 	andi	r3,r2,1088
    f4e0:	18002a26 	beq	r3,zero,f58c <altera_avalon_uart_irq+0x130>
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    f4e4:	21400417 	ldw	r5,16(r4)
    f4e8:	20c00517 	ldw	r3,20(r4)
    f4ec:	28c01d26 	beq	r5,r3,f564 <altera_avalon_uart_irq+0x108>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    f4f0:	20c00617 	ldw	r3,24(r4)
    f4f4:	21400017 	ldw	r5,0(r4)
    f4f8:	18c0008c 	andi	r3,r3,2
    f4fc:	18000226 	beq	r3,zero,f508 <altera_avalon_uart_irq+0xac>
    f500:	1082000c 	andi	r2,r2,2048
    f504:	10001026 	beq	r2,zero,f548 <altera_avalon_uart_irq+0xec>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    f508:	20800417 	ldw	r2,16(r4)
    f50c:	20800517 	ldw	r2,20(r4)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    f510:	20800417 	ldw	r2,16(r4)
    f514:	2085883a 	add	r2,r4,r2
    f518:	10801704 	addi	r2,r2,92
    f51c:	10800003 	ldbu	r2,0(r2)
    f520:	10803fcc 	andi	r2,r2,255
    f524:	28800135 	stwio	r2,4(r5)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    f528:	20800417 	ldw	r2,16(r4)
    f52c:	10800044 	addi	r2,r2,1
    f530:	20800415 	stw	r2,16(r4)
    f534:	10800fcc 	andi	r2,r2,63
    f538:	20800415 	stw	r2,16(r4)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    f53c:	20800117 	ldw	r2,4(r4)
    f540:	10801014 	ori	r2,r2,64
    f544:	00000606 	br	f560 <altera_avalon_uart_irq+0x104>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    f548:	28800237 	ldwio	r2,8(r5)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    f54c:	1082000c 	andi	r2,r2,2048
    f550:	1000041e 	bne	r2,zero,f564 <altera_avalon_uart_irq+0x108>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    f554:	20c00117 	ldw	r3,4(r4)
    f558:	00bfefc4 	movi	r2,-65
    f55c:	1884703a 	and	r2,r3,r2
    f560:	20800115 	stw	r2,4(r4)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    f564:	20c00417 	ldw	r3,16(r4)
    f568:	20800517 	ldw	r2,20(r4)
    f56c:	1880041e 	bne	r3,r2,f580 <altera_avalon_uart_irq+0x124>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    f570:	20c00117 	ldw	r3,4(r4)
    f574:	00beefc4 	movi	r2,-1089
    f578:	1884703a 	and	r2,r3,r2
    f57c:	20800115 	stw	r2,4(r4)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    f580:	20800017 	ldw	r2,0(r4)
    f584:	20c00117 	ldw	r3,4(r4)
    f588:	10c00335 	stwio	r3,12(r2)
    f58c:	f800283a 	ret

0000f590 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    f590:	200f883a 	mov	r7,r4
  void* base = sp->base;
    f594:	38c00017 	ldw	r3,0(r7)
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    f598:	defffe04 	addi	sp,sp,-8
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    f59c:	00832004 	movi	r2,3200
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    f5a0:	2809883a 	mov	r4,r5
    f5a4:	dfc00115 	stw	ra,4(sp)
    f5a8:	300b883a 	mov	r5,r6
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    f5ac:	38800115 	stw	r2,4(r7)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    f5b0:	18800335 	stwio	r2,12(r3)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    f5b4:	01800074 	movhi	r6,1
    f5b8:	d8000015 	stw	zero,0(sp)
    f5bc:	31bd1704 	addi	r6,r6,-2980
    f5c0:	000ff580 	call	ff58 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    f5c4:	dfc00117 	ldw	ra,4(sp)
    f5c8:	dec00204 	addi	sp,sp,8
    f5cc:	f800283a 	ret

0000f5d0 <altera_avalon_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    if (flags & O_NONBLOCK) {
    f5d0:	2950000c 	andi	r5,r5,16384
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    f5d4:	20c00417 	ldw	r3,16(r4)
    f5d8:	20800517 	ldw	r2,20(r4)
    f5dc:	18800326 	beq	r3,r2,f5ec <altera_avalon_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    f5e0:	283ffc26 	beq	r5,zero,f5d4 <__reset+0xfbf0f5d4>
      return -EWOULDBLOCK; 
    f5e4:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    f5e8:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f5ec:	0005883a 	mov	r2,zero
    f5f0:	f800283a 	ret

0000f5f4 <alt_onchip_flash_read>:
{
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
    f5f4:	20800b17 	ldw	r2,44(r4)
    f5f8:	2880140e 	bge	r5,r2,f64c <alt_onchip_flash_read+0x58>
    f5fc:	29c7883a 	add	r3,r5,r7
    f600:	10c01216 	blt	r2,r3,f64c <alt_onchip_flash_read+0x58>
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
    f604:	defffe04 	addi	sp,sp,-8
    f608:	dc000015 	stw	r16,0(sp)
    f60c:	2021883a 	mov	r16,r4
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
    f610:	80800a17 	ldw	r2,40(r16)
    f614:	3009883a 	mov	r4,r6
    f618:	380d883a 	mov	r6,r7
    f61c:	114b883a 	add	r5,r2,r5
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
    f620:	dfc00115 	stw	ra,4(sp)
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
    f624:	00076640 	call	7664 <memcpy>

    if (NULL != flash->csr_base) {
    f628:	80802f17 	ldw	r2,188(r16)
    f62c:	1000021e 	bne	r2,zero,f638 <alt_onchip_flash_read+0x44>
    int           offset,
    void          *dest_addr,
    int           length
)
{
    int ret_code = 0;
    f630:	0005883a 	mov	r2,zero
    f634:	00000706 	br	f654 <alt_onchip_flash_read+0x60>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);

    if (NULL != flash->csr_base) {
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
    f638:	10800037 	ldwio	r2,0(r2)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
    f63c:	1080010c 	andi	r2,r2,4
    f640:	103ffb1e 	bne	r2,zero,f630 <__reset+0xfbf0f630>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
    f644:	00bffec4 	movi	r2,-5
    f648:	00000206 	br	f654 <alt_onchip_flash_read+0x60>
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    f64c:	00bffc84 	movi	r2,-14
    f650:	f800283a 	ret
            /* Read failed.  Return error.*/
            ret_code = -EIO;
        }
    }
    return ret_code;
}
    f654:	dfc00117 	ldw	ra,4(sp)
    f658:	dc000017 	ldw	r16,0(sp)
    f65c:	dec00204 	addi	sp,sp,8
    f660:	f800283a 	ret

0000f664 <alt_onchip_flash_get_info>:
{
    int ret_code = 0;

    alt_flash_dev* flash = (alt_flash_dev*)fd;

    if (NULL != number_of_regions)
    f664:	30000226 	beq	r6,zero,f670 <alt_onchip_flash_get_info+0xc>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
    f668:	20800c17 	ldw	r2,48(r4)
    f66c:	30800015 	stw	r2,0(r6)
    }

    if (!flash->number_of_regions)
    f670:	20800c17 	ldw	r2,48(r4)
    f674:	10000626 	beq	r2,zero,f690 <alt_onchip_flash_get_info+0x2c>
    {
        ret_code = -ENOMEM;
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    f678:	00c00204 	movi	r3,8
    f67c:	18800616 	blt	r3,r2,f698 <alt_onchip_flash_get_info+0x34>
    {
        ret_code = -EFAULT;
    }
    else
    {
        if (NULL != info)
    f680:	28000726 	beq	r5,zero,f6a0 <alt_onchip_flash_get_info+0x3c>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
    f684:	21000d04 	addi	r4,r4,52
    f688:	29000015 	stw	r4,0(r5)
    f68c:	00000406 	br	f6a0 <alt_onchip_flash_get_info+0x3c>
        *number_of_regions = flash->number_of_regions;
    }

    if (!flash->number_of_regions)
    {
        ret_code = -ENOMEM;
    f690:	00bffd04 	movi	r2,-12
    f694:	f800283a 	ret
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    {
        ret_code = -EFAULT;
    f698:	00bffc84 	movi	r2,-14
    f69c:	f800283a 	ret
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
    int ret_code = 0;
    f6a0:	0005883a 	mov	r2,zero
            *info = &flash->region_info[0];
        }
    }

    return ret_code;
}
    f6a4:	f800283a 	ret

0000f6a8 <alt_onchip_flash_write>:
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    f6a8:	20800b17 	ldw	r2,44(r4)
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
    f6ac:	defff204 	addi	sp,sp,-56
    f6b0:	dfc00d15 	stw	ra,52(sp)
    f6b4:	df000c15 	stw	fp,48(sp)
    f6b8:	ddc00b15 	stw	r23,44(sp)
    f6bc:	dd800a15 	stw	r22,40(sp)
    f6c0:	dd400915 	stw	r21,36(sp)
    f6c4:	dd000815 	stw	r20,32(sp)
    f6c8:	dcc00715 	stw	r19,28(sp)
    f6cc:	dc800615 	stw	r18,24(sp)
    f6d0:	dc400515 	stw	r17,20(sp)
    f6d4:	dc000415 	stw	r16,16(sp)
    f6d8:	d9c00215 	stw	r7,8(sp)
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    f6dc:	2880460e 	bge	r5,r2,f7f8 <alt_onchip_flash_write+0x150>
    f6e0:	1145c83a 	sub	r2,r2,r5
    f6e4:	2827883a 	mov	r19,r5
    f6e8:	11c04316 	blt	r2,r7,f7f8 <alt_onchip_flash_write+0x150>
    f6ec:	2023883a 	mov	r17,r4
    f6f0:	3029883a 	mov	r20,r6
    f6f4:	27001004 	addi	fp,r4,64
    f6f8:	382d883a 	mov	r22,r7
    f6fc:	2821883a 	mov	r16,r5
    f700:	d8000115 	stw	zero,4(sp)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    f704:	88800c17 	ldw	r2,48(r17)
    f708:	d8c00117 	ldw	r3,4(sp)
    f70c:	1880320e 	bge	r3,r2,f7d8 <alt_onchip_flash_write+0x130>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
    f710:	e4bffd17 	ldw	r18,-12(fp)
    f714:	84802a16 	blt	r16,r18,f7c0 <alt_onchip_flash_write+0x118>
    f718:	e0bffe17 	ldw	r2,-8(fp)
    f71c:	9085883a 	add	r2,r18,r2
    f720:	8080270e 	bge	r16,r2,f7c0 <alt_onchip_flash_write+0x118>
    f724:	002f883a 	mov	r23,zero
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
    f728:	e0bfff17 	ldw	r2,-4(fp)
    f72c:	b880240e 	bge	r23,r2,f7c0 <alt_onchip_flash_write+0x118>
            {
                if ((offset >= current_offset ) &&
    f730:	84801f16 	blt	r16,r18,f7b0 <alt_onchip_flash_write+0x108>
                    (offset < (current_offset +
    f734:	e0800017 	ldw	r2,0(fp)
    f738:	9085883a 	add	r2,r18,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
    f73c:	80801c0e 	bge	r16,r2,f7b0 <alt_onchip_flash_write+0x108>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
    f740:	1405c83a 	sub	r2,r2,r16
                    data_to_write = MIN(data_to_write, length);
    f744:	b02b883a 	mov	r21,r22
    f748:	1580010e 	bge	r2,r22,f750 <alt_onchip_flash_write+0xa8>
    f74c:	102b883a 	mov	r21,r2
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
    f750:	89400a17 	ldw	r5,40(r17)
    f754:	a80d883a 	mov	r6,r21
    f758:	a009883a 	mov	r4,r20
    f75c:	2c0b883a 	add	r5,r5,r16
    f760:	00102d00 	call	102d0 <memcmp>
    f764:	10001b26 	beq	r2,zero,f7d4 <alt_onchip_flash_write+0x12c>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
    f768:	88800817 	ldw	r2,32(r17)
    f76c:	900b883a 	mov	r5,r18
    f770:	8809883a 	mov	r4,r17
    f774:	103ee83a 	callr	r2

                        if (!ret_code)
    f778:	1000181e 	bne	r2,zero,f7dc <alt_onchip_flash_write+0x134>
                        {
                            ret_code = (*flash->dev.write_block)(
    f77c:	dd400015 	stw	r21,0(sp)
    f780:	88800917 	ldw	r2,36(r17)
    f784:	a00f883a 	mov	r7,r20
    f788:	800d883a 	mov	r6,r16
    f78c:	900b883a 	mov	r5,r18
    f790:	8809883a 	mov	r4,r17
    f794:	103ee83a 	callr	r2
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
    f798:	b5401026 	beq	r22,r21,f7dc <alt_onchip_flash_write+0x134>
    f79c:	10000f1e 	bne	r2,zero,f7dc <alt_onchip_flash_write+0x134>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
                    offset = current_offset + flash->dev.region_info[i].block_size;
    f7a0:	e4000017 	ldw	r16,0(fp)
                    if ((length == data_to_write) || ret_code)
                    {
                        goto finished;
                    }

                    length -= data_to_write;
    f7a4:	b56dc83a 	sub	r22,r22,r21
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
    f7a8:	a569883a 	add	r20,r20,r21
                    {
                        goto finished;
                    }

                    length -= data_to_write;
                    offset = current_offset + flash->dev.region_info[i].block_size;
    f7ac:	9421883a 	add	r16,r18,r16
                    src_addr = (alt_u8*)src_addr + data_to_write;
                }
                current_offset += flash->dev.region_info[i].block_size;
    f7b0:	e0800017 	ldw	r2,0(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
    f7b4:	bdc00044 	addi	r23,r23,1

                    length -= data_to_write;
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
                }
                current_offset += flash->dev.region_info[i].block_size;
    f7b8:	90a5883a 	add	r18,r18,r2
    f7bc:	003fda06 	br	f728 <__reset+0xfbf0f728>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    f7c0:	d8c00117 	ldw	r3,4(sp)
    f7c4:	e7000404 	addi	fp,fp,16
    f7c8:	18c00044 	addi	r3,r3,1
    f7cc:	d8c00115 	stw	r3,4(sp)
    f7d0:	003fcc06 	br	f704 <__reset+0xfbf0f704>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
    f7d4:	b57ff21e 	bne	r22,r21,f7a0 <__reset+0xfbf0f7a0>
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    f7d8:	0005883a 	mov	r2,zero
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
    f7dc:	89000a17 	ldw	r4,40(r17)
    f7e0:	d9400217 	ldw	r5,8(sp)
    f7e4:	d8800315 	stw	r2,12(sp)
    f7e8:	24c9883a 	add	r4,r4,r19
    f7ec:	00100dc0 	call	100dc <alt_dcache_flush>
    return ret_code;
    f7f0:	d8800317 	ldw	r2,12(sp)
    f7f4:	00000106 	br	f7fc <alt_onchip_flash_write+0x154>
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    {
        return -EFAULT;
    f7f8:	00bffc84 	movi	r2,-14
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
    return ret_code;
}
    f7fc:	dfc00d17 	ldw	ra,52(sp)
    f800:	df000c17 	ldw	fp,48(sp)
    f804:	ddc00b17 	ldw	r23,44(sp)
    f808:	dd800a17 	ldw	r22,40(sp)
    f80c:	dd400917 	ldw	r21,36(sp)
    f810:	dd000817 	ldw	r20,32(sp)
    f814:	dcc00717 	ldw	r19,28(sp)
    f818:	dc800617 	ldw	r18,24(sp)
    f81c:	dc400517 	ldw	r17,20(sp)
    f820:	dc000417 	ldw	r16,16(sp)
    f824:	dec00e04 	addi	sp,sp,56
    f828:	f800283a 	ret

0000f82c <altera_onchip_flash_init>:

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];

    if (flash->csr_base != NULL) {
    f82c:	20802f17 	ldw	r2,188(r4)
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
    f830:	defff704 	addi	sp,sp,-36
    f834:	dc800215 	stw	r18,8(sp)
    f838:	dc000015 	stw	r16,0(sp)
    f83c:	dfc00815 	stw	ra,32(sp)
    f840:	ddc00715 	stw	r23,28(sp)
    f844:	dd800615 	stw	r22,24(sp)
    f848:	dd400515 	stw	r21,20(sp)
    f84c:	dd000415 	stw	r20,16(sp)
    f850:	dcc00315 	stw	r19,12(sp)
    f854:	dc400115 	stw	r17,4(sp)
    f858:	2021883a 	mov	r16,r4
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];
    f85c:	24800d04 	addi	r18,r4,52

    if (flash->csr_base != NULL) {
    f860:	10000b26 	beq	r2,zero,f890 <altera_onchip_flash_init+0x64>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
    f864:	10c00037 	ldwio	r3,0(r2)
    f868:	18c0080c 	andi	r3,r3,32
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
    f86c:	15800037 	ldwio	r22,0(r2)
    f870:	b580100c 	andi	r22,r22,64
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
    f874:	15000037 	ldwio	r20,0(r2)
    f878:	a500200c 	andi	r20,r20,128
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
    f87c:	14c00037 	ldwio	r19,0(r2)
    f880:	9cc0400c 	andi	r19,r19,256
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    f884:	15400037 	ldwio	r21,0(r2)
    f888:	ad40800c 	andi	r21,r21,512
    f88c:	00000506 	br	f8a4 <altera_onchip_flash_init+0x78>
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
    f890:	002b883a 	mov	r21,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    f894:	0027883a 	mov	r19,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    f898:	0029883a 	mov	r20,zero
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    f89c:	002d883a 	mov	r22,zero
)
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    f8a0:	0007883a 	mov	r3,zero
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
    f8a4:	84403017 	ldw	r17,192(r16)
    f8a8:	00800044 	movi	r2,1
    f8ac:	88800d1e 	bne	r17,r2,f8e4 <altera_onchip_flash_init+0xb8>
    f8b0:	18000c1e 	bne	r3,zero,f8e4 <altera_onchip_flash_init+0xb8>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
    f8b4:	81003117 	ldw	r4,196(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
    f8b8:	80803217 	ldw	r2,200(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f8bc:	85c03f17 	ldw	r23,252(r16)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
    f8c0:	81000d15 	stw	r4,52(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
    f8c4:	1109c83a 	sub	r4,r2,r4
    f8c8:	21000044 	addi	r4,r4,1
    f8cc:	81000e15 	stw	r4,56(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f8d0:	b80b883a 	mov	r5,r23
    f8d4:	000bb740 	call	bb74 <__divsi3>
    f8d8:	80800f15 	stw	r2,60(r16)
        region_info[number_of_regions].block_size = flash->page_size;
    f8dc:	85c01015 	stw	r23,64(r16)
    f8e0:	00000106 	br	f8e8 <altera_onchip_flash_init+0xbc>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    f8e4:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
    f8e8:	80c03317 	ldw	r3,204(r16)
    f8ec:	00800044 	movi	r2,1
    f8f0:	1880111e 	bne	r3,r2,f938 <altera_onchip_flash_init+0x10c>
    f8f4:	b000101e 	bne	r22,zero,f938 <altera_onchip_flash_init+0x10c>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
    f8f8:	81003417 	ldw	r4,208(r16)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
    f8fc:	80803517 	ldw	r2,212(r16)
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
    f900:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f904:	85c03f17 	ldw	r23,252(r16)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
    f908:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
    f90c:	90ed883a 	add	r22,r18,r3
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
    f910:	10800044 	addi	r2,r2,1
    f914:	b0800115 	stw	r2,4(r22)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f918:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
    f91c:	b1000015 	stw	r4,0(r22)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f920:	19000e17 	ldw	r4,56(r3)
    f924:	b80b883a 	mov	r5,r23
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    f928:	8c400044 	addi	r17,r17,1

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f92c:	000bb740 	call	bb74 <__divsi3>
    f930:	b0800215 	stw	r2,8(r22)
        region_info[number_of_regions].block_size = flash->page_size;
    f934:	b5c00315 	stw	r23,12(r22)

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
    f938:	80c03617 	ldw	r3,216(r16)
    f93c:	00800044 	movi	r2,1
    f940:	1880111e 	bne	r3,r2,f988 <altera_onchip_flash_init+0x15c>
    f944:	a000101e 	bne	r20,zero,f988 <altera_onchip_flash_init+0x15c>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
    f948:	81003717 	ldw	r4,220(r16)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
    f94c:	80803817 	ldw	r2,224(r16)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
    f950:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f954:	85803f17 	ldw	r22,252(r16)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
    f958:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
    f95c:	90e9883a 	add	r20,r18,r3
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
    f960:	10800044 	addi	r2,r2,1
    f964:	a0800115 	stw	r2,4(r20)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f968:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
    f96c:	a1000015 	stw	r4,0(r20)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f970:	19000e17 	ldw	r4,56(r3)
    f974:	b00b883a 	mov	r5,r22
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    f978:	8c400044 	addi	r17,r17,1

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f97c:	000bb740 	call	bb74 <__divsi3>
    f980:	a0800215 	stw	r2,8(r20)
        region_info[number_of_regions].block_size = flash->page_size;
    f984:	a5800315 	stw	r22,12(r20)

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
    f988:	80c03917 	ldw	r3,228(r16)
    f98c:	00800044 	movi	r2,1
    f990:	1880111e 	bne	r3,r2,f9d8 <altera_onchip_flash_init+0x1ac>
    f994:	9800101e 	bne	r19,zero,f9d8 <altera_onchip_flash_init+0x1ac>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
    f998:	81003a17 	ldw	r4,232(r16)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
    f99c:	80803b17 	ldw	r2,236(r16)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
    f9a0:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f9a4:	85003f17 	ldw	r20,252(r16)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
    f9a8:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
    f9ac:	90e7883a 	add	r19,r18,r3
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
    f9b0:	10800044 	addi	r2,r2,1
    f9b4:	98800115 	stw	r2,4(r19)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f9b8:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
    f9bc:	99000015 	stw	r4,0(r19)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f9c0:	19000e17 	ldw	r4,56(r3)
    f9c4:	a00b883a 	mov	r5,r20
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    f9c8:	8c400044 	addi	r17,r17,1

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f9cc:	000bb740 	call	bb74 <__divsi3>
    f9d0:	98800215 	stw	r2,8(r19)
        region_info[number_of_regions].block_size = flash->page_size;
    f9d4:	9d000315 	stw	r20,12(r19)

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
    f9d8:	80c03c17 	ldw	r3,240(r16)
    f9dc:	00800044 	movi	r2,1
    f9e0:	1880111e 	bne	r3,r2,fa28 <altera_onchip_flash_init+0x1fc>
    f9e4:	a800101e 	bne	r21,zero,fa28 <altera_onchip_flash_init+0x1fc>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
    f9e8:	81003d17 	ldw	r4,244(r16)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
    f9ec:	80803e17 	ldw	r2,248(r16)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
    f9f0:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    f9f4:	84c03f17 	ldw	r19,252(r16)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
    f9f8:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
    f9fc:	90e5883a 	add	r18,r18,r3
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
    fa00:	10800044 	addi	r2,r2,1
    fa04:	90800115 	stw	r2,4(r18)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    fa08:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
    fa0c:	91000015 	stw	r4,0(r18)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    fa10:	19000e17 	ldw	r4,56(r3)
    fa14:	980b883a 	mov	r5,r19
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    fa18:	8c400044 	addi	r17,r17,1

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
    fa1c:	000bb740 	call	bb74 <__divsi3>
    fa20:	90800215 	stw	r2,8(r18)
        region_info[number_of_regions].block_size = flash->page_size;
    fa24:	94c00315 	stw	r19,12(r18)

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    fa28:	d1601c04 	addi	r5,gp,-32656
    fa2c:	8009883a 	mov	r4,r16

        number_of_regions++;
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
    fa30:	84400c15 	stw	r17,48(r16)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
}
    fa34:	dfc00817 	ldw	ra,32(sp)
    fa38:	ddc00717 	ldw	r23,28(sp)
    fa3c:	dd800617 	ldw	r22,24(sp)
    fa40:	dd400517 	ldw	r21,20(sp)
    fa44:	dd000417 	ldw	r20,16(sp)
    fa48:	dcc00317 	ldw	r19,12(sp)
    fa4c:	dc800217 	ldw	r18,8(sp)
    fa50:	dc400117 	ldw	r17,4(sp)
    fa54:	dc000017 	ldw	r16,0(sp)
    fa58:	dec00904 	addi	sp,sp,36
    fa5c:	00101041 	jmpi	10104 <alt_dev_llist_insert>

0000fa60 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
    fa60:	defffd04 	addi	sp,sp,-12
    fa64:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fa68:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
    fa6c:	dc400115 	stw	r17,4(sp)
    fa70:	dfc00215 	stw	ra,8(sp)
    fa74:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fa78:	842b9804 	addi	r16,r16,-20896
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
    fa7c:	88802f17 	ldw	r2,188(r17)
    fa80:	10800037 	ldwio	r2,0(r2)
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fa84:	108000cc 	andi	r2,r2,3
    fa88:	10000526 	beq	r2,zero,faa0 <alt_onchip_flash_poll_for_status_to_go_idle+0x40>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
    fa8c:	01000044 	movi	r4,1
    fa90:	843fffc4 	addi	r16,r16,-1
    fa94:	00100640 	call	10064 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
    fa98:	803ff81e 	bne	r16,zero,fa7c <__reset+0xfbf0fa7c>
                /* Timeout */
                ret_code = -ETIMEDOUT;
    fa9c:	00bfe304 	movi	r2,-116
            }
        }
    }

    return ret_code;
}
    faa0:	dfc00217 	ldw	ra,8(sp)
    faa4:	dc400117 	ldw	r17,4(sp)
    faa8:	dc000017 	ldw	r16,0(sp)
    faac:	dec00304 	addi	sp,sp,12
    fab0:	f800283a 	ret

0000fab4 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    fab4:	defffd04 	addi	sp,sp,-12
    fab8:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fabc:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    fac0:	dc400115 	stw	r17,4(sp)
    fac4:	dfc00215 	stw	ra,8(sp)
    fac8:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    facc:	842b9804 	addi	r16,r16,-20896
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
    fad0:	88802f17 	ldw	r2,188(r17)
    fad4:	10800037 	ldwio	r2,0(r2)
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fad8:	1080040c 	andi	r2,r2,16
    fadc:	1000061e 	bne	r2,zero,faf8 <alt_onchip_flash_poll_for_status_erase_passed+0x44>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
    fae0:	01000044 	movi	r4,1
    fae4:	843fffc4 	addi	r16,r16,-1
    fae8:	00100640 	call	10064 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
    faec:	803ff81e 	bne	r16,zero,fad0 <__reset+0xfbf0fad0>
                /* Timeout */
                ret_code = -ETIMEDOUT;
    faf0:	00bfe304 	movi	r2,-116
    faf4:	00000106 	br	fafc <alt_onchip_flash_poll_for_status_erase_passed+0x48>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
    faf8:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
    fafc:	dfc00217 	ldw	ra,8(sp)
    fb00:	dc400117 	ldw	r17,4(sp)
    fb04:	dc000017 	ldw	r16,0(sp)
    fb08:	dec00304 	addi	sp,sp,12
    fb0c:	f800283a 	ret

0000fb10 <alt_onchip_flash_erase_block>:
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
    fb10:	20800b17 	ldw	r2,44(r4)
    fb14:	28802f0e 	bge	r5,r2,fbd4 <alt_onchip_flash_erase_block+0xc4>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
    fb18:	20802f17 	ldw	r2,188(r4)
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
    fb1c:	defffd04 	addi	sp,sp,-12
    fb20:	dc400115 	stw	r17,4(sp)
    fb24:	dfc00215 	stw	ra,8(sp)
    fb28:	dc000015 	stw	r16,0(sp)
    fb2c:	2023883a 	mov	r17,r4
    if (block_offset >= flash->dev.length) {
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
    fb30:	10002a26 	beq	r2,zero,fbdc <alt_onchip_flash_erase_block+0xcc>
    fb34:	20802e17 	ldw	r2,184(r4)
    fb38:	1000281e 	bne	r2,zero,fbdc <alt_onchip_flash_erase_block+0xcc>
        return -ENODEV;
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
    fb3c:	20803f17 	ldw	r2,252(r4)
    fb40:	10bfffc4 	addi	r2,r2,-1
    fb44:	1144703a 	and	r2,r2,r5
    fb48:	1000261e 	bne	r2,zero,fbe4 <alt_onchip_flash_erase_block+0xd4>
    fb4c:	2821883a 	mov	r16,r5
        /* The address is not aligned */
        return -EINVAL;
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
    fb50:	000fa600 	call	fa60 <alt_onchip_flash_poll_for_status_to_go_idle>
    if (ret_code != 0)
    fb54:	1000241e 	bne	r2,zero,fbe8 <alt_onchip_flash_erase_block+0xd8>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
    fb58:	88802f17 	ldw	r2,188(r17)
    fb5c:	10800104 	addi	r2,r2,4
    fb60:	10c00037 	ldwio	r3,0(r2)
    fb64:	193c002c 	andhi	r4,r3,61440
    fb68:	00c02034 	movhi	r3,128
    fb6c:	18ffffc4 	addi	r3,r3,-1
    fb70:	20c6b03a 	or	r3,r4,r3
    fb74:	10c00035 	stwio	r3,0(r2)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
    fb78:	88c02f17 	ldw	r3,188(r17)
    fb7c:	18c00104 	addi	r3,r3,4
    fb80:	18800037 	ldwio	r2,0(r3)
    fb84:	800b883a 	mov	r5,r16
    fb88:	8000010e 	bge	r16,zero,fb90 <alt_onchip_flash_erase_block+0x80>
    fb8c:	814000c4 	addi	r5,r16,3
    fb90:	280bd0ba 	srai	r5,r5,2
    fb94:	10bc002c 	andhi	r2,r2,61440
    fb98:	29401c34 	orhi	r5,r5,112
    fb9c:	288ab03a 	or	r5,r5,r2
    fba0:	19400035 	stwio	r5,0(r3)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
    fba4:	8809883a 	mov	r4,r17
    fba8:	000fa600 	call	fa60 <alt_onchip_flash_poll_for_status_to_go_idle>

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
    fbac:	8809883a 	mov	r4,r17
    fbb0:	000fab40 	call	fab4 <alt_onchip_flash_poll_for_status_erase_passed>

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
    fbb4:	88c02f17 	ldw	r3,188(r17)
    fbb8:	18c00104 	addi	r3,r3,4
    fbbc:	19400037 	ldwio	r5,0(r3)
    fbc0:	01040034 	movhi	r4,4096
    fbc4:	213fffc4 	addi	r4,r4,-1
    fbc8:	2908b03a 	or	r4,r5,r4
    fbcc:	19000035 	stwio	r4,0(r3)

    return ret_code;
    fbd0:	00000506 	br	fbe8 <alt_onchip_flash_erase_block+0xd8>
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
        return -EFAULT;
    fbd4:	00bffc84 	movi	r2,-14

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
    fbd8:	f800283a 	ret
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
        return -ENODEV;
    fbdc:	00bffb44 	movi	r2,-19
    fbe0:	00000106 	br	fbe8 <alt_onchip_flash_erase_block+0xd8>

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
    {
        /* The address is not aligned */
        return -EINVAL;
    fbe4:	00bffa84 	movi	r2,-22

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
    fbe8:	dfc00217 	ldw	ra,8(sp)
    fbec:	dc400117 	ldw	r17,4(sp)
    fbf0:	dc000017 	ldw	r16,0(sp)
    fbf4:	dec00304 	addi	sp,sp,12
    fbf8:	f800283a 	ret

0000fbfc <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    fbfc:	defffd04 	addi	sp,sp,-12
    fc00:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fc04:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    fc08:	dc400115 	stw	r17,4(sp)
    fc0c:	dfc00215 	stw	ra,8(sp)
    fc10:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fc14:	842b9804 	addi	r16,r16,-20896
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
    fc18:	88802f17 	ldw	r2,188(r17)
    fc1c:	10800037 	ldwio	r2,0(r2)
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
    fc20:	1080020c 	andi	r2,r2,8
    fc24:	1000061e 	bne	r2,zero,fc40 <alt_onchip_flash_poll_for_status_write_passed+0x44>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
    fc28:	01000044 	movi	r4,1
    fc2c:	843fffc4 	addi	r16,r16,-1
    fc30:	00100640 	call	10064 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
    fc34:	803ff81e 	bne	r16,zero,fc18 <__reset+0xfbf0fc18>
                /* Timeout */
                ret_code = -ETIMEDOUT;
    fc38:	00bfe304 	movi	r2,-116
    fc3c:	00000106 	br	fc44 <alt_onchip_flash_poll_for_status_write_passed+0x48>
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
    fc40:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
    fc44:	dfc00217 	ldw	ra,8(sp)
    fc48:	dc400117 	ldw	r17,4(sp)
    fc4c:	dc000017 	ldw	r16,0(sp)
    fc50:	dec00304 	addi	sp,sp,12
    fc54:	f800283a 	ret

0000fc58 <alt_onchip_flash_write_block>:
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
    fc58:	20800b17 	ldw	r2,44(r4)
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
    fc5c:	defff404 	addi	sp,sp,-48
    fc60:	dc800415 	stw	r18,16(sp)
    fc64:	dfc00b15 	stw	ra,44(sp)
    fc68:	df000a15 	stw	fp,40(sp)
    fc6c:	ddc00915 	stw	r23,36(sp)
    fc70:	dd800815 	stw	r22,32(sp)
    fc74:	dd400715 	stw	r21,28(sp)
    fc78:	dd000615 	stw	r20,24(sp)
    fc7c:	dcc00515 	stw	r19,20(sp)
    fc80:	dc400315 	stw	r17,12(sp)
    fc84:	dc000215 	stw	r16,8(sp)
    fc88:	dc800c17 	ldw	r18,48(sp)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
    fc8c:	28804e0e 	bge	r5,r2,fdc8 <alt_onchip_flash_write_block+0x170>
    fc90:	3023883a 	mov	r17,r6
        (block_offset >= flash->dev.length) ||
    fc94:	30804c0e 	bge	r6,r2,fdc8 <alt_onchip_flash_write_block+0x170>
        (data_offset >= flash->dev.length) ||
    fc98:	1185c83a 	sub	r2,r2,r6
    fc9c:	14804a16 	blt	r2,r18,fdc8 <alt_onchip_flash_write_block+0x170>
    ) {
        return -EFAULT;
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
    fca0:	20802f17 	ldw	r2,188(r4)
    fca4:	2027883a 	mov	r19,r4
    fca8:	10004926 	beq	r2,zero,fdd0 <alt_onchip_flash_write_block+0x178>
    fcac:	20802e17 	ldw	r2,184(r4)
    fcb0:	1000471e 	bne	r2,zero,fdd0 <alt_onchip_flash_write_block+0x178>
    fcb4:	382f883a 	mov	r23,r7
        return -ENODEV;
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
    fcb8:	000fa600 	call	fa60 <alt_onchip_flash_poll_for_status_to_go_idle>
    fcbc:	1021883a 	mov	r16,r2
    if (ret_code != 0)
    fcc0:	1000451e 	bne	r2,zero,fdd8 <alt_onchip_flash_write_block+0x180>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
    fcc4:	98802f17 	ldw	r2,188(r19)
    fcc8:	10800104 	addi	r2,r2,4
    fccc:	10c00037 	ldwio	r3,0(r2)
    fcd0:	193c002c 	andhi	r4,r3,61440
    fcd4:	00c02034 	movhi	r3,128
    fcd8:	18ffffc4 	addi	r3,r3,-1
    fcdc:	20c6b03a 	or	r3,r4,r3
    fce0:	10c00035 	stwio	r3,0(r2)
    int           length
)
{
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int buffer_offset = 0;
    fce4:	002b883a 	mov	r21,zero

    /* Check data length */
    while (length)
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
    fce8:	073fffc4 	movi	fp,-1
    fcec:	05bfff04 	movi	r22,-4

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
    fcf0:	90002d26 	beq	r18,zero,fda8 <alt_onchip_flash_write_block+0x150>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
    fcf4:	df000015 	stw	fp,0(sp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
    fcf8:	890000cc 	andi	r4,r17,3
    fcfc:	bd4b883a 	add	r5,r23,r21
    fd00:	20000f1e 	bne	r4,zero,fd40 <alt_onchip_flash_write_block+0xe8>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
    fd04:	89c00104 	addi	r7,r17,4
    fd08:	3d8e703a 	and	r7,r7,r22
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
    fd0c:	3c69c83a 	sub	r20,r7,r17
    fd10:	9500010e 	bge	r18,r20,fd18 <alt_onchip_flash_write_block+0xc0>
    fd14:	9029883a 	mov	r20,r18
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
    fd18:	a00d883a 	mov	r6,r20
    fd1c:	d809883a 	mov	r4,sp
    fd20:	d9c00115 	stw	r7,4(sp)
    fd24:	00076640 	call	7664 <memcpy>

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
    fd28:	d9c00117 	ldw	r7,4(sp)
    fd2c:	8807883a 	mov	r3,r17
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
            buffer_offset += length_of_current_write;
    fd30:	ad2b883a 	add	r21,r21,r20
            length -= length_of_current_write;
    fd34:	9525c83a 	sub	r18,r18,r20

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
    fd38:	3823883a 	mov	r17,r7
    fd3c:	00000f06 	br	fd7c <alt_onchip_flash_write_block+0x124>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
    fd40:	8907c83a 	sub	r3,r17,r4
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
    fd44:	1c400104 	addi	r17,r3,4
    fd48:	8da2703a 	and	r17,r17,r22
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
    fd4c:	9105883a 	add	r2,r18,r4
    fd50:	88e9c83a 	sub	r20,r17,r3
    fd54:	1500010e 	bge	r2,r20,fd5c <alt_onchip_flash_write_block+0x104>
    fd58:	1029883a 	mov	r20,r2
    fd5c:	a129c83a 	sub	r20,r20,r4
    fd60:	a00d883a 	mov	r6,r20
    fd64:	d909883a 	add	r4,sp,r4
    fd68:	d8c00115 	stw	r3,4(sp)
    fd6c:	00076640 	call	7664 <memcpy>
            buffer_offset += length_of_current_write - padding;
            length -= length_of_current_write - padding;
    fd70:	d8c00117 	ldw	r3,4(sp)
            current_data_offset = current_data_offset - padding;
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
            buffer_offset += length_of_current_write - padding;
    fd74:	ad2b883a 	add	r21,r21,r20
            length -= length_of_current_write - padding;
    fd78:	9525c83a 	sub	r18,r18,r20
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
    fd7c:	98800a17 	ldw	r2,40(r19)
    fd80:	10c7883a 	add	r3,r2,r3
    fd84:	d8800017 	ldw	r2,0(sp)
    fd88:	18800035 	stwio	r2,0(r3)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
    fd8c:	9809883a 	mov	r4,r19
    fd90:	000fa600 	call	fa60 <alt_onchip_flash_poll_for_status_to_go_idle>
        if (ret_code != 0)
    fd94:	1000031e 	bne	r2,zero,fda4 <alt_onchip_flash_write_block+0x14c>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
    fd98:	9809883a 	mov	r4,r19
    fd9c:	000fbfc0 	call	fbfc <alt_onchip_flash_poll_for_status_write_passed>
        if (ret_code != 0)
    fda0:	103fd326 	beq	r2,zero,fcf0 <__reset+0xfbf0fcf0>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
    fda4:	1021883a 	mov	r16,r2
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
    fda8:	98802f17 	ldw	r2,188(r19)
    fdac:	10800104 	addi	r2,r2,4
    fdb0:	11000037 	ldwio	r4,0(r2)
    fdb4:	00c40034 	movhi	r3,4096
    fdb8:	18ffffc4 	addi	r3,r3,-1
    fdbc:	20c6b03a 	or	r3,r4,r3
    fdc0:	10c00035 	stwio	r3,0(r2)
    fdc4:	00000406 	br	fdd8 <alt_onchip_flash_write_block+0x180>
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
    fdc8:	00bffc84 	movi	r2,-14
    fdcc:	00000306 	br	fddc <alt_onchip_flash_write_block+0x184>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
        return -ENODEV;
    fdd0:	00bffb44 	movi	r2,-19
    fdd4:	00000106 	br	fddc <alt_onchip_flash_write_block+0x184>
    fdd8:	8005883a 	mov	r2,r16

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
    fddc:	dfc00b17 	ldw	ra,44(sp)
    fde0:	df000a17 	ldw	fp,40(sp)
    fde4:	ddc00917 	ldw	r23,36(sp)
    fde8:	dd800817 	ldw	r22,32(sp)
    fdec:	dd400717 	ldw	r21,28(sp)
    fdf0:	dd000617 	ldw	r20,24(sp)
    fdf4:	dcc00517 	ldw	r19,20(sp)
    fdf8:	dc800417 	ldw	r18,16(sp)
    fdfc:	dc400317 	ldw	r17,12(sp)
    fe00:	dc000217 	ldw	r16,8(sp)
    fe04:	dec00c04 	addi	sp,sp,48
    fe08:	f800283a 	ret

0000fe0c <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe0c:	0030e03a 	nextpc	et
    fe10:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe1c:	0030e03a 	nextpc	et
    fe20:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe2c:	0030e03a 	nextpc	et
    fe30:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe3c:	0030e03a 	nextpc	et
    fe40:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe4c:	0030e03a 	nextpc	et
    fe50:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe5c:	0030e03a 	nextpc	et
    fe60:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    fe6c:	0030e03a 	nextpc	et
    fe70:	000fe7c1 	jmpi	fe7c <alt_shadow_non_preemptive_interrupt>
	...

0000fe7c <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
    fe7c:	c4000117 	ldw	r16,4(et)
#ifdef ALT_INTERRUPT_STACK
    /*
     * Get STATUS.IH from before the interrupt
     */

    andi r5, sstatus, NIOS2_STATUS_IH_MSK
    fe80:	f140020c 	andi	r5,sstatus,8

    /*
     * If it wasn't an interrupt before, SP is already set up for us.
     */

    beq r5, r0, .Lskip_get_sp_shadow_non_preemptive
    fe84:	28000126 	beq	r5,zero,fe8c <alt_shadow_non_preemptive_interrupt+0x10>

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
    fe88:	dec00038 	rdprs	sp,sp,0
   */
    ALT_OS_INT_ENTER_ASM

    /* Re-enable interrupts if preemption into a new register set is enabled */
#ifdef ALTERA_VIC_DRIVER_PREEMPTION_INTO_NEW_REGISTER_SET_ENABLED
    rdctl r5, status
    fe8c:	000b303a 	rdctl	r5,status
    ori   r5, r5, NIOS2_STATUS_PIE_MSK
    fe90:	29400054 	ori	r5,r5,1
    wrctl status, r5
    fe94:	2801703a 	wrctl	status,r5
#endif

    ldw r4, 8(et)               /* load isr_context */
    fe98:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
    fe9c:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
    fea0:	ef7fff04 	addi	ea,ea,-4
    eret
    fea4:	ef80083a 	eret

0000fea8 <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
    fea8:	20800117 	ldw	r2,4(r4)
    feac:	d0e03a04 	addi	r3,gp,-32536
    feb0:	1085883a 	add	r2,r2,r2
    feb4:	1085883a 	add	r2,r2,r2
    feb8:	1885883a 	add	r2,r3,r2
    febc:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
    fec0:	20800017 	ldw	r2,0(r4)
    fec4:	00ffffc4 	movi	r3,-1
    fec8:	10c02235 	stwio	r3,136(r2)
    fecc:	21400704 	addi	r5,r4,28

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    fed0:	0007883a 	mov	r3,zero
    fed4:	20800217 	ldw	r2,8(r4)
    fed8:	1880092e 	bgeu	r3,r2,ff00 <alt_vic_irq_init+0x58>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    fedc:	21800017 	ldw	r6,0(r4)
    fee0:	18c5883a 	add	r2,r3,r3
    fee4:	1085883a 	add	r2,r2,r2
    fee8:	3085883a 	add	r2,r6,r2
    feec:	29800017 	ldw	r6,0(r5)
    fef0:	11800035 	stwio	r6,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    fef4:	18c00044 	addi	r3,r3,1
    fef8:	29400104 	addi	r5,r5,4
    fefc:	003ff506 	br	fed4 <__reset+0xfbf0fed4>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    ff00:	21800517 	ldw	r6,20(r4)
    ff04:	01c00074 	movhi	r7,1
    ff08:	0005883a 	mov	r2,zero
    ff0c:	39c1f904 	addi	r7,r7,2020
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    ff10:	01400204 	movi	r5,8
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    ff14:	1087883a 	add	r3,r2,r2
    ff18:	18c7883a 	add	r3,r3,r3
    ff1c:	19c7883a 	add	r3,r3,r7
    ff20:	18c00017 	ldw	r3,0(r3)
    ff24:	1980061e 	bne	r3,r6,ff40 <alt_vic_irq_init+0x98>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
    ff28:	20c00417 	ldw	r3,16(r4)
    ff2c:	21400017 	ldw	r5,0(r4)
    ff30:	180690fa 	slli	r3,r3,3
    ff34:	1884b03a 	or	r2,r3,r2
    ff38:	28802835 	stwio	r2,160(r5)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
    ff3c:	00000206 	br	ff48 <alt_vic_irq_init+0xa0>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    ff40:	10800044 	addi	r2,r2,1
    ff44:	117ff31e 	bne	r2,r5,ff14 <__reset+0xfbf0ff14>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
    ff48:	20800017 	ldw	r2,0(r4)
    ff4c:	20c00617 	ldw	r3,24(r4)
    ff50:	10c02a35 	stwio	r3,168(r2)
    ff54:	f800283a 	ret

0000ff58 <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
    ff58:	20001b1e 	bne	r4,zero,ffc8 <alt_ic_isr_register+0x70>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
    ff5c:	d0e03a17 	ldw	r3,-32536(gp)

    if(irq < pdev->num_of_intr_ports)
    ff60:	18800217 	ldw	r2,8(r3)
    ff64:	2880182e 	bgeu	r5,r2,ffc8 <alt_ic_isr_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff68:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff6c:	00bfff84 	movi	r2,-2
    ff70:	4088703a 	and	r4,r8,r2
    ff74:	2001703a 	wrctl	status,r4
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
    ff78:	19000517 	ldw	r4,20(r3)
    ff7c:	1a400617 	ldw	r9,24(r3)
    ff80:	2909383a 	mul	r4,r5,r4
    ff84:	4909883a 	add	r4,r9,r4

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
    ff88:	21800215 	stw	r6,8(r4)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
    ff8c:	21c00315 	stw	r7,12(r4)
    ff90:	19000017 	ldw	r4,0(r3)
    ff94:	00c00044 	movi	r3,1

        if(isr)
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    ff98:	1946983a 	sll	r3,r3,r5

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);

        if(isr)
    ff9c:	30000226 	beq	r6,zero,ffa8 <alt_ic_isr_register+0x50>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    ffa0:	20c02135 	stwio	r3,132(r4)
    ffa4:	00000106 	br	ffac <alt_ic_isr_register+0x54>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
    ffa8:	20c02235 	stwio	r3,136(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    ffac:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    ffb0:	1884703a 	and	r2,r3,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    ffb4:	4200004c 	andi	r8,r8,1
    ffb8:	4084b03a 	or	r2,r8,r2
    ffbc:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
    ffc0:	0005883a 	mov	r2,zero
    ffc4:	f800283a 	ret
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
        return -1;
    ffc8:	00bfffc4 	movi	r2,-1

        return 0;
    }

    return -1;
}
    ffcc:	f800283a 	ret

0000ffd0 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    ffd0:	d0a03c17 	ldw	r2,-32528(gp)
    ffd4:	10001f26 	beq	r2,zero,10054 <alt_alarm_start+0x84>
  {
    if (alarm)
    ffd8:	20002026 	beq	r4,zero,1005c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
    ffdc:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    ffe0:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffe4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffe8:	00bfff84 	movi	r2,-2
    ffec:	3084703a 	and	r2,r6,r2
    fff0:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fff4:	d0a03b17 	ldw	r2,-32532(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    fff8:	10c00044 	addi	r3,r2,1
    fffc:	194b883a 	add	r5,r3,r5
   10000:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10004:	2880032e 	bgeu	r5,r2,10014 <alt_alarm_start+0x44>
      {
        alarm->rollover = 1;
   10008:	00800044 	movi	r2,1
   1000c:	20800405 	stb	r2,16(r4)
   10010:	00000106 	br	10018 <alt_alarm_start+0x48>
      }
      else
      {
        alarm->rollover = 0;
   10014:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10018:	d0a01e04 	addi	r2,gp,-32648
   1001c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   10020:	d0a01e17 	ldw	r2,-32648(gp)
   10024:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10028:	d0a01e17 	ldw	r2,-32648(gp)
  list->next           = entry;
   1002c:	d1201e15 	stw	r4,-32648(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   10030:	11000115 	stw	r4,4(r2)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   10034:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   10038:	00ffff84 	movi	r3,-2
   1003c:	10c6703a 	and	r3,r2,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   10040:	3080004c 	andi	r2,r6,1
   10044:	10c4b03a 	or	r2,r2,r3
   10048:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   1004c:	0005883a 	mov	r2,zero
   10050:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   10054:	00bfde84 	movi	r2,-134
   10058:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   1005c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   10060:	f800283a 	ret

00010064 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10064:	0140f874 	movhi	r5,993
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10068:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1006c:	297e0f84 	addi	r5,r5,-1986
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10070:	dc000015 	stw	r16,0(sp)
   10074:	dfc00115 	stw	ra,4(sp)
   10078:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1007c:	000bc6c0 	call	bc6c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10080:	10000e26 	beq	r2,zero,100bc <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10084:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10088:	013f07f4 	movhi	r4,64543
   1008c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10090:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10094:	2101f084 	addi	r4,r4,1986
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10098:	297fffc4 	addi	r5,r5,-1
   1009c:	283ffe1e 	bne	r5,zero,10098 <__reset+0xfbf10098>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   100a0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   100a4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   100a8:	18bffb16 	blt	r3,r2,10098 <__reset+0xfbf10098>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   100ac:	84000864 	muli	r16,r16,33
   100b0:	843fffc4 	addi	r16,r16,-1
   100b4:	803ffe1e 	bne	r16,zero,100b0 <__reset+0xfbf100b0>
   100b8:	00000306 	br	100c8 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   100bc:	84000864 	muli	r16,r16,33
   100c0:	843fffc4 	addi	r16,r16,-1
   100c4:	043ffe16 	blt	zero,r16,100c0 <__reset+0xfbf100c0>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   100c8:	0005883a 	mov	r2,zero
   100cc:	dfc00117 	ldw	ra,4(sp)
   100d0:	dc000017 	ldw	r16,0(sp)
   100d4:	dec00204 	addi	sp,sp,8
   100d8:	f800283a 	ret

000100dc <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   100dc:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   100e0:	2005883a 	mov	r2,r4
   100e4:	1140032e 	bgeu	r2,r5,100f4 <alt_dcache_flush+0x18>
  { 
    ALT_FLUSH_DATA(i); 
   100e8:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   100ec:	10800804 	addi	r2,r2,32
   100f0:	003ffc06 	br	100e4 <__reset+0xfbf100e4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   100f4:	210007cc 	andi	r4,r4,31
   100f8:	20000126 	beq	r4,zero,10100 <alt_dcache_flush+0x24>
  {
    ALT_FLUSH_DATA(i);
   100fc:	1000001b 	flushda	0(r2)
   10100:	f800283a 	ret

00010104 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10104:	20000226 	beq	r4,zero,10110 <alt_dev_llist_insert+0xc>
   10108:	20800217 	ldw	r2,8(r4)
   1010c:	1000101e 	bne	r2,zero,10150 <alt_dev_llist_insert+0x4c>
   10110:	d0a01817 	ldw	r2,-32672(gp)
   10114:	10000926 	beq	r2,zero,1013c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10118:	deffff04 	addi	sp,sp,-4
   1011c:	dfc00015 	stw	ra,0(sp)
   10120:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10124:	00c00584 	movi	r3,22
   10128:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1012c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10130:	dfc00017 	ldw	ra,0(sp)
   10134:	dec00104 	addi	sp,sp,4
   10138:	f800283a 	ret
   1013c:	d0a03604 	addi	r2,gp,-32552
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10140:	00c00584 	movi	r3,22
   10144:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10148:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1014c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10150:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10154:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10158:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   1015c:	28800017 	ldw	r2,0(r5)
   10160:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10164:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10168:	0005883a 	mov	r2,zero
   1016c:	f800283a 	ret

00010170 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   10170:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   10174:	d1601c04 	addi	r5,gp,-32656
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   10178:	dc000015 	stw	r16,0(sp)
   1017c:	dfc00115 	stw	ra,4(sp)
   10180:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   10184:	000e4680 	call	e468 <alt_find_dev>

  if ((dev) && dev->open)
   10188:	10000826 	beq	r2,zero,101ac <alt_flash_open_dev+0x3c>
   1018c:	10c00317 	ldw	r3,12(r2)
   10190:	18000726 	beq	r3,zero,101b0 <alt_flash_open_dev+0x40>
  {
    return dev->open(dev, name);
   10194:	800b883a 	mov	r5,r16
   10198:	1009883a 	mov	r4,r2
  }

  return dev;
}
   1019c:	dfc00117 	ldw	ra,4(sp)
   101a0:	dc000017 	ldw	r16,0(sp)
   101a4:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
   101a8:	1800683a 	jmp	r3
   101ac:	0005883a 	mov	r2,zero
  }

  return dev;
}
   101b0:	dfc00117 	ldw	ra,4(sp)
   101b4:	dc000017 	ldw	r16,0(sp)
   101b8:	dec00204 	addi	sp,sp,8
   101bc:	f800283a 	ret

000101c0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
   101c0:	20000326 	beq	r4,zero,101d0 <alt_flash_close_dev+0x10>
   101c4:	20800417 	ldw	r2,16(r4)
   101c8:	10000126 	beq	r2,zero,101d0 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
   101cc:	1000683a 	jmp	r2
   101d0:	f800283a 	ret

000101d4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101d4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101d8:	00bfff84 	movi	r2,-2
   101dc:	188a703a 	and	r5,r3,r2
   101e0:	2801703a 	wrctl	status,r5
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   101e4:	21800117 	ldw	r6,4(r4)
   101e8:	21400017 	ldw	r5,0(r4)
   101ec:	29800115 	stw	r6,4(r5)
  entry->previous->next = entry->next;
   101f0:	21800117 	ldw	r6,4(r4)
   101f4:	31400015 	stw	r5,0(r6)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   101f8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   101fc:	21000015 	stw	r4,0(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   10200:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   10204:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   10208:	18c0004c 	andi	r3,r3,1
   1020c:	1884b03a 	or	r2,r3,r2
   10210:	1001703a 	wrctl	status,r2
   10214:	f800283a 	ret

00010218 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10218:	d0a03b17 	ldw	r2,-32532(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1021c:	defffb04 	addi	sp,sp,-20
   10220:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10224:	d4201e17 	ldw	r16,-32648(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10228:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1022c:	dc800215 	stw	r18,8(sp)
   10230:	dc400115 	stw	r17,4(sp)
   10234:	dfc00415 	stw	ra,16(sp)
   10238:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1023c:	d0a03b15 	stw	r2,-32532(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10240:	d4601e04 	addi	r17,gp,-32648
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   10244:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10248:	84401a26 	beq	r16,r17,102b4 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1024c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   10250:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10254:	10000326 	beq	r2,zero,10264 <alt_tick+0x4c>
   10258:	d0a03b17 	ldw	r2,-32532(gp)
   1025c:	1000011e 	bne	r2,zero,10264 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   10260:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10264:	d0e03b17 	ldw	r3,-32532(gp)
   10268:	80800217 	ldw	r2,8(r16)
   1026c:	18800f36 	bltu	r3,r2,102ac <alt_tick+0x94>
   10270:	80800403 	ldbu	r2,16(r16)
   10274:	10000d1e 	bne	r2,zero,102ac <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   10278:	80800317 	ldw	r2,12(r16)
   1027c:	81000517 	ldw	r4,20(r16)
   10280:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10284:	1000031e 	bne	r2,zero,10294 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   10288:	8009883a 	mov	r4,r16
   1028c:	00101d40 	call	101d4 <alt_alarm_stop>
   10290:	00000606 	br	102ac <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   10294:	80c00217 	ldw	r3,8(r16)
   10298:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1029c:	d0e03b17 	ldw	r3,-32532(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   102a0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   102a4:	10c0012e 	bgeu	r2,r3,102ac <alt_tick+0x94>
        {
          alarm->rollover = 1;
   102a8:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   102ac:	9821883a 	mov	r16,r19
   102b0:	003fe506 	br	10248 <__reset+0xfbf10248>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   102b4:	dfc00417 	ldw	ra,16(sp)
   102b8:	dcc00317 	ldw	r19,12(sp)
   102bc:	dc800217 	ldw	r18,8(sp)
   102c0:	dc400117 	ldw	r17,4(sp)
   102c4:	dc000017 	ldw	r16,0(sp)
   102c8:	dec00504 	addi	sp,sp,20
   102cc:	f800283a 	ret

000102d0 <memcmp>:
   102d0:	01c000c4 	movi	r7,3
   102d4:	3980192e 	bgeu	r7,r6,1033c <memcmp+0x6c>
   102d8:	2144b03a 	or	r2,r4,r5
   102dc:	11c4703a 	and	r2,r2,r7
   102e0:	10000f26 	beq	r2,zero,10320 <memcmp+0x50>
   102e4:	20800003 	ldbu	r2,0(r4)
   102e8:	28c00003 	ldbu	r3,0(r5)
   102ec:	10c0151e 	bne	r2,r3,10344 <memcmp+0x74>
   102f0:	31bfff84 	addi	r6,r6,-2
   102f4:	01ffffc4 	movi	r7,-1
   102f8:	00000406 	br	1030c <memcmp+0x3c>
   102fc:	20800003 	ldbu	r2,0(r4)
   10300:	28c00003 	ldbu	r3,0(r5)
   10304:	31bfffc4 	addi	r6,r6,-1
   10308:	10c00e1e 	bne	r2,r3,10344 <memcmp+0x74>
   1030c:	21000044 	addi	r4,r4,1
   10310:	29400044 	addi	r5,r5,1
   10314:	31fff91e 	bne	r6,r7,102fc <__reset+0xfbf102fc>
   10318:	0005883a 	mov	r2,zero
   1031c:	f800283a 	ret
   10320:	20c00017 	ldw	r3,0(r4)
   10324:	28800017 	ldw	r2,0(r5)
   10328:	18bfee1e 	bne	r3,r2,102e4 <__reset+0xfbf102e4>
   1032c:	31bfff04 	addi	r6,r6,-4
   10330:	21000104 	addi	r4,r4,4
   10334:	29400104 	addi	r5,r5,4
   10338:	39bff936 	bltu	r7,r6,10320 <__reset+0xfbf10320>
   1033c:	303fe91e 	bne	r6,zero,102e4 <__reset+0xfbf102e4>
   10340:	003ff506 	br	10318 <__reset+0xfbf10318>
   10344:	10c5c83a 	sub	r2,r2,r3
   10348:	f800283a 	ret
